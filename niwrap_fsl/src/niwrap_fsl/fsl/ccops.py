# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CCOPS_METADATA = Metadata(
    id="15f914d7513b2d71d9d54891eb8992cdb8593e4a.boutiques",
    name="ccops",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


CcopsParameters = typing.TypedDict('CcopsParameters', {
    "__STYX_TYPE__": typing.Literal["ccops"],
    "basename": str,
    "infile": typing.NotRequired[InputPathType | None],
    "tract_dir": typing.NotRequired[str | None],
    "exclusion_mask": typing.NotRequired[InputPathType | None],
    "reorder_seedspace": bool,
    "reorder_tractspace": bool,
    "tract_reord": bool,
    "connexity_constraint": typing.NotRequired[float | None],
    "binarise_val": typing.NotRequired[float | None],
    "matrix_power": typing.NotRequired[float | None],
    "brain_mask": typing.NotRequired[InputPathType | None],
    "scheme": typing.NotRequired[str | None],
    "nclusters": typing.NotRequired[float | None],
    "help": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "ccops": ccops_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "ccops": ccops_outputs,
    }.get(t)


class CcopsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ccops(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Output clustered ROI mask"""


def ccops_params(
    basename: str,
    infile: InputPathType | None = None,
    tract_dir: str | None = None,
    exclusion_mask: InputPathType | None = None,
    reorder_seedspace: bool = False,
    reorder_tractspace: bool = False,
    tract_reord: bool = False,
    connexity_constraint: float | None = 0,
    binarise_val: float | None = 0,
    matrix_power: float | None = 1,
    brain_mask: InputPathType | None = None,
    scheme: str | None = "spectral",
    nclusters: float | None = None,
    help_: bool = False,
) -> CcopsParameters:
    """
    Build parameters.
    
    Args:
        basename: Output basename.
        infile: Input matrix.
        tract_dir: Tractography Results Directory.
        exclusion_mask: Exclusion mask (in tract space).
        reorder_seedspace: Do seedspace reordering (default no).
        reorder_tractspace: Do tractspace reordering (default no).
        tract_reord: Propagate seed reordering onto tract space.
        connexity_constraint: Add connexity constraint - value between 0 and 1\
            (0 is no constraint). Default is 0.
        binarise_val: Binarise at (default 0 - no binarisation).
        matrix_power: Power to raise the correlation matrix to (default 1).
        brain_mask: Brain mask used to output the clustered ROI mask (not\
            necessary if --dir set).
        scheme: Reordering algorithm. Can be either spectral (default), kmeans\
            or fuzzy.
        nclusters: Number of clusters to be used in kmeans or fuzzy.
        help_: Display this help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "ccops",
        "basename": basename,
        "reorder_seedspace": reorder_seedspace,
        "reorder_tractspace": reorder_tractspace,
        "tract_reord": tract_reord,
        "help": help_,
    }
    if infile is not None:
        params["infile"] = infile
    if tract_dir is not None:
        params["tract_dir"] = tract_dir
    if exclusion_mask is not None:
        params["exclusion_mask"] = exclusion_mask
    if connexity_constraint is not None:
        params["connexity_constraint"] = connexity_constraint
    if binarise_val is not None:
        params["binarise_val"] = binarise_val
    if matrix_power is not None:
        params["matrix_power"] = matrix_power
    if brain_mask is not None:
        params["brain_mask"] = brain_mask
    if scheme is not None:
        params["scheme"] = scheme
    if nclusters is not None:
        params["nclusters"] = nclusters
    return params


def ccops_cargs(
    params: CcopsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("ccops")
    cargs.extend([
        "--basename",
        params.get("basename")
    ])
    if params.get("infile") is not None:
        cargs.extend([
            "--in",
            execution.input_file(params.get("infile"))
        ])
    if params.get("tract_dir") is not None:
        cargs.extend([
            "--dir",
            params.get("tract_dir")
        ])
    if params.get("exclusion_mask") is not None:
        cargs.extend([
            "-x",
            execution.input_file(params.get("exclusion_mask"))
        ])
    if params.get("reorder_seedspace"):
        cargs.append("--r1")
    if params.get("reorder_tractspace"):
        cargs.append("--r2")
    if params.get("tract_reord"):
        cargs.append("--tractreord")
    if params.get("connexity_constraint") is not None:
        cargs.extend([
            "--con",
            str(params.get("connexity_constraint"))
        ])
    if params.get("binarise_val") is not None:
        cargs.extend([
            "--bin",
            str(params.get("binarise_val"))
        ])
    if params.get("matrix_power") is not None:
        cargs.extend([
            "--power",
            str(params.get("matrix_power"))
        ])
    if params.get("brain_mask") is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("brain_mask"))
        ])
    if params.get("scheme") is not None:
        cargs.extend([
            "--scheme",
            params.get("scheme")
        ])
    if params.get("nclusters") is not None:
        cargs.extend([
            "--nclusters",
            str(params.get("nclusters"))
        ])
    if params.get("help"):
        cargs.append("--help")
    return cargs


def ccops_outputs(
    params: CcopsParameters,
    execution: Execution,
) -> CcopsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CcopsOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("basename") + "_output.nii.gz"),
    )
    return ret


def ccops_execute(
    params: CcopsParameters,
    execution: Execution,
) -> CcopsOutputs:
    """
    ccops - Clustering of Connectomes Using Probabilistic Tractography.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `CcopsOutputs`).
    """
    params = execution.params(params)
    cargs = ccops_cargs(params, execution)
    ret = ccops_outputs(params, execution)
    execution.run(cargs)
    return ret


def ccops(
    basename: str,
    infile: InputPathType | None = None,
    tract_dir: str | None = None,
    exclusion_mask: InputPathType | None = None,
    reorder_seedspace: bool = False,
    reorder_tractspace: bool = False,
    tract_reord: bool = False,
    connexity_constraint: float | None = 0,
    binarise_val: float | None = 0,
    matrix_power: float | None = 1,
    brain_mask: InputPathType | None = None,
    scheme: str | None = "spectral",
    nclusters: float | None = None,
    help_: bool = False,
    runner: Runner | None = None,
) -> CcopsOutputs:
    """
    ccops - Clustering of Connectomes Using Probabilistic Tractography.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        basename: Output basename.
        infile: Input matrix.
        tract_dir: Tractography Results Directory.
        exclusion_mask: Exclusion mask (in tract space).
        reorder_seedspace: Do seedspace reordering (default no).
        reorder_tractspace: Do tractspace reordering (default no).
        tract_reord: Propagate seed reordering onto tract space.
        connexity_constraint: Add connexity constraint - value between 0 and 1\
            (0 is no constraint). Default is 0.
        binarise_val: Binarise at (default 0 - no binarisation).
        matrix_power: Power to raise the correlation matrix to (default 1).
        brain_mask: Brain mask used to output the clustered ROI mask (not\
            necessary if --dir set).
        scheme: Reordering algorithm. Can be either spectral (default), kmeans\
            or fuzzy.
        nclusters: Number of clusters to be used in kmeans or fuzzy.
        help_: Display this help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CcopsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CCOPS_METADATA)
    params = ccops_params(
        basename=basename,
        infile=infile,
        tract_dir=tract_dir,
        exclusion_mask=exclusion_mask,
        reorder_seedspace=reorder_seedspace,
        reorder_tractspace=reorder_tractspace,
        tract_reord=tract_reord,
        connexity_constraint=connexity_constraint,
        binarise_val=binarise_val,
        matrix_power=matrix_power,
        brain_mask=brain_mask,
        scheme=scheme,
        nclusters=nclusters,
        help_=help_,
    )
    return ccops_execute(params, execution)


__all__ = [
    "CCOPS_METADATA",
    "CcopsOutputs",
    "CcopsParameters",
    "ccops",
    "ccops_params",
]
