# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

OLD_BETALL_METADATA = Metadata(
    id="08636e6ec0271b921d070eb58b4f14fcb6768064.boutiques",
    name="old_betall",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


OldBetallParameters = typing.TypedDict('OldBetallParameters', {
    "__STYX_TYPE__": typing.Literal["old_betall"],
    "t1_filerout": str,
    "t2_filerout": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "old_betall": old_betall_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "old_betall": old_betall_outputs,
    }.get(t)


class OldBetallOutputs(typing.NamedTuple):
    """
    Output object returned when calling `old_betall(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_t1: OutputPathType
    """Output file root for T1 image"""
    output_t2: OutputPathType
    """Output file root for T2 image"""


def old_betall_params(
    t1_filerout: str,
    t2_filerout: str,
) -> OldBetallParameters:
    """
    Build parameters.
    
    Args:
        t1_filerout: Input T1 image file root (e.g. img_t1.nii.gz).
        t2_filerout: Input T2 image file root (e.g. img_t2.nii.gz).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "old_betall",
        "t1_filerout": t1_filerout,
        "t2_filerout": t2_filerout,
    }
    return params


def old_betall_cargs(
    params: OldBetallParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("old_betall")
    cargs.append(params.get("t1_filerout"))
    cargs.append(params.get("t2_filerout"))
    return cargs


def old_betall_outputs(
    params: OldBetallParameters,
    execution: Execution,
) -> OldBetallOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = OldBetallOutputs(
        root=execution.output_file("."),
        output_t1=execution.output_file(params.get("t1_filerout")),
        output_t2=execution.output_file(params.get("t2_filerout")),
    )
    return ret


def old_betall_execute(
    params: OldBetallParameters,
    execution: Execution,
) -> OldBetallOutputs:
    """
    Automated brain extraction tool for FSL involving both T1 and T2 images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `OldBetallOutputs`).
    """
    params = execution.params(params)
    cargs = old_betall_cargs(params, execution)
    ret = old_betall_outputs(params, execution)
    execution.run(cargs)
    return ret


def old_betall(
    t1_filerout: str,
    t2_filerout: str,
    runner: Runner | None = None,
) -> OldBetallOutputs:
    """
    Automated brain extraction tool for FSL involving both T1 and T2 images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        t1_filerout: Input T1 image file root (e.g. img_t1.nii.gz).
        t2_filerout: Input T2 image file root (e.g. img_t2.nii.gz).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `OldBetallOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(OLD_BETALL_METADATA)
    params = old_betall_params(
        t1_filerout=t1_filerout,
        t2_filerout=t2_filerout,
    )
    return old_betall_execute(params, execution)


__all__ = [
    "OLD_BETALL_METADATA",
    "OldBetallOutputs",
    "OldBetallParameters",
    "old_betall",
    "old_betall_params",
]
