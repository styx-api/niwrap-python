# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FABBER_CEST_METADATA = Metadata(
    id="f087da22b7afcc4cfc16f90fcc2adce684db0135.boutiques",
    name="fabber_cest",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FabberCestParameters = typing.TypedDict('FabberCestParameters', {
    "__STYX_TYPE__": typing.Literal["fabber_cest"],
    "output": str,
    "method": str,
    "model": str,
    "data": InputPathType,
    "help": bool,
    "listmethods": bool,
    "listmodels": bool,
    "listparams": bool,
    "descparams": bool,
    "listoutputs": bool,
    "evaluate": typing.NotRequired[str | None],
    "evaluate_params": typing.NotRequired[str | None],
    "evaluate_nt": typing.NotRequired[int | None],
    "simple_output": bool,
    "overwrite": bool,
    "link_to_latest": bool,
    "loadmodels": typing.NotRequired[InputPathType | None],
    "data_multi": typing.NotRequired[InputPathType | None],
    "data_order": typing.NotRequired[str | None],
    "mask": typing.NotRequired[InputPathType | None],
    "masked_timepoints": typing.NotRequired[int | None],
    "suppdata": typing.NotRequired[InputPathType | None],
    "dump_param_names": bool,
    "save_model_fit": bool,
    "save_residuals": bool,
    "save_model_extras": bool,
    "save_mvn": bool,
    "save_mean": bool,
    "save_std": bool,
    "save_var": bool,
    "save_zstat": bool,
    "save_noise_mean": bool,
    "save_noise_std": bool,
    "save_free_energy": bool,
    "optfile": typing.NotRequired[InputPathType | None],
    "debug": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fabber_cest": fabber_cest_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "fabber_cest": fabber_cest_outputs,
    }.get(t)


class FabberCestOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fabber_cest(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    logfile: OutputPathType
    """Log file"""
    modelfit_out: OutputPathType
    """Model fit output as a 4d volume"""
    residuals_out: OutputPathType
    """Residuals output as a 4d volume"""
    modelextras_out: OutputPathType
    """Model extras output"""
    mvn_out: OutputPathType
    """Final MVN distributions output"""
    mean_out: OutputPathType
    """Parameter means output"""
    std_out: OutputPathType
    """Parameter standard deviations output"""
    var_out: OutputPathType
    """Parameter variances output"""
    zstat_out: OutputPathType
    """Parameter Z statistics output"""
    noise_mean_out: OutputPathType
    """Noise means output"""
    noise_std_out: OutputPathType
    """Noise standard deviations output"""
    free_energy_out: OutputPathType
    """Free energy output"""


def fabber_cest_params(
    output: str,
    method: str,
    model: str,
    data: InputPathType,
    help_: bool = False,
    listmethods: bool = False,
    listmodels: bool = False,
    listparams: bool = False,
    descparams: bool = False,
    listoutputs: bool = False,
    evaluate: str | None = None,
    evaluate_params: str | None = None,
    evaluate_nt: int | None = None,
    simple_output: bool = False,
    overwrite: bool = False,
    link_to_latest: bool = False,
    loadmodels: InputPathType | None = None,
    data_multi: InputPathType | None = None,
    data_order: str | None = "interleave",
    mask: InputPathType | None = None,
    masked_timepoints: int | None = None,
    suppdata: InputPathType | None = None,
    dump_param_names: bool = False,
    save_model_fit: bool = False,
    save_residuals: bool = False,
    save_model_extras: bool = False,
    save_mvn: bool = False,
    save_mean: bool = False,
    save_std: bool = False,
    save_var: bool = False,
    save_zstat: bool = False,
    save_noise_mean: bool = False,
    save_noise_std: bool = False,
    save_free_energy: bool = False,
    optfile: InputPathType | None = None,
    debug: bool = False,
) -> FabberCestParameters:
    """
    Build parameters.
    
    Args:
        output: Directory for output files.
        method: Inference method.
        model: Forward model.
        data: Input data file.
        help_: Print usage help.
        listmethods: List all known inference methods.
        listmodels: List all known forward models.
        listparams: List model parameters.
        descparams: Describe model parameters.
        listoutputs: List additional model outputs.
        evaluate: Evaluate model and set to name of output required.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation.
        simple_output: Simple output series of lines each giving progress as\
            percentage.
        overwrite: Overwrite existing output.
        link_to_latest: Create a link to the most recent output directory with\
            the prefix _latest.
        loadmodels: Load models dynamically from the specified filename.
        data_multi: Specify multiple data files (data<n>).
        data_order: Handling of multiple data files (concatenate or interleave).
        mask: Mask file. Inference performed where mask value > 0.
        masked_timepoints: List of masked time points to ignore (mt<n>).
        suppdata: Supplemental timeseries data required for some models.
        dump_param_names: Write the file paramnames.txt containing the names of\
            the model parameters.
        save_model_fit: Output the model prediction as a 4d volume.
        save_residuals: Output the residuals (difference between the data and\
            the model prediction).
        save_model_extras: Output additional model-specific timeseries data.
        save_mvn: Output the final MVN distributions.
        save_mean: Output the parameter means.
        save_std: Output the parameter standard deviations.
        save_var: Output the parameter variances.
        save_zstat: Output the parameter Zstats.
        save_noise_mean: Output the noise means.
        save_noise_std: Output the noise standard deviations.
        save_free_energy: Output the free energy, if calculated.
        optfile: File containing additional options, one per line, in the same\
            form as specified on the command line.
        debug: Output large amounts of debug information. ONLY USE WITH VERY\
            SMALL NUMBERS OF VOXELS.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fabber_cest",
        "output": output,
        "method": method,
        "model": model,
        "data": data,
        "help": help_,
        "listmethods": listmethods,
        "listmodels": listmodels,
        "listparams": listparams,
        "descparams": descparams,
        "listoutputs": listoutputs,
        "simple_output": simple_output,
        "overwrite": overwrite,
        "link_to_latest": link_to_latest,
        "dump_param_names": dump_param_names,
        "save_model_fit": save_model_fit,
        "save_residuals": save_residuals,
        "save_model_extras": save_model_extras,
        "save_mvn": save_mvn,
        "save_mean": save_mean,
        "save_std": save_std,
        "save_var": save_var,
        "save_zstat": save_zstat,
        "save_noise_mean": save_noise_mean,
        "save_noise_std": save_noise_std,
        "save_free_energy": save_free_energy,
        "debug": debug,
    }
    if evaluate is not None:
        params["evaluate"] = evaluate
    if evaluate_params is not None:
        params["evaluate_params"] = evaluate_params
    if evaluate_nt is not None:
        params["evaluate_nt"] = evaluate_nt
    if loadmodels is not None:
        params["loadmodels"] = loadmodels
    if data_multi is not None:
        params["data_multi"] = data_multi
    if data_order is not None:
        params["data_order"] = data_order
    if mask is not None:
        params["mask"] = mask
    if masked_timepoints is not None:
        params["masked_timepoints"] = masked_timepoints
    if suppdata is not None:
        params["suppdata"] = suppdata
    if optfile is not None:
        params["optfile"] = optfile
    return params


def fabber_cest_cargs(
    params: FabberCestParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fabber_cest")
    cargs.extend([
        "--output",
        params.get("output")
    ])
    cargs.extend([
        "--method",
        params.get("method")
    ])
    cargs.extend([
        "--model",
        params.get("model")
    ])
    cargs.extend([
        "--data",
        execution.input_file(params.get("data"))
    ])
    if params.get("help"):
        cargs.append("--help")
    if params.get("listmethods"):
        cargs.append("--listmethods")
    if params.get("listmodels"):
        cargs.append("--listmodels")
    if params.get("listparams"):
        cargs.append("--listparams")
    if params.get("descparams"):
        cargs.append("--descparams")
    if params.get("listoutputs"):
        cargs.append("--listoutputs")
    if params.get("evaluate") is not None:
        cargs.extend([
            "--evaluate",
            params.get("evaluate")
        ])
    if params.get("evaluate_params") is not None:
        cargs.extend([
            "--evaluate-params",
            params.get("evaluate_params")
        ])
    if params.get("evaluate_nt") is not None:
        cargs.extend([
            "--evaluate-nt",
            str(params.get("evaluate_nt"))
        ])
    if params.get("simple_output"):
        cargs.append("--simple-output")
    if params.get("overwrite"):
        cargs.append("--overwrite")
    if params.get("link_to_latest"):
        cargs.append("--link-to-latest")
    if params.get("loadmodels") is not None:
        cargs.extend([
            "--loadmodels",
            execution.input_file(params.get("loadmodels"))
        ])
    if params.get("data_multi") is not None:
        cargs.extend([
            "--data",
            execution.input_file(params.get("data_multi"))
        ])
    if params.get("data_order") is not None:
        cargs.extend([
            "--data-order",
            params.get("data_order")
        ])
    if params.get("mask") is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask"))
        ])
    if params.get("masked_timepoints") is not None:
        cargs.extend([
            "--mt",
            str(params.get("masked_timepoints"))
        ])
    if params.get("suppdata") is not None:
        cargs.extend([
            "--suppdata",
            execution.input_file(params.get("suppdata"))
        ])
    if params.get("dump_param_names"):
        cargs.append("--dump-param-names")
    if params.get("save_model_fit"):
        cargs.append("--save-model-fit")
    if params.get("save_residuals"):
        cargs.append("--save-residuals")
    if params.get("save_model_extras"):
        cargs.append("--save-model-extras")
    if params.get("save_mvn"):
        cargs.append("--save-mvn")
    if params.get("save_mean"):
        cargs.append("--save-mean")
    if params.get("save_std"):
        cargs.append("--save-std")
    if params.get("save_var"):
        cargs.append("--save-var")
    if params.get("save_zstat"):
        cargs.append("--save-zstat")
    if params.get("save_noise_mean"):
        cargs.append("--save-noise-mean")
    if params.get("save_noise_std"):
        cargs.append("--save-noise-std")
    if params.get("save_free_energy"):
        cargs.append("--save-free-energy")
    if params.get("optfile") is not None:
        cargs.extend([
            "--optfile",
            execution.input_file(params.get("optfile"))
        ])
    if params.get("debug"):
        cargs.append("--debug")
    return cargs


def fabber_cest_outputs(
    params: FabberCestParameters,
    execution: Execution,
) -> FabberCestOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FabberCestOutputs(
        root=execution.output_file("."),
        logfile=execution.output_file(params.get("output") + "/logfile.log"),
        modelfit_out=execution.output_file(params.get("output") + "/model_fit.nii.gz"),
        residuals_out=execution.output_file(params.get("output") + "/residuals.nii.gz"),
        modelextras_out=execution.output_file(params.get("output") + "/model_extras.nii.gz"),
        mvn_out=execution.output_file(params.get("output") + "/mvn.nii.gz"),
        mean_out=execution.output_file(params.get("output") + "/mean.nii.gz"),
        std_out=execution.output_file(params.get("output") + "/std.nii.gz"),
        var_out=execution.output_file(params.get("output") + "/var.nii.gz"),
        zstat_out=execution.output_file(params.get("output") + "/zstat.nii.gz"),
        noise_mean_out=execution.output_file(params.get("output") + "/noise_mean.nii.gz"),
        noise_std_out=execution.output_file(params.get("output") + "/noise_std.nii.gz"),
        free_energy_out=execution.output_file(params.get("output") + "/free_energy.nii.gz"),
    )
    return ret


def fabber_cest_execute(
    params: FabberCestParameters,
    execution: Execution,
) -> FabberCestOutputs:
    """
    Fabber Model-based Analysis.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FabberCestOutputs`).
    """
    params = execution.params(params)
    cargs = fabber_cest_cargs(params, execution)
    ret = fabber_cest_outputs(params, execution)
    execution.run(cargs)
    return ret


def fabber_cest(
    output: str,
    method: str,
    model: str,
    data: InputPathType,
    help_: bool = False,
    listmethods: bool = False,
    listmodels: bool = False,
    listparams: bool = False,
    descparams: bool = False,
    listoutputs: bool = False,
    evaluate: str | None = None,
    evaluate_params: str | None = None,
    evaluate_nt: int | None = None,
    simple_output: bool = False,
    overwrite: bool = False,
    link_to_latest: bool = False,
    loadmodels: InputPathType | None = None,
    data_multi: InputPathType | None = None,
    data_order: str | None = "interleave",
    mask: InputPathType | None = None,
    masked_timepoints: int | None = None,
    suppdata: InputPathType | None = None,
    dump_param_names: bool = False,
    save_model_fit: bool = False,
    save_residuals: bool = False,
    save_model_extras: bool = False,
    save_mvn: bool = False,
    save_mean: bool = False,
    save_std: bool = False,
    save_var: bool = False,
    save_zstat: bool = False,
    save_noise_mean: bool = False,
    save_noise_std: bool = False,
    save_free_energy: bool = False,
    optfile: InputPathType | None = None,
    debug: bool = False,
    runner: Runner | None = None,
) -> FabberCestOutputs:
    """
    Fabber Model-based Analysis.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output: Directory for output files.
        method: Inference method.
        model: Forward model.
        data: Input data file.
        help_: Print usage help.
        listmethods: List all known inference methods.
        listmodels: List all known forward models.
        listparams: List model parameters.
        descparams: Describe model parameters.
        listoutputs: List additional model outputs.
        evaluate: Evaluate model and set to name of output required.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation.
        simple_output: Simple output series of lines each giving progress as\
            percentage.
        overwrite: Overwrite existing output.
        link_to_latest: Create a link to the most recent output directory with\
            the prefix _latest.
        loadmodels: Load models dynamically from the specified filename.
        data_multi: Specify multiple data files (data<n>).
        data_order: Handling of multiple data files (concatenate or interleave).
        mask: Mask file. Inference performed where mask value > 0.
        masked_timepoints: List of masked time points to ignore (mt<n>).
        suppdata: Supplemental timeseries data required for some models.
        dump_param_names: Write the file paramnames.txt containing the names of\
            the model parameters.
        save_model_fit: Output the model prediction as a 4d volume.
        save_residuals: Output the residuals (difference between the data and\
            the model prediction).
        save_model_extras: Output additional model-specific timeseries data.
        save_mvn: Output the final MVN distributions.
        save_mean: Output the parameter means.
        save_std: Output the parameter standard deviations.
        save_var: Output the parameter variances.
        save_zstat: Output the parameter Zstats.
        save_noise_mean: Output the noise means.
        save_noise_std: Output the noise standard deviations.
        save_free_energy: Output the free energy, if calculated.
        optfile: File containing additional options, one per line, in the same\
            form as specified on the command line.
        debug: Output large amounts of debug information. ONLY USE WITH VERY\
            SMALL NUMBERS OF VOXELS.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FabberCestOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FABBER_CEST_METADATA)
    params = fabber_cest_params(
        output=output,
        method=method,
        model=model,
        data=data,
        help_=help_,
        listmethods=listmethods,
        listmodels=listmodels,
        listparams=listparams,
        descparams=descparams,
        listoutputs=listoutputs,
        evaluate=evaluate,
        evaluate_params=evaluate_params,
        evaluate_nt=evaluate_nt,
        simple_output=simple_output,
        overwrite=overwrite,
        link_to_latest=link_to_latest,
        loadmodels=loadmodels,
        data_multi=data_multi,
        data_order=data_order,
        mask=mask,
        masked_timepoints=masked_timepoints,
        suppdata=suppdata,
        dump_param_names=dump_param_names,
        save_model_fit=save_model_fit,
        save_residuals=save_residuals,
        save_model_extras=save_model_extras,
        save_mvn=save_mvn,
        save_mean=save_mean,
        save_std=save_std,
        save_var=save_var,
        save_zstat=save_zstat,
        save_noise_mean=save_noise_mean,
        save_noise_std=save_noise_std,
        save_free_energy=save_free_energy,
        optfile=optfile,
        debug=debug,
    )
    return fabber_cest_execute(params, execution)


__all__ = [
    "FABBER_CEST_METADATA",
    "FabberCestOutputs",
    "FabberCestParameters",
    "fabber_cest",
    "fabber_cest_params",
]
