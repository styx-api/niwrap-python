# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CREATE_LUT_METADATA = Metadata(
    id="927e39579e62b2b6321d61476b9d896179d49b27.boutiques",
    name="create_lut",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


CreateLutParameters = typing.TypedDict('CreateLutParameters', {
    "__STYX_TYPE__": typing.Literal["create_lut"],
    "output_file_root": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "create_lut": create_lut_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "create_lut": create_lut_outputs,
    }.get(t)


class CreateLutOutputs(typing.NamedTuple):
    """
    Output object returned when calling `create_lut(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_files: OutputPathType
    """Generated lookup table files"""


def create_lut_params(
    output_file_root: str,
) -> CreateLutParameters:
    """
    Build parameters.
    
    Args:
        output_file_root: The root name of the output file to be generated.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "create_lut",
        "output_file_root": output_file_root,
    }
    return params


def create_lut_cargs(
    params: CreateLutParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("create_lut")
    cargs.append(params.get("output_file_root"))
    return cargs


def create_lut_outputs(
    params: CreateLutParameters,
    execution: Execution,
) -> CreateLutOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CreateLutOutputs(
        root=execution.output_file("."),
        output_files=execution.output_file(params.get("output_file_root") + ".*"),
    )
    return ret


def create_lut_execute(
    params: CreateLutParameters,
    execution: Execution,
) -> CreateLutOutputs:
    """
    A tool to create lookup tables.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `CreateLutOutputs`).
    """
    params = execution.params(params)
    cargs = create_lut_cargs(params, execution)
    ret = create_lut_outputs(params, execution)
    execution.run(cargs)
    return ret


def create_lut(
    output_file_root: str,
    runner: Runner | None = None,
) -> CreateLutOutputs:
    """
    A tool to create lookup tables.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_file_root: The root name of the output file to be generated.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CreateLutOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CREATE_LUT_METADATA)
    params = create_lut_params(
        output_file_root=output_file_root,
    )
    return create_lut_execute(params, execution)


__all__ = [
    "CREATE_LUT_METADATA",
    "CreateLutOutputs",
    "CreateLutParameters",
    "create_lut",
    "create_lut_params",
]
