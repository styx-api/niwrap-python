# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FABBER_DUALECHO_METADATA = Metadata(
    id="3b814c58103c730b38e41b1c598b309b06d4ea6b.boutiques",
    name="fabber_dualecho",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FabberDualechoParameters = typing.TypedDict('FabberDualechoParameters', {
    "__STYX_TYPE__": typing.Literal["fabber_dualecho"],
    "output_directory": str,
    "method": str,
    "model": str,
    "data": InputPathType,
    "data_order": typing.NotRequired[str | None],
    "mask_file": typing.NotRequired[InputPathType | None],
    "mt_list": typing.NotRequired[float | None],
    "supp_data": typing.NotRequired[InputPathType | None],
    "options_file": typing.NotRequired[InputPathType | None],
    "help_flag": bool,
    "list_methods_flag": bool,
    "list_models_flag": bool,
    "list_params_flag": bool,
    "desc_params_flag": bool,
    "list_outputs_flag": bool,
    "evaluate": typing.NotRequired[str | None],
    "evaluate_params": typing.NotRequired[str | None],
    "evaluate_nt": typing.NotRequired[float | None],
    "simple_output_flag": bool,
    "overwrite_flag": bool,
    "link_to_latest_flag": bool,
    "load_models": typing.NotRequired[InputPathType | None],
    "dump_param_names_flag": bool,
    "save_model_fit_flag": bool,
    "save_residuals_flag": bool,
    "save_model_extras_flag": bool,
    "save_mvn_flag": bool,
    "save_mean_flag": bool,
    "save_std_flag": bool,
    "save_var_flag": bool,
    "save_zstat_flag": bool,
    "save_noise_mean_flag": bool,
    "save_noise_std_flag": bool,
    "save_free_energy_flag": bool,
    "debug_flag": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fabber_dualecho": fabber_dualecho_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "fabber_dualecho": fabber_dualecho_outputs,
    }.get(t)


class FabberDualechoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fabber_dualecho(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_files: OutputPathType
    """All output files will be stored in the output directory specified by the
    user."""


def fabber_dualecho_params(
    output_directory: str,
    method: str,
    model: str,
    data: InputPathType,
    data_order: str | None = "interleave",
    mask_file: InputPathType | None = None,
    mt_list: float | None = None,
    supp_data: InputPathType | None = None,
    options_file: InputPathType | None = None,
    help_flag: bool = False,
    list_methods_flag: bool = False,
    list_models_flag: bool = False,
    list_params_flag: bool = False,
    desc_params_flag: bool = False,
    list_outputs_flag: bool = False,
    evaluate: str | None = None,
    evaluate_params: str | None = None,
    evaluate_nt: float | None = None,
    simple_output_flag: bool = False,
    overwrite_flag: bool = False,
    link_to_latest_flag: bool = False,
    load_models: InputPathType | None = None,
    dump_param_names_flag: bool = False,
    save_model_fit_flag: bool = False,
    save_residuals_flag: bool = False,
    save_model_extras_flag: bool = False,
    save_mvn_flag: bool = False,
    save_mean_flag: bool = False,
    save_std_flag: bool = False,
    save_var_flag: bool = False,
    save_zstat_flag: bool = False,
    save_noise_mean_flag: bool = False,
    save_noise_std_flag: bool = False,
    save_free_energy_flag: bool = False,
    debug_flag: bool = False,
) -> FabberDualechoParameters:
    """
    Build parameters.
    
    Args:
        output_directory: Directory for output files (including logfile).
        method: Use this inference method.
        model: Use this forward model.
        data: Specify a single input data file.
        data_order: If multiple data files are specified, how they will be\
            handled: concatenate = one after the other, interleave = first record\
            from each file, then second, etc.
        mask_file: Mask file. Inference will only be performed where mask value\
            > 0.
        mt_list: List of masked time points, indexed from 1. These will be\
            ignored in the parameter updates.
        supp_data: 'Supplemental' timeseries data, required for some models.
        options_file: File containing additional options, one per line, in the\
            same form as specified on the command line.
        help_flag: Print this usage method. If given with --method or --model,\
            display relevant method/model usage information.
        list_methods_flag: List all known inference methods.
        list_models_flag: List all known forward models.
        list_params_flag: List model parameters (requires model configuration\
            options to be given).
        desc_params_flag: Descript model parameters (name, description, units)\
            - requires model configuration options to be given. Note that not all\
            models provide parameter descriptions.
        list_outputs_flag: List additional model outputs (requires model\
            configuration options to be given).
        evaluate: Evaluate model. Set to name of output required or blank for\
            default output. Requires model configuration options, --evaluate-params\
            and --evaluate-nt.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation - must be consistent\
            with model options where appropriate.
        simple_output_flag: Instead of usual standard output, simply output\
            series of lines each giving progress as percentage.
        overwrite_flag: If set will overwrite existing output. If not set, new\
            output directories will be created by appending '+' to the directory\
            name.
        link_to_latest_flag: Try to create a link to the most recent output\
            directory with the prefix _latest.
        load_models: Load models dynamically from the specified filename, which\
            should be a DLL/shared library.
        dump_param_names_flag: Write the file paramnames.txt containing the\
            names of the model parameters.
        save_model_fit_flag: Output the model prediction as a 4d volume.
        save_residuals_flag: Output the residuals (difference between the data\
            and the model prediction).
        save_model_extras_flag: Output any additional model-specific timeseries\
            data.
        save_mvn_flag: Output the final MVN distributions.
        save_mean_flag: Output the parameter means.
        save_std_flag: Output the parameter standard deviations.
        save_var_flag: Output the parameter variances.
        save_zstat_flag: Output the parameter Zstats.
        save_noise_mean_flag: Output the noise means. The noise distribution\
            inferred is the precision of a Gaussian noise source.
        save_noise_std_flag: Output the noise standard deviations.
        save_free_energy_flag: Output the free energy, if calculated.
        debug_flag: Output large amounts of debug information. ONLY USE WITH\
            VERY SMALL NUMBERS OF VOXELS.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fabber_dualecho",
        "output_directory": output_directory,
        "method": method,
        "model": model,
        "data": data,
        "help_flag": help_flag,
        "list_methods_flag": list_methods_flag,
        "list_models_flag": list_models_flag,
        "list_params_flag": list_params_flag,
        "desc_params_flag": desc_params_flag,
        "list_outputs_flag": list_outputs_flag,
        "simple_output_flag": simple_output_flag,
        "overwrite_flag": overwrite_flag,
        "link_to_latest_flag": link_to_latest_flag,
        "dump_param_names_flag": dump_param_names_flag,
        "save_model_fit_flag": save_model_fit_flag,
        "save_residuals_flag": save_residuals_flag,
        "save_model_extras_flag": save_model_extras_flag,
        "save_mvn_flag": save_mvn_flag,
        "save_mean_flag": save_mean_flag,
        "save_std_flag": save_std_flag,
        "save_var_flag": save_var_flag,
        "save_zstat_flag": save_zstat_flag,
        "save_noise_mean_flag": save_noise_mean_flag,
        "save_noise_std_flag": save_noise_std_flag,
        "save_free_energy_flag": save_free_energy_flag,
        "debug_flag": debug_flag,
    }
    if data_order is not None:
        params["data_order"] = data_order
    if mask_file is not None:
        params["mask_file"] = mask_file
    if mt_list is not None:
        params["mt_list"] = mt_list
    if supp_data is not None:
        params["supp_data"] = supp_data
    if options_file is not None:
        params["options_file"] = options_file
    if evaluate is not None:
        params["evaluate"] = evaluate
    if evaluate_params is not None:
        params["evaluate_params"] = evaluate_params
    if evaluate_nt is not None:
        params["evaluate_nt"] = evaluate_nt
    if load_models is not None:
        params["load_models"] = load_models
    return params


def fabber_dualecho_cargs(
    params: FabberDualechoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fabber_dualecho")
    cargs.append(params.get("output_directory"))
    cargs.extend([
        "--method",
        params.get("method")
    ])
    cargs.extend([
        "--model",
        params.get("model")
    ])
    cargs.extend([
        "--data",
        execution.input_file(params.get("data"))
    ])
    if params.get("data_order") is not None:
        cargs.extend([
            "--data-order",
            params.get("data_order")
        ])
    if params.get("mask_file") is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask_file"))
        ])
    if params.get("mt_list") is not None:
        cargs.extend([
            "--mt<n>",
            str(params.get("mt_list"))
        ])
    if params.get("supp_data") is not None:
        cargs.extend([
            "--suppdata",
            execution.input_file(params.get("supp_data"))
        ])
    if params.get("options_file") is not None:
        cargs.extend([
            "--optfile",
            execution.input_file(params.get("options_file"))
        ])
    if params.get("help_flag"):
        cargs.append("--help")
    if params.get("list_methods_flag"):
        cargs.append("--listmethods")
    if params.get("list_models_flag"):
        cargs.append("--listmodels")
    if params.get("list_params_flag"):
        cargs.append("--listparams")
    if params.get("desc_params_flag"):
        cargs.append("--descparams")
    if params.get("list_outputs_flag"):
        cargs.append("--listoutputs")
    if params.get("evaluate") is not None:
        cargs.extend([
            "--evaluate",
            params.get("evaluate")
        ])
    if params.get("evaluate_params") is not None:
        cargs.extend([
            "--evaluate-params",
            params.get("evaluate_params")
        ])
    if params.get("evaluate_nt") is not None:
        cargs.extend([
            "--evaluate-nt",
            str(params.get("evaluate_nt"))
        ])
    if params.get("simple_output_flag"):
        cargs.append("--simple-output")
    if params.get("overwrite_flag"):
        cargs.append("--overwrite")
    if params.get("link_to_latest_flag"):
        cargs.append("--link-to-latest")
    if params.get("load_models") is not None:
        cargs.extend([
            "--loadmodels",
            execution.input_file(params.get("load_models"))
        ])
    if params.get("dump_param_names_flag"):
        cargs.append("--dump-param-names")
    if params.get("save_model_fit_flag"):
        cargs.append("--save-model-fit")
    if params.get("save_residuals_flag"):
        cargs.append("--save-residuals")
    if params.get("save_model_extras_flag"):
        cargs.append("--save-model-extras")
    if params.get("save_mvn_flag"):
        cargs.append("--save-mvn")
    if params.get("save_mean_flag"):
        cargs.append("--save-mean")
    if params.get("save_std_flag"):
        cargs.append("--save-std")
    if params.get("save_var_flag"):
        cargs.append("--save-var")
    if params.get("save_zstat_flag"):
        cargs.append("--save-zstat")
    if params.get("save_noise_mean_flag"):
        cargs.append("--save-noise-mean")
    if params.get("save_noise_std_flag"):
        cargs.append("--save-noise-std")
    if params.get("save_free_energy_flag"):
        cargs.append("--save-free-energy")
    if params.get("debug_flag"):
        cargs.append("--debug")
    return cargs


def fabber_dualecho_outputs(
    params: FabberDualechoParameters,
    execution: Execution,
) -> FabberDualechoOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FabberDualechoOutputs(
        root=execution.output_file("."),
        output_files=execution.output_file(params.get("output_directory") + "/*"),
    )
    return ret


def fabber_dualecho_execute(
    params: FabberDualechoParameters,
    execution: Execution,
) -> FabberDualechoOutputs:
    """
    FMRIB's Advanced Bayesian Estimation and Inference tool for FMRI analysis.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FabberDualechoOutputs`).
    """
    params = execution.params(params)
    cargs = fabber_dualecho_cargs(params, execution)
    ret = fabber_dualecho_outputs(params, execution)
    execution.run(cargs)
    return ret


def fabber_dualecho(
    output_directory: str,
    method: str,
    model: str,
    data: InputPathType,
    data_order: str | None = "interleave",
    mask_file: InputPathType | None = None,
    mt_list: float | None = None,
    supp_data: InputPathType | None = None,
    options_file: InputPathType | None = None,
    help_flag: bool = False,
    list_methods_flag: bool = False,
    list_models_flag: bool = False,
    list_params_flag: bool = False,
    desc_params_flag: bool = False,
    list_outputs_flag: bool = False,
    evaluate: str | None = None,
    evaluate_params: str | None = None,
    evaluate_nt: float | None = None,
    simple_output_flag: bool = False,
    overwrite_flag: bool = False,
    link_to_latest_flag: bool = False,
    load_models: InputPathType | None = None,
    dump_param_names_flag: bool = False,
    save_model_fit_flag: bool = False,
    save_residuals_flag: bool = False,
    save_model_extras_flag: bool = False,
    save_mvn_flag: bool = False,
    save_mean_flag: bool = False,
    save_std_flag: bool = False,
    save_var_flag: bool = False,
    save_zstat_flag: bool = False,
    save_noise_mean_flag: bool = False,
    save_noise_std_flag: bool = False,
    save_free_energy_flag: bool = False,
    debug_flag: bool = False,
    runner: Runner | None = None,
) -> FabberDualechoOutputs:
    """
    FMRIB's Advanced Bayesian Estimation and Inference tool for FMRI analysis.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_directory: Directory for output files (including logfile).
        method: Use this inference method.
        model: Use this forward model.
        data: Specify a single input data file.
        data_order: If multiple data files are specified, how they will be\
            handled: concatenate = one after the other, interleave = first record\
            from each file, then second, etc.
        mask_file: Mask file. Inference will only be performed where mask value\
            > 0.
        mt_list: List of masked time points, indexed from 1. These will be\
            ignored in the parameter updates.
        supp_data: 'Supplemental' timeseries data, required for some models.
        options_file: File containing additional options, one per line, in the\
            same form as specified on the command line.
        help_flag: Print this usage method. If given with --method or --model,\
            display relevant method/model usage information.
        list_methods_flag: List all known inference methods.
        list_models_flag: List all known forward models.
        list_params_flag: List model parameters (requires model configuration\
            options to be given).
        desc_params_flag: Descript model parameters (name, description, units)\
            - requires model configuration options to be given. Note that not all\
            models provide parameter descriptions.
        list_outputs_flag: List additional model outputs (requires model\
            configuration options to be given).
        evaluate: Evaluate model. Set to name of output required or blank for\
            default output. Requires model configuration options, --evaluate-params\
            and --evaluate-nt.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation - must be consistent\
            with model options where appropriate.
        simple_output_flag: Instead of usual standard output, simply output\
            series of lines each giving progress as percentage.
        overwrite_flag: If set will overwrite existing output. If not set, new\
            output directories will be created by appending '+' to the directory\
            name.
        link_to_latest_flag: Try to create a link to the most recent output\
            directory with the prefix _latest.
        load_models: Load models dynamically from the specified filename, which\
            should be a DLL/shared library.
        dump_param_names_flag: Write the file paramnames.txt containing the\
            names of the model parameters.
        save_model_fit_flag: Output the model prediction as a 4d volume.
        save_residuals_flag: Output the residuals (difference between the data\
            and the model prediction).
        save_model_extras_flag: Output any additional model-specific timeseries\
            data.
        save_mvn_flag: Output the final MVN distributions.
        save_mean_flag: Output the parameter means.
        save_std_flag: Output the parameter standard deviations.
        save_var_flag: Output the parameter variances.
        save_zstat_flag: Output the parameter Zstats.
        save_noise_mean_flag: Output the noise means. The noise distribution\
            inferred is the precision of a Gaussian noise source.
        save_noise_std_flag: Output the noise standard deviations.
        save_free_energy_flag: Output the free energy, if calculated.
        debug_flag: Output large amounts of debug information. ONLY USE WITH\
            VERY SMALL NUMBERS OF VOXELS.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FabberDualechoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FABBER_DUALECHO_METADATA)
    params = fabber_dualecho_params(
        output_directory=output_directory,
        method=method,
        model=model,
        data=data,
        data_order=data_order,
        mask_file=mask_file,
        mt_list=mt_list,
        supp_data=supp_data,
        options_file=options_file,
        help_flag=help_flag,
        list_methods_flag=list_methods_flag,
        list_models_flag=list_models_flag,
        list_params_flag=list_params_flag,
        desc_params_flag=desc_params_flag,
        list_outputs_flag=list_outputs_flag,
        evaluate=evaluate,
        evaluate_params=evaluate_params,
        evaluate_nt=evaluate_nt,
        simple_output_flag=simple_output_flag,
        overwrite_flag=overwrite_flag,
        link_to_latest_flag=link_to_latest_flag,
        load_models=load_models,
        dump_param_names_flag=dump_param_names_flag,
        save_model_fit_flag=save_model_fit_flag,
        save_residuals_flag=save_residuals_flag,
        save_model_extras_flag=save_model_extras_flag,
        save_mvn_flag=save_mvn_flag,
        save_mean_flag=save_mean_flag,
        save_std_flag=save_std_flag,
        save_var_flag=save_var_flag,
        save_zstat_flag=save_zstat_flag,
        save_noise_mean_flag=save_noise_mean_flag,
        save_noise_std_flag=save_noise_std_flag,
        save_free_energy_flag=save_free_energy_flag,
        debug_flag=debug_flag,
    )
    return fabber_dualecho_execute(params, execution)


__all__ = [
    "FABBER_DUALECHO_METADATA",
    "FabberDualechoOutputs",
    "FabberDualechoParameters",
    "fabber_dualecho",
    "fabber_dualecho_params",
]
