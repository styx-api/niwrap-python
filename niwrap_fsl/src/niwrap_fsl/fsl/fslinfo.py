# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLINFO_METADATA = Metadata(
    id="58cca8fed848f7c3b19f49f10179561bb2d86040.boutiques",
    name="fslinfo",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslinfoParameters = typing.TypedDict('FslinfoParameters', {
    "__STYX_TYPE__": typing.Literal["fslinfo"],
    "filename": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fslinfo": fslinfo_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class FslinfoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslinfo(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fslinfo_params(
    filename: InputPathType,
) -> FslinfoParameters:
    """
    Build parameters.
    
    Args:
        filename: Input NIFTI-1 image file (e.g. img.nii.gz).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fslinfo",
        "filename": filename,
    }
    return params


def fslinfo_cargs(
    params: FslinfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslinfo")
    cargs.append(execution.input_file(params.get("filename")))
    return cargs


def fslinfo_outputs(
    params: FslinfoParameters,
    execution: Execution,
) -> FslinfoOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslinfoOutputs(
        root=execution.output_file("."),
    )
    return ret


def fslinfo_execute(
    params: FslinfoParameters,
    execution: Execution,
) -> FslinfoOutputs:
    """
    Display information about NIFTI-1 image file.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FslinfoOutputs`).
    """
    params = execution.params(params)
    cargs = fslinfo_cargs(params, execution)
    ret = fslinfo_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslinfo(
    filename: InputPathType,
    runner: Runner | None = None,
) -> FslinfoOutputs:
    """
    Display information about NIFTI-1 image file.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        filename: Input NIFTI-1 image file (e.g. img.nii.gz).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslinfoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLINFO_METADATA)
    params = fslinfo_params(
        filename=filename,
    )
    return fslinfo_execute(params, execution)


__all__ = [
    "FSLINFO_METADATA",
    "FslinfoOutputs",
    "FslinfoParameters",
    "fslinfo",
    "fslinfo_params",
]
