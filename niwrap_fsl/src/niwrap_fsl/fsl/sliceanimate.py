# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SLICEANIMATE_METADATA = Metadata(
    id="3bb238a4c3747753c762aa5c93289948cbb7662a.boutiques",
    name="sliceanimate",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SliceanimateParameters = typing.TypedDict('SliceanimateParameters', {
    "@type": typing.Literal["fsl.sliceanimate"],
    "output_file": str,
    "input_files": list[InputPathType],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fsl.sliceanimate": sliceanimate_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "fsl.sliceanimate": sliceanimate_outputs,
    }.get(t)


class SliceanimateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `sliceanimate(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    animated_gif: OutputPathType
    """Generated animated GIF"""


def sliceanimate_params(
    output_file: str,
    input_files: list[InputPathType],
) -> SliceanimateParameters:
    """
    Build parameters.
    
    Args:
        output_file: Output animated GIF file.
        input_files: Input image files for animation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl.sliceanimate",
        "output_file": output_file,
        "input_files": input_files,
    }
    return params


def sliceanimate_cargs(
    params: SliceanimateParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("sliceanimate")
    cargs.append(params.get("output_file"))
    cargs.extend([execution.input_file(f) for f in params.get("input_files")])
    return cargs


def sliceanimate_outputs(
    params: SliceanimateParameters,
    execution: Execution,
) -> SliceanimateOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SliceanimateOutputs(
        root=execution.output_file("."),
        animated_gif=execution.output_file(params.get("output_file")),
    )
    return ret


def sliceanimate_execute(
    params: SliceanimateParameters,
    runner: Runner | None = None,
) -> SliceanimateOutputs:
    """
    A tool for animating slices of an image using whirlgif.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SliceanimateOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SLICEANIMATE_METADATA)
    params = execution.params(params)
    cargs = sliceanimate_cargs(params, execution)
    ret = sliceanimate_outputs(params, execution)
    execution.run(cargs)
    return ret


def sliceanimate(
    output_file: str,
    input_files: list[InputPathType],
    runner: Runner | None = None,
) -> SliceanimateOutputs:
    """
    A tool for animating slices of an image using whirlgif.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_file: Output animated GIF file.
        input_files: Input image files for animation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SliceanimateOutputs`).
    """
    params = sliceanimate_params(
        output_file=output_file,
        input_files=input_files,
    )
    return sliceanimate_execute(params, runner)


__all__ = [
    "SLICEANIMATE_METADATA",
    "SliceanimateOutputs",
    "SliceanimateParameters",
    "sliceanimate",
    "sliceanimate_execute",
    "sliceanimate_params",
]
