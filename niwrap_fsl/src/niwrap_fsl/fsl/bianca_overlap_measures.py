# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

BIANCA_OVERLAP_MEASURES_METADATA = Metadata(
    id="07dfbadc968fda1c7126374c9a9779984e529d99.boutiques",
    name="bianca_overlap_measures",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


BiancaOverlapMeasuresParameters = typing.TypedDict('BiancaOverlapMeasuresParameters', {
    "__STYX_TYPE__": typing.Literal["bianca_overlap_measures"],
    "lesion_mask": InputPathType,
    "manual_mask": InputPathType,
    "output_dir": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "bianca_overlap_measures": bianca_overlap_measures_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "bianca_overlap_measures": bianca_overlap_measures_outputs,
    }.get(t)


class BiancaOverlapMeasuresOutputs(typing.NamedTuple):
    """
    Output object returned when calling `bianca_overlap_measures(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    tp_auto: OutputPathType
    """True positive voxels in automatic mask"""
    tp_manual: OutputPathType
    """True positive voxels in manual mask"""
    fp_vox_tp_overlap: OutputPathType
    """False positive voxels that overlap with true positives"""
    fn_vox_tp_overlap: OutputPathType
    """False negative voxels that overlap with true positives"""
    lesmask_idx: OutputPathType
    """Indexed lesion mask"""
    manualmask_idx: OutputPathType
    """Indexed manual mask"""
    lesmask_idx_tp: OutputPathType
    """True positive indexed lesion mask"""
    manualmask_idx_tp: OutputPathType
    """True positive indexed manual mask"""


def bianca_overlap_measures_params(
    lesion_mask: InputPathType,
    manual_mask: InputPathType,
    output_dir: str,
) -> BiancaOverlapMeasuresParameters:
    """
    Build parameters.
    
    Args:
        lesion_mask: Lesion mask image file.
        manual_mask: Manual mask image file.
        output_dir: Output directory for generated files.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "bianca_overlap_measures",
        "lesion_mask": lesion_mask,
        "manual_mask": manual_mask,
        "output_dir": output_dir,
    }
    return params


def bianca_overlap_measures_cargs(
    params: BiancaOverlapMeasuresParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("bianca_overlap_measures")
    cargs.append(execution.input_file(params.get("lesion_mask")))
    cargs.append(execution.input_file(params.get("manual_mask")))
    cargs.append(params.get("output_dir"))
    return cargs


def bianca_overlap_measures_outputs(
    params: BiancaOverlapMeasuresParameters,
    execution: Execution,
) -> BiancaOverlapMeasuresOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = BiancaOverlapMeasuresOutputs(
        root=execution.output_file("."),
        tp_auto=execution.output_file("{OUTPUT_DIR}/TPauto.nii.gz"),
        tp_manual=execution.output_file("{OUTPUT_DIR}/TPmanual.nii.gz"),
        fp_vox_tp_overlap=execution.output_file("{OUTPUT_DIR}/FPvox_TP_overlap.nii.gz"),
        fn_vox_tp_overlap=execution.output_file("{OUTPUT_DIR}/FNvox_TP_overlap.nii.gz"),
        lesmask_idx=execution.output_file("{OUTPUT_DIR}/lesmask_idx.nii.gz"),
        manualmask_idx=execution.output_file("{OUTPUT_DIR}/manualmask_idx.nii.gz"),
        lesmask_idx_tp=execution.output_file("{OUTPUT_DIR}/lesmask_idx_TP.nii.gz"),
        manualmask_idx_tp=execution.output_file("{OUTPUT_DIR}/manualmask_idx_TP.nii.gz"),
    )
    return ret


def bianca_overlap_measures_execute(
    params: BiancaOverlapMeasuresParameters,
    execution: Execution,
) -> BiancaOverlapMeasuresOutputs:
    """
    BIANCA overlap measures script for FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `BiancaOverlapMeasuresOutputs`).
    """
    params = execution.params(params)
    cargs = bianca_overlap_measures_cargs(params, execution)
    ret = bianca_overlap_measures_outputs(params, execution)
    execution.run(cargs)
    return ret


def bianca_overlap_measures(
    lesion_mask: InputPathType,
    manual_mask: InputPathType,
    output_dir: str,
    runner: Runner | None = None,
) -> BiancaOverlapMeasuresOutputs:
    """
    BIANCA overlap measures script for FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        lesion_mask: Lesion mask image file.
        manual_mask: Manual mask image file.
        output_dir: Output directory for generated files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BiancaOverlapMeasuresOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BIANCA_OVERLAP_MEASURES_METADATA)
    params = bianca_overlap_measures_params(
        lesion_mask=lesion_mask,
        manual_mask=manual_mask,
        output_dir=output_dir,
    )
    return bianca_overlap_measures_execute(params, execution)


__all__ = [
    "BIANCA_OVERLAP_MEASURES_METADATA",
    "BiancaOverlapMeasuresOutputs",
    "BiancaOverlapMeasuresParameters",
    "bianca_overlap_measures",
    "bianca_overlap_measures_params",
]
