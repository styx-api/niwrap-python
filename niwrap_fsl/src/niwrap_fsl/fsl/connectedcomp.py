# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CONNECTEDCOMP_METADATA = Metadata(
    id="7c1253e633254bef28f5556244da1e387dffc055.boutiques",
    name="connectedcomp",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


ConnectedcompParameters = typing.TypedDict('ConnectedcompParameters', {
    "__STYX_TYPE__": typing.Literal["connectedcomp"],
    "in_volume": InputPathType,
    "output_volume": typing.NotRequired[str | None],
    "num_connect": typing.NotRequired[int | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "connectedcomp": connectedcomp_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "connectedcomp": connectedcomp_outputs,
    }.get(t)


class ConnectedcompOutputs(typing.NamedTuple):
    """
    Output object returned when calling `connectedcomp(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType | None
    """The output image volume"""


def connectedcomp_params(
    in_volume: InputPathType,
    output_volume: str | None = None,
    num_connect: int | None = None,
) -> ConnectedcompParameters:
    """
    Build parameters.
    
    Args:
        in_volume: Input image volume.
        output_volume: Output image volume.
        num_connect: Number of connected components.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "connectedcomp",
        "in_volume": in_volume,
    }
    if output_volume is not None:
        params["output_volume"] = output_volume
    if num_connect is not None:
        params["num_connect"] = num_connect
    return params


def connectedcomp_cargs(
    params: ConnectedcompParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("connectedcomp")
    cargs.append(execution.input_file(params.get("in_volume")))
    if params.get("output_volume") is not None:
        cargs.append(params.get("output_volume"))
    if params.get("num_connect") is not None:
        cargs.append(str(params.get("num_connect")))
    return cargs


def connectedcomp_outputs(
    params: ConnectedcompParameters,
    execution: Execution,
) -> ConnectedcompOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ConnectedcompOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("output_volume")) if (params.get("output_volume") is not None) else None,
    )
    return ret


def connectedcomp_execute(
    params: ConnectedcompParameters,
    execution: Execution,
) -> ConnectedcompOutputs:
    """
    Connected component analysis tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `ConnectedcompOutputs`).
    """
    params = execution.params(params)
    cargs = connectedcomp_cargs(params, execution)
    ret = connectedcomp_outputs(params, execution)
    execution.run(cargs)
    return ret


def connectedcomp(
    in_volume: InputPathType,
    output_volume: str | None = None,
    num_connect: int | None = None,
    runner: Runner | None = None,
) -> ConnectedcompOutputs:
    """
    Connected component analysis tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        in_volume: Input image volume.
        output_volume: Output image volume.
        num_connect: Number of connected components.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ConnectedcompOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CONNECTEDCOMP_METADATA)
    params = connectedcomp_params(
        in_volume=in_volume,
        output_volume=output_volume,
        num_connect=num_connect,
    )
    return connectedcomp_execute(params, execution)


__all__ = [
    "CONNECTEDCOMP_METADATA",
    "ConnectedcompOutputs",
    "ConnectedcompParameters",
    "connectedcomp",
    "connectedcomp_params",
]
