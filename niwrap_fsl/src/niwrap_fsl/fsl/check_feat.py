# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CHECK_FEAT_METADATA = Metadata(
    id="dd128d9ea40a4372b6b8d70f2ed5cf41858f23cd.boutiques",
    name="checkFEAT",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


CheckFeatParameters = typing.TypedDict('CheckFeatParameters', {
    "__STYX_TYPE__": typing.Literal["checkFEAT"],
    "report_file": InputPathType,
    "report_log_file": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "checkFEAT": check_feat_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "checkFEAT": check_feat_outputs,
    }.get(t)


class CheckFeatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `check_feat(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_report: OutputPathType
    """Output HTML report"""
    output_report_log: OutputPathType
    """Output HTML report log"""


def check_feat_params(
    report_file: InputPathType,
    report_log_file: InputPathType,
) -> CheckFeatParameters:
    """
    Build parameters.
    
    Args:
        report_file: Path to the HTML report.
        report_log_file: Path to the HTML report log.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "checkFEAT",
        "report_file": report_file,
        "report_log_file": report_log_file,
    }
    return params


def check_feat_cargs(
    params: CheckFeatParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("checkFEAT")
    cargs.append(execution.input_file(params.get("report_file")))
    cargs.append(execution.input_file(params.get("report_log_file")))
    return cargs


def check_feat_outputs(
    params: CheckFeatParameters,
    execution: Execution,
) -> CheckFeatOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CheckFeatOutputs(
        root=execution.output_file("."),
        output_report=execution.output_file("output_report.html"),
        output_report_log=execution.output_file("output_report_log.html"),
    )
    return ret


def check_feat_execute(
    params: CheckFeatParameters,
    execution: Execution,
) -> CheckFeatOutputs:
    """
    Perform checks on FEAT analysis results.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `CheckFeatOutputs`).
    """
    params = execution.params(params)
    cargs = check_feat_cargs(params, execution)
    ret = check_feat_outputs(params, execution)
    execution.run(cargs)
    return ret


def check_feat(
    report_file: InputPathType,
    report_log_file: InputPathType,
    runner: Runner | None = None,
) -> CheckFeatOutputs:
    """
    Perform checks on FEAT analysis results.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        report_file: Path to the HTML report.
        report_log_file: Path to the HTML report log.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CheckFeatOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CHECK_FEAT_METADATA)
    params = check_feat_params(
        report_file=report_file,
        report_log_file=report_log_file,
    )
    return check_feat_execute(params, execution)


__all__ = [
    "CHECK_FEAT_METADATA",
    "CheckFeatOutputs",
    "CheckFeatParameters",
    "check_feat",
    "check_feat_params",
]
