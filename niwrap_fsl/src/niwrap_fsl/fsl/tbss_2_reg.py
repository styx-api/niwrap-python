# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TBSS_2_REG_METADATA = Metadata(
    id="8e75d5ab55c5f140a059acbd323eb9f4d32ea205.boutiques",
    name="tbss_2_reg",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


Tbss2RegParameters = typing.TypedDict('Tbss2RegParameters', {
    "__STYX_TYPE__": typing.Literal["tbss_2_reg"],
    "use_fmrib58_fa_1mm": bool,
    "target_image": typing.NotRequired[InputPathType | None],
    "find_best_target": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "tbss_2_reg": tbss_2_reg_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class Tbss2RegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `tbss_2_reg(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def tbss_2_reg_params(
    use_fmrib58_fa_1mm: bool = False,
    target_image: InputPathType | None = None,
    find_best_target: bool = False,
) -> Tbss2RegParameters:
    """
    Build parameters.
    
    Args:
        use_fmrib58_fa_1mm: Use FMRIB58_FA_1mm as the target for nonlinear\
            registrations (recommended).
        target_image: Use the specified image as the target for nonlinear\
            registrations.
        find_best_target: Find the best target from all images in the FA.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "tbss_2_reg",
        "use_fmrib58_fa_1mm": use_fmrib58_fa_1mm,
        "find_best_target": find_best_target,
    }
    if target_image is not None:
        params["target_image"] = target_image
    return params


def tbss_2_reg_cargs(
    params: Tbss2RegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tbss_2_reg")
    if params.get("use_fmrib58_fa_1mm"):
        cargs.append("-T")
    if params.get("target_image") is not None:
        cargs.extend([
            "-t",
            execution.input_file(params.get("target_image"))
        ])
    if params.get("find_best_target"):
        cargs.append("-n")
    return cargs


def tbss_2_reg_outputs(
    params: Tbss2RegParameters,
    execution: Execution,
) -> Tbss2RegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Tbss2RegOutputs(
        root=execution.output_file("."),
    )
    return ret


def tbss_2_reg_execute(
    params: Tbss2RegParameters,
    execution: Execution,
) -> Tbss2RegOutputs:
    """
    TBSS utility for target selection and registration for Tract-Based Spatial
    Statistics (TBSS) analysis.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `Tbss2RegOutputs`).
    """
    params = execution.params(params)
    cargs = tbss_2_reg_cargs(params, execution)
    ret = tbss_2_reg_outputs(params, execution)
    execution.run(cargs)
    return ret


def tbss_2_reg(
    use_fmrib58_fa_1mm: bool = False,
    target_image: InputPathType | None = None,
    find_best_target: bool = False,
    runner: Runner | None = None,
) -> Tbss2RegOutputs:
    """
    TBSS utility for target selection and registration for Tract-Based Spatial
    Statistics (TBSS) analysis.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        use_fmrib58_fa_1mm: Use FMRIB58_FA_1mm as the target for nonlinear\
            registrations (recommended).
        target_image: Use the specified image as the target for nonlinear\
            registrations.
        find_best_target: Find the best target from all images in the FA.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Tbss2RegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TBSS_2_REG_METADATA)
    params = tbss_2_reg_params(
        use_fmrib58_fa_1mm=use_fmrib58_fa_1mm,
        target_image=target_image,
        find_best_target=find_best_target,
    )
    return tbss_2_reg_execute(params, execution)


__all__ = [
    "TBSS_2_REG_METADATA",
    "Tbss2RegOutputs",
    "Tbss2RegParameters",
    "tbss_2_reg",
    "tbss_2_reg_params",
]
