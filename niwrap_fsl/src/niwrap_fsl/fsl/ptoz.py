# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

PTOZ_METADATA = Metadata(
    id="07a7d478f230453c0f17bbad9b04c275d5cf2843.boutiques",
    name="ptoz",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


PtozParameters = typing.TypedDict('PtozParameters', {
    "__STYX_TYPE__": typing.Literal["ptoz"],
    "p_value": float,
    "tail_flag": bool,
    "grf_flag": typing.NotRequired[float | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "ptoz": ptoz_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class PtozOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ptoz(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def ptoz_params(
    p_value: float,
    tail_flag: bool = False,
    grf_flag: float | None = None,
) -> PtozParameters:
    """
    Build parameters.
    
    Args:
        p_value: p-value to convert.
        tail_flag: Use 2-tailed conversion.
        grf_flag: Use GRF maximum-height theory instead of Gaussian pdf.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "ptoz",
        "p_value": p_value,
        "tail_flag": tail_flag,
    }
    if grf_flag is not None:
        params["grf_flag"] = grf_flag
    return params


def ptoz_cargs(
    params: PtozParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("ptoz")
    cargs.append(str(params.get("p_value")))
    if params.get("tail_flag"):
        cargs.append("-2")
    if params.get("grf_flag") is not None:
        cargs.extend([
            "-g",
            str(params.get("grf_flag"))
        ])
    return cargs


def ptoz_outputs(
    params: PtozParameters,
    execution: Execution,
) -> PtozOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = PtozOutputs(
        root=execution.output_file("."),
    )
    return ret


def ptoz_execute(
    params: PtozParameters,
    execution: Execution,
) -> PtozOutputs:
    """
    Convert p-values to z-values.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `PtozOutputs`).
    """
    params = execution.params(params)
    cargs = ptoz_cargs(params, execution)
    ret = ptoz_outputs(params, execution)
    execution.run(cargs)
    return ret


def ptoz(
    p_value: float,
    tail_flag: bool = False,
    grf_flag: float | None = None,
    runner: Runner | None = None,
) -> PtozOutputs:
    """
    Convert p-values to z-values.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        p_value: p-value to convert.
        tail_flag: Use 2-tailed conversion.
        grf_flag: Use GRF maximum-height theory instead of Gaussian pdf.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PtozOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(PTOZ_METADATA)
    params = ptoz_params(
        p_value=p_value,
        tail_flag=tail_flag,
        grf_flag=grf_flag,
    )
    return ptoz_execute(params, execution)


__all__ = [
    "PTOZ_METADATA",
    "PtozOutputs",
    "PtozParameters",
    "ptoz",
    "ptoz_params",
]
