# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FABBER_DCE_METADATA = Metadata(
    id="8503b8f2dd7017cdd9be4bac37b326badcc8e524.boutiques",
    name="fabber_dce",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FabberDceParameters = typing.TypedDict('FabberDceParameters', {
    "__STYX_TYPE__": typing.Literal["fabber_dce"],
    "output_directory": str,
    "inference_method": str,
    "forward_model": str,
    "input_data": InputPathType,
    "help_flag": bool,
    "list_methods": bool,
    "list_models": bool,
    "list_params": bool,
    "describe_params": bool,
    "list_outputs": bool,
    "evaluate_model": typing.NotRequired[str | None],
    "evaluate_params": typing.NotRequired[list[float] | None],
    "evaluate_nt": typing.NotRequired[float | None],
    "simple_output": bool,
    "overwrite": bool,
    "link_to_latest": bool,
    "load_models": typing.NotRequired[InputPathType | None],
    "multiple_data": typing.NotRequired[list[InputPathType] | None],
    "data_order": typing.NotRequired[str | None],
    "mask": typing.NotRequired[InputPathType | None],
    "masked_time_points": typing.NotRequired[list[float] | None],
    "supplemental_data": typing.NotRequired[InputPathType | None],
    "dump_param_names": bool,
    "save_model_fit": bool,
    "save_residuals": bool,
    "save_model_extras": bool,
    "save_mvn": bool,
    "save_mean": bool,
    "save_std": bool,
    "save_variances": bool,
    "save_zstat": bool,
    "save_noise_mean": bool,
    "save_noise_std": bool,
    "save_free_energy": bool,
    "option_file": typing.NotRequired[InputPathType | None],
    "debug": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fabber_dce": fabber_dce_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "fabber_dce": fabber_dce_outputs,
    }.get(t)


class FabberDceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fabber_dce(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_files: OutputPathType
    """Files generated by Fabber DCE"""


def fabber_dce_params(
    output_directory: str,
    inference_method: str,
    forward_model: str,
    input_data: InputPathType,
    help_flag: bool = False,
    list_methods: bool = False,
    list_models: bool = False,
    list_params: bool = False,
    describe_params: bool = False,
    list_outputs: bool = False,
    evaluate_model: str | None = None,
    evaluate_params: list[float] | None = None,
    evaluate_nt: float | None = None,
    simple_output: bool = False,
    overwrite: bool = False,
    link_to_latest: bool = False,
    load_models: InputPathType | None = None,
    multiple_data: list[InputPathType] | None = None,
    data_order: str | None = "interleave",
    mask: InputPathType | None = None,
    masked_time_points: list[float] | None = None,
    supplemental_data: InputPathType | None = None,
    dump_param_names: bool = False,
    save_model_fit: bool = False,
    save_residuals: bool = False,
    save_model_extras: bool = False,
    save_mvn: bool = False,
    save_mean: bool = False,
    save_std: bool = False,
    save_variances: bool = False,
    save_zstat: bool = False,
    save_noise_mean: bool = False,
    save_noise_std: bool = False,
    save_free_energy: bool = False,
    option_file: InputPathType | None = None,
    debug: bool = False,
) -> FabberDceParameters:
    """
    Build parameters.
    
    Args:
        output_directory: Directory for output files (including logfile).
        inference_method: Inference method to use.
        forward_model: Forward model to use.
        input_data: Single input data file.
        help_flag: Print this usage message.
        list_methods: List all known inference methods.
        list_models: List all known forward models.
        list_params: List model parameters (requires model configuration\
            options to be given).
        describe_params: Describe model parameters (name, description, units) -\
            requires model configuration options to be given.
        list_outputs: List additional model outputs (requires model\
            configuration options to be given).
        evaluate_model: Evaluate model. Set to name of output required or blank\
            for default output. Requires model configuration options,\
            --evaluate-params and --evaluate-nt.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation - must be consistent\
            with model options where appropriate.
        simple_output: Instead of usual output, simply output series of lines\
            each giving progress as percentage.
        overwrite: If set will overwrite existing output. If not set, new\
            output directories will be created by appending '+' to the directory\
            name.
        link_to_latest: Try to create a link to the most recent output\
            directory with the prefix _latest.
        load_models: Load models dynamically from the specified filename, which\
            should be a DLL/shared library.
        multiple_data: Specify multiple data files for n=1, 2, 3...
        data_order: If multiple data files are specified, how they will be\
            handled: concatenate = one after the other, interleave = first record\
            from each file, then second, etc.
        mask: Mask file. Inference will only be performed where mask value > 0.
        masked_time_points: List of masked time points, indexed from 1. These\
            will be ignored in the parameter updates.
        supplemental_data: 'Supplemental' timeseries data, required for some\
            models.
        dump_param_names: Write the file paramnames.txt containing the names of\
            the model parameters.
        save_model_fit: Output the model prediction as a 4D volume.
        save_residuals: Output the residuals (difference between the data and\
            the model prediction).
        save_model_extras: Output any additional model-specific timeseries data.
        save_mvn: Output the final MVN distributions.
        save_mean: Output the parameter means.
        save_std: Output the parameter standard deviations.
        save_variances: Output the parameter variances.
        save_zstat: Output the parameter Z-stats.
        save_noise_mean: Output the noise means. The noise distribution\
            inferred is the precision of a Gaussian noise source.
        save_noise_std: Output the noise standard deviations.
        save_free_energy: Output the free energy, if calculated.
        option_file: File containing additional options, one per line, in the\
            same form as specified on the command line.
        debug: Output large amounts of debug information. ONLY USE WITH VERY\
            SMALL NUMBERS OF VOXELS.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fabber_dce",
        "output_directory": output_directory,
        "inference_method": inference_method,
        "forward_model": forward_model,
        "input_data": input_data,
        "help_flag": help_flag,
        "list_methods": list_methods,
        "list_models": list_models,
        "list_params": list_params,
        "describe_params": describe_params,
        "list_outputs": list_outputs,
        "simple_output": simple_output,
        "overwrite": overwrite,
        "link_to_latest": link_to_latest,
        "dump_param_names": dump_param_names,
        "save_model_fit": save_model_fit,
        "save_residuals": save_residuals,
        "save_model_extras": save_model_extras,
        "save_mvn": save_mvn,
        "save_mean": save_mean,
        "save_std": save_std,
        "save_variances": save_variances,
        "save_zstat": save_zstat,
        "save_noise_mean": save_noise_mean,
        "save_noise_std": save_noise_std,
        "save_free_energy": save_free_energy,
        "debug": debug,
    }
    if evaluate_model is not None:
        params["evaluate_model"] = evaluate_model
    if evaluate_params is not None:
        params["evaluate_params"] = evaluate_params
    if evaluate_nt is not None:
        params["evaluate_nt"] = evaluate_nt
    if load_models is not None:
        params["load_models"] = load_models
    if multiple_data is not None:
        params["multiple_data"] = multiple_data
    if data_order is not None:
        params["data_order"] = data_order
    if mask is not None:
        params["mask"] = mask
    if masked_time_points is not None:
        params["masked_time_points"] = masked_time_points
    if supplemental_data is not None:
        params["supplemental_data"] = supplemental_data
    if option_file is not None:
        params["option_file"] = option_file
    return params


def fabber_dce_cargs(
    params: FabberDceParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fabber_dce")
    cargs.extend([
        "--output",
        params.get("output_directory")
    ])
    cargs.extend([
        "--method",
        params.get("inference_method")
    ])
    cargs.extend([
        "--model",
        params.get("forward_model")
    ])
    cargs.extend([
        "--data",
        execution.input_file(params.get("input_data"))
    ])
    if params.get("help_flag"):
        cargs.append("--help")
    if params.get("list_methods"):
        cargs.append("--listmethods")
    if params.get("list_models"):
        cargs.append("--listmodels")
    if params.get("list_params"):
        cargs.append("--listparams")
    if params.get("describe_params"):
        cargs.append("--descparams")
    if params.get("list_outputs"):
        cargs.append("--listoutputs")
    if params.get("evaluate_model") is not None:
        cargs.extend([
            "--evaluate",
            params.get("evaluate_model")
        ])
    if params.get("evaluate_params") is not None:
        cargs.extend([
            "--evaluate-params",
            *map(str, params.get("evaluate_params"))
        ])
    if params.get("evaluate_nt") is not None:
        cargs.extend([
            "--evaluate-nt",
            str(params.get("evaluate_nt"))
        ])
    if params.get("simple_output"):
        cargs.append("--simple-output")
    if params.get("overwrite"):
        cargs.append("--overwrite")
    if params.get("link_to_latest"):
        cargs.append("--link-to-latest")
    if params.get("load_models") is not None:
        cargs.extend([
            "--loadmodels",
            execution.input_file(params.get("load_models"))
        ])
    if params.get("multiple_data") is not None:
        cargs.extend([
            "--data<n>",
            *[execution.input_file(f) for f in params.get("multiple_data")]
        ])
    if params.get("data_order") is not None:
        cargs.extend([
            "--data-order",
            params.get("data_order")
        ])
    if params.get("mask") is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask"))
        ])
    if params.get("masked_time_points") is not None:
        cargs.extend([
            "--mt<n>",
            *map(str, params.get("masked_time_points"))
        ])
    if params.get("supplemental_data") is not None:
        cargs.extend([
            "--suppdata",
            execution.input_file(params.get("supplemental_data"))
        ])
    if params.get("dump_param_names"):
        cargs.append("--dump-param-names")
    if params.get("save_model_fit"):
        cargs.append("--save-model-fit")
    if params.get("save_residuals"):
        cargs.append("--save-residuals")
    if params.get("save_model_extras"):
        cargs.append("--save-model-extras")
    if params.get("save_mvn"):
        cargs.append("--save-mvn")
    if params.get("save_mean"):
        cargs.append("--save-mean")
    if params.get("save_std"):
        cargs.append("--save-std")
    if params.get("save_variances"):
        cargs.append("--save-var")
    if params.get("save_zstat"):
        cargs.append("--save-zstat")
    if params.get("save_noise_mean"):
        cargs.append("--save-noise-mean")
    if params.get("save_noise_std"):
        cargs.append("--save-noise-std")
    if params.get("save_free_energy"):
        cargs.append("--save-free-energy")
    if params.get("option_file") is not None:
        cargs.extend([
            "--optfile",
            execution.input_file(params.get("option_file"))
        ])
    if params.get("debug"):
        cargs.append("--debug")
    return cargs


def fabber_dce_outputs(
    params: FabberDceParameters,
    execution: Execution,
) -> FabberDceOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FabberDceOutputs(
        root=execution.output_file("."),
        output_files=execution.output_file(params.get("output_directory") + "/*"),
    )
    return ret


def fabber_dce_execute(
    params: FabberDceParameters,
    execution: Execution,
) -> FabberDceOutputs:
    """
    Fabber DCE analysis tool for model-based analysis of dynamic contrast-enhanced
    imaging data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FabberDceOutputs`).
    """
    params = execution.params(params)
    cargs = fabber_dce_cargs(params, execution)
    ret = fabber_dce_outputs(params, execution)
    execution.run(cargs)
    return ret


def fabber_dce(
    output_directory: str,
    inference_method: str,
    forward_model: str,
    input_data: InputPathType,
    help_flag: bool = False,
    list_methods: bool = False,
    list_models: bool = False,
    list_params: bool = False,
    describe_params: bool = False,
    list_outputs: bool = False,
    evaluate_model: str | None = None,
    evaluate_params: list[float] | None = None,
    evaluate_nt: float | None = None,
    simple_output: bool = False,
    overwrite: bool = False,
    link_to_latest: bool = False,
    load_models: InputPathType | None = None,
    multiple_data: list[InputPathType] | None = None,
    data_order: str | None = "interleave",
    mask: InputPathType | None = None,
    masked_time_points: list[float] | None = None,
    supplemental_data: InputPathType | None = None,
    dump_param_names: bool = False,
    save_model_fit: bool = False,
    save_residuals: bool = False,
    save_model_extras: bool = False,
    save_mvn: bool = False,
    save_mean: bool = False,
    save_std: bool = False,
    save_variances: bool = False,
    save_zstat: bool = False,
    save_noise_mean: bool = False,
    save_noise_std: bool = False,
    save_free_energy: bool = False,
    option_file: InputPathType | None = None,
    debug: bool = False,
    runner: Runner | None = None,
) -> FabberDceOutputs:
    """
    Fabber DCE analysis tool for model-based analysis of dynamic contrast-enhanced
    imaging data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_directory: Directory for output files (including logfile).
        inference_method: Inference method to use.
        forward_model: Forward model to use.
        input_data: Single input data file.
        help_flag: Print this usage message.
        list_methods: List all known inference methods.
        list_models: List all known forward models.
        list_params: List model parameters (requires model configuration\
            options to be given).
        describe_params: Describe model parameters (name, description, units) -\
            requires model configuration options to be given.
        list_outputs: List additional model outputs (requires model\
            configuration options to be given).
        evaluate_model: Evaluate model. Set to name of output required or blank\
            for default output. Requires model configuration options,\
            --evaluate-params and --evaluate-nt.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation - must be consistent\
            with model options where appropriate.
        simple_output: Instead of usual output, simply output series of lines\
            each giving progress as percentage.
        overwrite: If set will overwrite existing output. If not set, new\
            output directories will be created by appending '+' to the directory\
            name.
        link_to_latest: Try to create a link to the most recent output\
            directory with the prefix _latest.
        load_models: Load models dynamically from the specified filename, which\
            should be a DLL/shared library.
        multiple_data: Specify multiple data files for n=1, 2, 3...
        data_order: If multiple data files are specified, how they will be\
            handled: concatenate = one after the other, interleave = first record\
            from each file, then second, etc.
        mask: Mask file. Inference will only be performed where mask value > 0.
        masked_time_points: List of masked time points, indexed from 1. These\
            will be ignored in the parameter updates.
        supplemental_data: 'Supplemental' timeseries data, required for some\
            models.
        dump_param_names: Write the file paramnames.txt containing the names of\
            the model parameters.
        save_model_fit: Output the model prediction as a 4D volume.
        save_residuals: Output the residuals (difference between the data and\
            the model prediction).
        save_model_extras: Output any additional model-specific timeseries data.
        save_mvn: Output the final MVN distributions.
        save_mean: Output the parameter means.
        save_std: Output the parameter standard deviations.
        save_variances: Output the parameter variances.
        save_zstat: Output the parameter Z-stats.
        save_noise_mean: Output the noise means. The noise distribution\
            inferred is the precision of a Gaussian noise source.
        save_noise_std: Output the noise standard deviations.
        save_free_energy: Output the free energy, if calculated.
        option_file: File containing additional options, one per line, in the\
            same form as specified on the command line.
        debug: Output large amounts of debug information. ONLY USE WITH VERY\
            SMALL NUMBERS OF VOXELS.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FabberDceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FABBER_DCE_METADATA)
    params = fabber_dce_params(
        output_directory=output_directory,
        inference_method=inference_method,
        forward_model=forward_model,
        input_data=input_data,
        help_flag=help_flag,
        list_methods=list_methods,
        list_models=list_models,
        list_params=list_params,
        describe_params=describe_params,
        list_outputs=list_outputs,
        evaluate_model=evaluate_model,
        evaluate_params=evaluate_params,
        evaluate_nt=evaluate_nt,
        simple_output=simple_output,
        overwrite=overwrite,
        link_to_latest=link_to_latest,
        load_models=load_models,
        multiple_data=multiple_data,
        data_order=data_order,
        mask=mask,
        masked_time_points=masked_time_points,
        supplemental_data=supplemental_data,
        dump_param_names=dump_param_names,
        save_model_fit=save_model_fit,
        save_residuals=save_residuals,
        save_model_extras=save_model_extras,
        save_mvn=save_mvn,
        save_mean=save_mean,
        save_std=save_std,
        save_variances=save_variances,
        save_zstat=save_zstat,
        save_noise_mean=save_noise_mean,
        save_noise_std=save_noise_std,
        save_free_energy=save_free_energy,
        option_file=option_file,
        debug=debug,
    )
    return fabber_dce_execute(params, execution)


__all__ = [
    "FABBER_DCE_METADATA",
    "FabberDceOutputs",
    "FabberDceParameters",
    "fabber_dce",
    "fabber_dce_params",
]
