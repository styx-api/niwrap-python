# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

EDDY_QUAD_METADATA = Metadata(
    id="7f05140209b6ebad40342feebc8da9b92d964042.boutiques",
    name="eddy_quad",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


EddyQuadParameters = typing.TypedDict('EddyQuadParameters', {
    "__STYX_TYPE__": typing.Literal["eddy_quad"],
    "eddyBase": str,
    "eddyIndex": InputPathType,
    "eddyParams": InputPathType,
    "mask": InputPathType,
    "bvals": InputPathType,
    "bvecs": typing.NotRequired[InputPathType | None],
    "output_dir": typing.NotRequired[str | None],
    "field": typing.NotRequired[InputPathType | None],
    "slspec": typing.NotRequired[InputPathType | None],
    "verbose": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "eddy_quad": eddy_quad_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "eddy_quad": eddy_quad_outputs,
    }.get(t)


class EddyQuadOutputs(typing.NamedTuple):
    """
    Output object returned when calling `eddy_quad(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dir_qc: OutputPathType | None
    """Quality control data outputs"""


def eddy_quad_params(
    eddy_base: str,
    eddy_index: InputPathType,
    eddy_params: InputPathType,
    mask: InputPathType,
    bvals: InputPathType,
    bvecs: InputPathType | None = None,
    output_dir: str | None = None,
    field: InputPathType | None = None,
    slspec: InputPathType | None = None,
    verbose: bool = False,
) -> EddyQuadParameters:
    """
    Build parameters.
    
    Args:
        eddy_base: Basename (including path) specified when running EDDY.
        eddy_index: File containing indices for all volumes into acquisition\
            parameters.
        eddy_params: File containing acquisition parameters.
        mask: Binary mask file.
        bvals: b-values file.
        bvecs: b-vectors file - only used when <eddyBase>.eddy_residuals file\
            is present.
        output_dir: Output directory - default = '<eddyBase>.qc'.
        field: TOPUP estimated field (in Hz).
        slspec: Text file specifying slice/group acquisition.
        verbose: Display debug messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "eddy_quad",
        "eddyBase": eddy_base,
        "eddyIndex": eddy_index,
        "eddyParams": eddy_params,
        "mask": mask,
        "bvals": bvals,
        "verbose": verbose,
    }
    if bvecs is not None:
        params["bvecs"] = bvecs
    if output_dir is not None:
        params["output_dir"] = output_dir
    if field is not None:
        params["field"] = field
    if slspec is not None:
        params["slspec"] = slspec
    return params


def eddy_quad_cargs(
    params: EddyQuadParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("eddy_quad")
    cargs.append(params.get("eddyBase"))
    cargs.extend([
        "--eddyIdx",
        execution.input_file(params.get("eddyIndex"))
    ])
    cargs.extend([
        "--eddyParams",
        execution.input_file(params.get("eddyParams"))
    ])
    cargs.extend([
        "--mask",
        execution.input_file(params.get("mask"))
    ])
    cargs.extend([
        "--bvals",
        execution.input_file(params.get("bvals"))
    ])
    if params.get("bvecs") is not None:
        cargs.extend([
            "--bvecs",
            execution.input_file(params.get("bvecs"))
        ])
    if params.get("output_dir") is not None:
        cargs.extend([
            "--output-dir",
            params.get("output_dir")
        ])
    if params.get("field") is not None:
        cargs.extend([
            "--field",
            execution.input_file(params.get("field"))
        ])
    if params.get("slspec") is not None:
        cargs.extend([
            "--slspec",
            execution.input_file(params.get("slspec"))
        ])
    if params.get("verbose"):
        cargs.append("--verbose")
    return cargs


def eddy_quad_outputs(
    params: EddyQuadParameters,
    execution: Execution,
) -> EddyQuadOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = EddyQuadOutputs(
        root=execution.output_file("."),
        output_dir_qc=execution.output_file(params.get("output_dir")) if (params.get("output_dir") is not None) else None,
    )
    return ret


def eddy_quad_execute(
    params: EddyQuadParameters,
    execution: Execution,
) -> EddyQuadOutputs:
    """
    QUality Assessment for DMRI.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `EddyQuadOutputs`).
    """
    params = execution.params(params)
    cargs = eddy_quad_cargs(params, execution)
    ret = eddy_quad_outputs(params, execution)
    execution.run(cargs)
    return ret


def eddy_quad(
    eddy_base: str,
    eddy_index: InputPathType,
    eddy_params: InputPathType,
    mask: InputPathType,
    bvals: InputPathType,
    bvecs: InputPathType | None = None,
    output_dir: str | None = None,
    field: InputPathType | None = None,
    slspec: InputPathType | None = None,
    verbose: bool = False,
    runner: Runner | None = None,
) -> EddyQuadOutputs:
    """
    QUality Assessment for DMRI.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        eddy_base: Basename (including path) specified when running EDDY.
        eddy_index: File containing indices for all volumes into acquisition\
            parameters.
        eddy_params: File containing acquisition parameters.
        mask: Binary mask file.
        bvals: b-values file.
        bvecs: b-vectors file - only used when <eddyBase>.eddy_residuals file\
            is present.
        output_dir: Output directory - default = '<eddyBase>.qc'.
        field: TOPUP estimated field (in Hz).
        slspec: Text file specifying slice/group acquisition.
        verbose: Display debug messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `EddyQuadOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(EDDY_QUAD_METADATA)
    params = eddy_quad_params(
        eddy_base=eddy_base,
        eddy_index=eddy_index,
        eddy_params=eddy_params,
        mask=mask,
        bvals=bvals,
        bvecs=bvecs,
        output_dir=output_dir,
        field=field,
        slspec=slspec,
        verbose=verbose,
    )
    return eddy_quad_execute(params, execution)


__all__ = [
    "EDDY_QUAD_METADATA",
    "EddyQuadOutputs",
    "EddyQuadParameters",
    "eddy_quad",
    "eddy_quad_params",
]
