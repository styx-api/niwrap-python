# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TBSS_X_METADATA = Metadata(
    id="92fc476ae5e966d3c5014f57b61d18334a4b32e8.boutiques",
    name="tbss_x",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


TbssXParameters = typing.TypedDict('TbssXParameters', {
    "__STYX_TYPE__": typing.Literal["tbss_x"],
    "scalar_dirs": list[str],
    "vector_dirs": list[str],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "tbss_x": tbss_x_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class TbssXOutputs(typing.NamedTuple):
    """
    Output object returned when calling `tbss_x(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def tbss_x_params(
    scalar_dirs: list[str],
    vector_dirs: list[str],
) -> TbssXParameters:
    """
    Build parameters.
    
    Args:
        scalar_dirs: List of scalar directories (e.g., F1, F2).
        vector_dirs: List of vector directories (e.g., D1, D2).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "tbss_x",
        "scalar_dirs": scalar_dirs,
        "vector_dirs": vector_dirs,
    }
    return params


def tbss_x_cargs(
    params: TbssXParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tbss_x")
    cargs.extend(params.get("scalar_dirs"))
    cargs.extend(params.get("vector_dirs"))
    return cargs


def tbss_x_outputs(
    params: TbssXParameters,
    execution: Execution,
) -> TbssXOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TbssXOutputs(
        root=execution.output_file("."),
    )
    return ret


def tbss_x_execute(
    params: TbssXParameters,
    execution: Execution,
) -> TbssXOutputs:
    """
    TBSS cross-subject script for processing scalar and vector directories.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `TbssXOutputs`).
    """
    params = execution.params(params)
    cargs = tbss_x_cargs(params, execution)
    ret = tbss_x_outputs(params, execution)
    execution.run(cargs)
    return ret


def tbss_x(
    scalar_dirs: list[str],
    vector_dirs: list[str],
    runner: Runner | None = None,
) -> TbssXOutputs:
    """
    TBSS cross-subject script for processing scalar and vector directories.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        scalar_dirs: List of scalar directories (e.g., F1, F2).
        vector_dirs: List of vector directories (e.g., D1, D2).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TbssXOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TBSS_X_METADATA)
    params = tbss_x_params(
        scalar_dirs=scalar_dirs,
        vector_dirs=vector_dirs,
    )
    return tbss_x_execute(params, execution)


__all__ = [
    "TBSS_X_METADATA",
    "TbssXOutputs",
    "TbssXParameters",
    "tbss_x",
    "tbss_x_params",
]
