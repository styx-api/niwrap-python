# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLSLICE_METADATA = Metadata(
    id="628c385a778fd553f7c08a743744f0758a53a941.boutiques",
    name="fslslice",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslsliceParameters = typing.TypedDict('FslsliceParameters', {
    "@type": typing.Literal["fsl.fslslice"],
    "volume": InputPathType,
    "output_basename": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fsl.fslslice": fslslice_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class FslsliceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslslice(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fslslice_params(
    volume: InputPathType,
    output_basename: str | None = None,
) -> FslsliceParameters:
    """
    Build parameters.
    
    Args:
        volume: Input 3D volume (e.g. volume.nii.gz).
        output_basename: Output basename for extracted slices.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl.fslslice",
        "volume": volume,
    }
    if output_basename is not None:
        params["output_basename"] = output_basename
    return params


def fslslice_cargs(
    params: FslsliceParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslslice")
    cargs.append(execution.input_file(params.get("volume")))
    if params.get("output_basename") is not None:
        cargs.append(params.get("output_basename"))
    return cargs


def fslslice_outputs(
    params: FslsliceParameters,
    execution: Execution,
) -> FslsliceOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslsliceOutputs(
        root=execution.output_file("."),
    )
    return ret


def fslslice_execute(
    params: FslsliceParameters,
    runner: Runner | None = None,
) -> FslsliceOutputs:
    """
    fslslice
    
    Tool to extract all slices from a 3D volume and store as 2D images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslsliceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLSLICE_METADATA)
    params = execution.params(params)
    cargs = fslslice_cargs(params, execution)
    ret = fslslice_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslslice(
    volume: InputPathType,
    output_basename: str | None = None,
    runner: Runner | None = None,
) -> FslsliceOutputs:
    """
    fslslice
    
    Tool to extract all slices from a 3D volume and store as 2D images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        volume: Input 3D volume (e.g. volume.nii.gz).
        output_basename: Output basename for extracted slices.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslsliceOutputs`).
    """
    params = fslslice_params(
        volume=volume,
        output_basename=output_basename,
    )
    return fslslice_execute(params, runner)


__all__ = [
    "FSLSLICE_METADATA",
    "FslsliceOutputs",
    "FslsliceParameters",
    "fslslice",
    "fslslice_execute",
    "fslslice_params",
]
