# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DTIGEN_METADATA = Metadata(
    id="1693c829ac7f8ececf6dc63605144e179c65163b.boutiques",
    name="dtigen",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


DtigenParameters = typing.TypedDict('DtigenParameters', {
    "__STYX_TYPE__": typing.Literal["dtigen"],
    "tensor": InputPathType,
    "s0": InputPathType,
    "output_data": str,
    "bvecs": InputPathType,
    "bvals": InputPathType,
    "brainmask": InputPathType,
    "kurtosis": typing.NotRequired[InputPathType | None],
    "help": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "dtigen": dtigen_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "dtigen": dtigen_outputs,
    }.get(t)


class DtigenOutputs(typing.NamedTuple):
    """
    Output object returned when calling `dtigen(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_diffusion_data: OutputPathType
    """Output diffusion data"""
    output_kurtosis_map: OutputPathType | None
    """Mean kurtosis map"""


def dtigen_params(
    tensor: InputPathType,
    s0: InputPathType,
    output_data: str,
    bvecs: InputPathType,
    bvals: InputPathType,
    brainmask: InputPathType,
    kurtosis: InputPathType | None = None,
    help_: bool = False,
) -> DtigenParameters:
    """
    Build parameters.
    
    Args:
        tensor: Input tensor file.
        s0: Input S0 file.
        output_data: Output data file.
        bvecs: bvecs ASCII text file.
        bvals: bvals ASCII text file.
        brainmask: Brain mask file.
        kurtosis: Mean kurtosis map.
        help_: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "dtigen",
        "tensor": tensor,
        "s0": s0,
        "output_data": output_data,
        "bvecs": bvecs,
        "bvals": bvals,
        "brainmask": brainmask,
        "help": help_,
    }
    if kurtosis is not None:
        params["kurtosis"] = kurtosis
    return params


def dtigen_cargs(
    params: DtigenParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dtigen")
    cargs.extend([
        "-t",
        execution.input_file(params.get("tensor"))
    ])
    cargs.extend([
        "--s0",
        execution.input_file(params.get("s0"))
    ])
    cargs.extend([
        "-o",
        params.get("output_data")
    ])
    cargs.extend([
        "-r",
        execution.input_file(params.get("bvecs"))
    ])
    cargs.extend([
        "-b",
        execution.input_file(params.get("bvals"))
    ])
    cargs.extend([
        "-m",
        execution.input_file(params.get("brainmask"))
    ])
    if params.get("kurtosis") is not None:
        cargs.extend([
            "--kurt",
            execution.input_file(params.get("kurtosis"))
        ])
    if params.get("help"):
        cargs.append("-h")
    return cargs


def dtigen_outputs(
    params: DtigenParameters,
    execution: Execution,
) -> DtigenOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DtigenOutputs(
        root=execution.output_file("."),
        output_diffusion_data=execution.output_file(params.get("output_data") + ".nii.gz"),
        output_kurtosis_map=execution.output_file(pathlib.Path(params.get("kurtosis")).name) if (params.get("kurtosis") is not None) else None,
    )
    return ret


def dtigen_execute(
    params: DtigenParameters,
    execution: Execution,
) -> DtigenOutputs:
    """
    Generate diffusion data using tensor model.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `DtigenOutputs`).
    """
    params = execution.params(params)
    cargs = dtigen_cargs(params, execution)
    ret = dtigen_outputs(params, execution)
    execution.run(cargs)
    return ret


def dtigen(
    tensor: InputPathType,
    s0: InputPathType,
    output_data: str,
    bvecs: InputPathType,
    bvals: InputPathType,
    brainmask: InputPathType,
    kurtosis: InputPathType | None = None,
    help_: bool = False,
    runner: Runner | None = None,
) -> DtigenOutputs:
    """
    Generate diffusion data using tensor model.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        tensor: Input tensor file.
        s0: Input S0 file.
        output_data: Output data file.
        bvecs: bvecs ASCII text file.
        bvals: bvals ASCII text file.
        brainmask: Brain mask file.
        kurtosis: Mean kurtosis map.
        help_: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DtigenOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DTIGEN_METADATA)
    params = dtigen_params(
        tensor=tensor,
        s0=s0,
        output_data=output_data,
        bvecs=bvecs,
        bvals=bvals,
        brainmask=brainmask,
        kurtosis=kurtosis,
        help_=help_,
    )
    return dtigen_execute(params, execution)


__all__ = [
    "DTIGEN_METADATA",
    "DtigenOutputs",
    "DtigenParameters",
    "dtigen",
    "dtigen_params",
]
