# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLFFT_METADATA = Metadata(
    id="9f1b4eeecb3974eba1e02795f230f59822625396.boutiques",
    name="fslfft",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslfftParameters = typing.TypedDict('FslfftParameters', {
    "__STYX_TYPE__": typing.Literal["fslfft"],
    "input_volume": InputPathType,
    "output_volume": str,
    "inverse_flag": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fslfft": fslfft_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "fslfft": fslfft_outputs,
    }.get(t)


class FslfftOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslfft(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output volume result of the Fourier transform"""


def fslfft_params(
    input_volume: InputPathType,
    output_volume: str,
    inverse_flag: bool = False,
) -> FslfftParameters:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume file (e.g. invol.nii.gz).
        output_volume: Output volume file (e.g. outvol.nii.gz).
        inverse_flag: Flag to perform the inverse Fourier transform.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fslfft",
        "input_volume": input_volume,
        "output_volume": output_volume,
        "inverse_flag": inverse_flag,
    }
    return params


def fslfft_cargs(
    params: FslfftParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslfft")
    cargs.append(execution.input_file(params.get("input_volume")))
    cargs.append(params.get("output_volume"))
    if params.get("inverse_flag"):
        cargs.append("-inv")
    return cargs


def fslfft_outputs(
    params: FslfftParameters,
    execution: Execution,
) -> FslfftOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslfftOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_volume") + ".nii.gz"),
    )
    return ret


def fslfft_execute(
    params: FslfftParameters,
    execution: Execution,
) -> FslfftOutputs:
    """
    A tool to compute the Fourier transform of an input volume and save the result
    in an output volume.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FslfftOutputs`).
    """
    params = execution.params(params)
    cargs = fslfft_cargs(params, execution)
    ret = fslfft_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslfft(
    input_volume: InputPathType,
    output_volume: str,
    inverse_flag: bool = False,
    runner: Runner | None = None,
) -> FslfftOutputs:
    """
    A tool to compute the Fourier transform of an input volume and save the result
    in an output volume.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_volume: Input volume file (e.g. invol.nii.gz).
        output_volume: Output volume file (e.g. outvol.nii.gz).
        inverse_flag: Flag to perform the inverse Fourier transform.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslfftOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLFFT_METADATA)
    params = fslfft_params(
        input_volume=input_volume,
        output_volume=output_volume,
        inverse_flag=inverse_flag,
    )
    return fslfft_execute(params, execution)


__all__ = [
    "FSLFFT_METADATA",
    "FslfftOutputs",
    "FslfftParameters",
    "fslfft",
    "fslfft_params",
]
