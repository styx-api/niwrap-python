# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FIND_THE_BIGGEST_METADATA = Metadata(
    id="3dbb5859444668bef5d4d2dc4f26feb48bfc1655.boutiques",
    name="find_the_biggest",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FindTheBiggestParameters = typing.TypedDict('FindTheBiggestParameters', {
    "__STYX_TYPE__": typing.Literal["find_the_biggest"],
    "volumes_surfaces": list[InputPathType],
    "output_index": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "find_the_biggest": find_the_biggest_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "find_the_biggest": find_the_biggest_outputs,
    }.get(t)


class FindTheBiggestOutputs(typing.NamedTuple):
    """
    Output object returned when calling `find_the_biggest(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Index of the largest volume or surface"""


def find_the_biggest_params(
    volumes_surfaces: list[InputPathType],
    output_index: str,
) -> FindTheBiggestParameters:
    """
    Build parameters.
    
    Args:
        volumes_surfaces: List of input volumes or surfaces.
        output_index: Output index of the largest volume or surface.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "find_the_biggest",
        "volumes_surfaces": volumes_surfaces,
        "output_index": output_index,
    }
    return params


def find_the_biggest_cargs(
    params: FindTheBiggestParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("find_the_biggest")
    cargs.extend([execution.input_file(f) for f in params.get("volumes_surfaces")])
    cargs.append(params.get("output_index"))
    return cargs


def find_the_biggest_outputs(
    params: FindTheBiggestParameters,
    execution: Execution,
) -> FindTheBiggestOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FindTheBiggestOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_index")),
    )
    return ret


def find_the_biggest_execute(
    params: FindTheBiggestParameters,
    execution: Execution,
) -> FindTheBiggestOutputs:
    """
    Tool to find the largest volume or surface from a set of inputs.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FindTheBiggestOutputs`).
    """
    params = execution.params(params)
    cargs = find_the_biggest_cargs(params, execution)
    ret = find_the_biggest_outputs(params, execution)
    execution.run(cargs)
    return ret


def find_the_biggest(
    volumes_surfaces: list[InputPathType],
    output_index: str,
    runner: Runner | None = None,
) -> FindTheBiggestOutputs:
    """
    Tool to find the largest volume or surface from a set of inputs.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        volumes_surfaces: List of input volumes or surfaces.
        output_index: Output index of the largest volume or surface.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FindTheBiggestOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FIND_THE_BIGGEST_METADATA)
    params = find_the_biggest_params(
        volumes_surfaces=volumes_surfaces,
        output_index=output_index,
    )
    return find_the_biggest_execute(params, execution)


__all__ = [
    "FIND_THE_BIGGEST_METADATA",
    "FindTheBiggestOutputs",
    "FindTheBiggestParameters",
    "find_the_biggest",
    "find_the_biggest_params",
]
