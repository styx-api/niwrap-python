# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LIST_OTL_LABELS_METADATA = Metadata(
    id="2093ee83fcca985e5be56e6cc6e4676af4aa43df.boutiques",
    name="list_otl_labels",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


ListOtlLabelsParameters = typing.TypedDict('ListOtlLabelsParameters', {
    "__STYX_TYPE__": typing.Literal["list_otl_labels"],
    "input_file": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "list_otl_labels": list_otl_labels_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class ListOtlLabelsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `list_otl_labels(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def list_otl_labels_params(
    input_file: InputPathType,
) -> ListOtlLabelsParameters:
    """
    Build parameters.
    
    Args:
        input_file: Input volume filename.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "list_otl_labels",
        "input_file": input_file,
    }
    return params


def list_otl_labels_cargs(
    params: ListOtlLabelsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("list_otl_labels")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file"))
    ])
    return cargs


def list_otl_labels_outputs(
    params: ListOtlLabelsParameters,
    execution: Execution,
) -> ListOtlLabelsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ListOtlLabelsOutputs(
        root=execution.output_file("."),
    )
    return ret


def list_otl_labels_execute(
    params: ListOtlLabelsParameters,
    execution: Execution,
) -> ListOtlLabelsOutputs:
    """
    Tool for listing labels in an imaging file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `ListOtlLabelsOutputs`).
    """
    params = execution.params(params)
    cargs = list_otl_labels_cargs(params, execution)
    ret = list_otl_labels_outputs(params, execution)
    execution.run(cargs)
    return ret


def list_otl_labels(
    input_file: InputPathType,
    runner: Runner | None = None,
) -> ListOtlLabelsOutputs:
    """
    Tool for listing labels in an imaging file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input volume filename.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ListOtlLabelsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LIST_OTL_LABELS_METADATA)
    params = list_otl_labels_params(
        input_file=input_file,
    )
    return list_otl_labels_execute(params, execution)


__all__ = [
    "LIST_OTL_LABELS_METADATA",
    "ListOtlLabelsOutputs",
    "ListOtlLabelsParameters",
    "list_otl_labels",
    "list_otl_labels_params",
]
