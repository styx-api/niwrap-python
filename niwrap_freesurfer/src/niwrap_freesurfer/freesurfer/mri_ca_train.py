# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_CA_TRAIN_METADATA = Metadata(
    id="432e0861913c8c1346f736846e22c0107ee5337f.boutiques",
    name="mri_ca_train",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriCaTrainParameters = typing.TypedDict('MriCaTrainParameters', {
    "__STYX_TYPE__": typing.Literal["mri_ca_train"],
    "subjects": list[str],
    "output_gca": str,
    "segmentation": str,
    "transform": typing.NotRequired[str | None],
    "mask_volume": typing.NotRequired[str | None],
    "node_spacing": typing.NotRequired[str | None],
    "prior_spacing": typing.NotRequired[str | None],
    "input_training": typing.NotRequired[list[str] | None],
    "makesym": typing.NotRequired[list[str] | None],
    "check_symmetry": typing.NotRequired[list[str] | None],
    "sanity_check": bool,
    "threads": typing.NotRequired[int | None],
    "done_file": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_ca_train": mri_ca_train_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class MriCaTrainOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_ca_train(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_ca_train_params(
    subjects: list[str],
    output_gca: str,
    segmentation: str,
    transform: str | None = None,
    mask_volume: str | None = None,
    node_spacing: str | None = None,
    prior_spacing: str | None = None,
    input_training: list[str] | None = None,
    makesym: list[str] | None = None,
    check_symmetry: list[str] | None = None,
    sanity_check: bool = False,
    threads: int | None = None,
    done_file: str | None = None,
) -> MriCaTrainParameters:
    """
    Build parameters.
    
    Args:
        subjects: List of subject directories under the SUBJECTS_DIR. Each is a\
            path relative to the subject's MRI directory.
        output_gca: Output GCA file name.
        segmentation: Segmentation volume directory relative to each subject's\
            MRI path.
        transform: Atlas transform path relative to each subject's MRI\
            transforms directory.
        mask_volume: Volume name used as a mask, path relative to each\
            subject's MRI directory.
        node_spacing: Spacing of classifiers in canonical space.
        prior_spacing: Spacing of class priors in canonical space.
        input_training: Specifying training data, path relative to each\
            subject's MRI directory. Can specify multiple inputs.
        makesym: Symmetrize an already existing atlas. Specify input GCA and\
            symmetrized GCA.
        check_symmetry: Check the symmetry of an already existing atlas.\
            Specify input GCA and symmetrized GCA.
        sanity_check: Conduct sanity-check of labels for obvious edit errors.
        threads: Specify number of threads to use (also known as -nthreads).
        done_file: Create DoneFile when done (contents: 0=ok, 1=error).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_ca_train",
        "subjects": subjects,
        "output_gca": output_gca,
        "segmentation": segmentation,
        "sanity_check": sanity_check,
    }
    if transform is not None:
        params["transform"] = transform
    if mask_volume is not None:
        params["mask_volume"] = mask_volume
    if node_spacing is not None:
        params["node_spacing"] = node_spacing
    if prior_spacing is not None:
        params["prior_spacing"] = prior_spacing
    if input_training is not None:
        params["input_training"] = input_training
    if makesym is not None:
        params["makesym"] = makesym
    if check_symmetry is not None:
        params["check_symmetry"] = check_symmetry
    if threads is not None:
        params["threads"] = threads
    if done_file is not None:
        params["done_file"] = done_file
    return params


def mri_ca_train_cargs(
    params: MriCaTrainParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_ca_train")
    cargs.extend(params.get("subjects"))
    cargs.append(params.get("output_gca"))
    cargs.extend([
        "-seg",
        params.get("segmentation")
    ])
    if params.get("transform") is not None:
        cargs.extend([
            "-xform",
            params.get("transform")
        ])
    if params.get("mask_volume") is not None:
        cargs.extend([
            "-mask",
            params.get("mask_volume")
        ])
    if params.get("node_spacing") is not None:
        cargs.extend([
            "-node_spacing",
            params.get("node_spacing")
        ])
    if params.get("prior_spacing") is not None:
        cargs.extend([
            "-prior_spacing",
            params.get("prior_spacing")
        ])
    if params.get("input_training") is not None:
        cargs.extend([
            "-input",
            *params.get("input_training")
        ])
    if params.get("makesym") is not None:
        cargs.extend([
            "-makesym",
            *params.get("makesym")
        ])
    if params.get("check_symmetry") is not None:
        cargs.extend([
            "-checksym",
            *params.get("check_symmetry")
        ])
    if params.get("sanity_check"):
        cargs.append("-check")
    if params.get("threads") is not None:
        cargs.extend([
            "-threads",
            str(params.get("threads"))
        ])
    if params.get("done_file") is not None:
        cargs.extend([
            "-done",
            params.get("done_file")
        ])
    return cargs


def mri_ca_train_outputs(
    params: MriCaTrainParameters,
    execution: Execution,
) -> MriCaTrainOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriCaTrainOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_ca_train_execute(
    params: MriCaTrainParameters,
    execution: Execution,
) -> MriCaTrainOutputs:
    """
    Trains GCA data with multiple subjects using provided segmentation volumes and
    other configuration.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriCaTrainOutputs`).
    """
    params = execution.params(params)
    cargs = mri_ca_train_cargs(params, execution)
    ret = mri_ca_train_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_ca_train(
    subjects: list[str],
    output_gca: str,
    segmentation: str,
    transform: str | None = None,
    mask_volume: str | None = None,
    node_spacing: str | None = None,
    prior_spacing: str | None = None,
    input_training: list[str] | None = None,
    makesym: list[str] | None = None,
    check_symmetry: list[str] | None = None,
    sanity_check: bool = False,
    threads: int | None = None,
    done_file: str | None = None,
    runner: Runner | None = None,
) -> MriCaTrainOutputs:
    """
    Trains GCA data with multiple subjects using provided segmentation volumes and
    other configuration.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects: List of subject directories under the SUBJECTS_DIR. Each is a\
            path relative to the subject's MRI directory.
        output_gca: Output GCA file name.
        segmentation: Segmentation volume directory relative to each subject's\
            MRI path.
        transform: Atlas transform path relative to each subject's MRI\
            transforms directory.
        mask_volume: Volume name used as a mask, path relative to each\
            subject's MRI directory.
        node_spacing: Spacing of classifiers in canonical space.
        prior_spacing: Spacing of class priors in canonical space.
        input_training: Specifying training data, path relative to each\
            subject's MRI directory. Can specify multiple inputs.
        makesym: Symmetrize an already existing atlas. Specify input GCA and\
            symmetrized GCA.
        check_symmetry: Check the symmetry of an already existing atlas.\
            Specify input GCA and symmetrized GCA.
        sanity_check: Conduct sanity-check of labels for obvious edit errors.
        threads: Specify number of threads to use (also known as -nthreads).
        done_file: Create DoneFile when done (contents: 0=ok, 1=error).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCaTrainOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_CA_TRAIN_METADATA)
    params = mri_ca_train_params(
        subjects=subjects,
        output_gca=output_gca,
        segmentation=segmentation,
        transform=transform,
        mask_volume=mask_volume,
        node_spacing=node_spacing,
        prior_spacing=prior_spacing,
        input_training=input_training,
        makesym=makesym,
        check_symmetry=check_symmetry,
        sanity_check=sanity_check,
        threads=threads,
        done_file=done_file,
    )
    return mri_ca_train_execute(params, execution)


__all__ = [
    "MRI_CA_TRAIN_METADATA",
    "MriCaTrainOutputs",
    "MriCaTrainParameters",
    "mri_ca_train",
    "mri_ca_train_params",
]
