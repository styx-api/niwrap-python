# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_REGISTER_METADATA = Metadata(
    id="01ac3575a4acd8aa600baa6d27fee615f0a862c6.boutiques",
    name="mris_register",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisRegisterParameters = typing.TypedDict('MrisRegisterParameters', {
    "__STYX_TYPE__": typing.Literal["mris_register"],
    "surf_fname": InputPathType,
    "target": InputPathType,
    "out_fname": str,
    "one_flag": bool,
    "addframe": typing.NotRequired[str | None],
    "annot_name": typing.NotRequired[str | None],
    "curvature_fname": typing.NotRequired[InputPathType | None],
    "canonical_name": typing.NotRequired[str | None],
    "inflated": bool,
    "inflated_name": typing.NotRequired[str | None],
    "label_file": typing.NotRequired[str | None],
    "orig_name": typing.NotRequired[str | None],
    "overlay_values": typing.NotRequired[str | None],
    "overlay_dir": typing.NotRequired[str | None],
    "starting_reg_fname": typing.NotRequired[InputPathType | None],
    "jacobian_fname": typing.NotRequired[str | None],
    "n_averages": typing.NotRequired[float | None],
    "adaptive": bool,
    "l_area": typing.NotRequired[float | None],
    "l_corr": typing.NotRequired[float | None],
    "curvature_flag": bool,
    "l_dist": typing.NotRequired[float | None],
    "dt_value": typing.NotRequired[float | None],
    "dt_decrease": typing.NotRequired[float | None],
    "dt_increase": typing.NotRequired[float | None],
    "l_external": typing.NotRequired[float | None],
    "error_ratio": typing.NotRequired[float | None],
    "initial_flag": bool,
    "l_laplacian": typing.NotRequired[float | None],
    "line_min": bool,
    "momentum": typing.NotRequired[float | None],
    "max_degrees": typing.NotRequired[float | None],
    "median": bool,
    "min_degrees": typing.NotRequired[float | None],
    "multi_scale": typing.NotRequired[float | None],
    "n_iterations": typing.NotRequired[float | None],
    "n_angles": typing.NotRequired[float | None],
    "neighborhood_size": typing.NotRequired[float | None],
    "l_nlarea": typing.NotRequired[float | None],
    "no_curv": bool,
    "no_normalization": bool,
    "no_rotation": bool,
    "no_sulc": bool,
    "num_surfaces": typing.NotRequired[float | None],
    "overlay_corr": typing.NotRequired[float | None],
    "max_passes": typing.NotRequired[float | None],
    "l_parea": typing.NotRequired[float | None],
    "remove_negative": typing.NotRequired[float | None],
    "reverse": bool,
    "rotate_values": typing.NotRequired[str | None],
    "registration_file": typing.NotRequired[InputPathType | None],
    "scale": typing.NotRequired[float | None],
    "search_flag": bool,
    "spring_value": typing.NotRequired[float | None],
    "tolerance": typing.NotRequired[float | None],
    "topology_flag": bool,
    "vnum": typing.NotRequired[str | None],
    "vsmooth": bool,
    "write_iterations": typing.NotRequired[float | None],
    "gdiag_no": typing.NotRequired[float | None],
    "vector_flag": bool,
    "threads": typing.NotRequired[float | None],
    "version_flag": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mris_register": mris_register_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mris_register": mris_register_outputs,
    }.get(t)


class MrisRegisterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mris_register(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface_file: OutputPathType
    """Output surface file after registration."""
    jacobian_output: OutputPathType | None
    """Jacobian output file if specified."""


def mris_register_params(
    surf_fname: InputPathType,
    target: InputPathType,
    out_fname: str,
    one_flag: bool = False,
    addframe: str | None = None,
    annot_name: str | None = None,
    curvature_fname: InputPathType | None = None,
    canonical_name: str | None = None,
    inflated: bool = False,
    inflated_name: str | None = None,
    label_file: str | None = None,
    orig_name: str | None = None,
    overlay_values: str | None = None,
    overlay_dir: str | None = None,
    starting_reg_fname: InputPathType | None = None,
    jacobian_fname: str | None = None,
    n_averages: float | None = None,
    adaptive: bool = False,
    l_area: float | None = None,
    l_corr: float | None = None,
    curvature_flag: bool = False,
    l_dist: float | None = None,
    dt_value: float | None = None,
    dt_decrease: float | None = None,
    dt_increase: float | None = None,
    l_external: float | None = None,
    error_ratio: float | None = None,
    initial_flag: bool = False,
    l_laplacian: float | None = None,
    line_min: bool = False,
    momentum: float | None = None,
    max_degrees: float | None = None,
    median: bool = False,
    min_degrees: float | None = None,
    multi_scale: float | None = None,
    n_iterations: float | None = None,
    n_angles: float | None = None,
    neighborhood_size: float | None = None,
    l_nlarea: float | None = None,
    no_curv: bool = False,
    no_normalization: bool = False,
    no_rotation: bool = False,
    no_sulc: bool = False,
    num_surfaces: float | None = None,
    overlay_corr: float | None = None,
    max_passes: float | None = None,
    l_parea: float | None = None,
    remove_negative: float | None = None,
    reverse: bool = False,
    rotate_values: str | None = None,
    registration_file: InputPathType | None = None,
    scale: float | None = None,
    search_flag: bool = False,
    spring_value: float | None = None,
    tolerance: float | None = None,
    topology_flag: bool = False,
    vnum: str | None = None,
    vsmooth: bool = False,
    write_iterations: float | None = None,
    gdiag_no: float | None = None,
    vector_flag: bool = False,
    threads: float | None = None,
    version_flag: bool = False,
) -> MrisRegisterParameters:
    """
    Build parameters.
    
    Args:
        surf_fname: Surface to register, often {hemi}.sphere.
        target: The data to register to. A template file for average surface or\
            a single-subject's surface.
        out_fname: Output surface file to capture registration. Example:\
            {hemi}.sphere.reg.
        one_flag: Treats target argument as a single subject's surface not a\
            template file.
        addframe: Add field with location in the atlas.
        annot_name: Zeroes medial wall using annotation.
        curvature_fname: Curvature file name.
        canonical_name: Use surface for canonical properties.
        inflated: Use inflated surface for initial alignment.
        inflated_name: Uses this name for inflated surface for initial\
            alignment.
        label_file: Specify a manual label to align with atlas label.
        orig_name: Use this for original properties.
        overlay_values: Adds a variable to the atlas from overlay file,\
            smoothing it specified number of times.
        overlay_dir: Changes overlay path.
        starting_reg_fname: Start registration with coordinates from file.
        jacobian_fname: Write out jacobian of mapping to the specified file.
        n_averages: Set the number of averages.
        adaptive: Use adaptive time step integration.
        l_area: Sets l_area parameter.
        l_corr: Sets the l_corr parameter.
        curvature_flag: Use smoothwm curvature for final alignment.
        l_dist: Specify distance term.
        dt_value: Sets momentum with specified dt.
        dt_decrease: Set decrease for dt.
        dt_increase: Set increase for dt.
        l_external: Sets l_external parameter.
        error_ratio: Sets error ratio.
        initial_flag: Use initial registration.
        l_laplacian: Sets l_laplacian.
        line_min: Integrate using line minimization.
        momentum: Chooses integration_type = INTEGRATE_MOMENTUM and sets\
            momentum value.
        max_degrees: Set max angle for search.
        median: Uses median normalization (instead of mean).
        min_degrees: Set min angle for search.
        multi_scale: Use multi_scale scales for morphing.
        n_iterations: Sets number of iterations.
        n_angles: Set number of angles/search per scale.
        neighborhood_size: Use neighborhood size specified.
        l_nlarea: Sets l_nlarea parameter.
        no_curv: Do not use smoothwm curvature for final alignment.
        no_normalization: Disables normalization.
        no_rotation: Disables initial rigid alignment.
        no_sulc: Disables initial sulc alignment.
        num_surfaces: Use specified number of surfaces/curvatures for\
            alignment.
        overlay_corr: Sets overlay correlation coefficient.
        max_passes: Limit unfolding to specified passes.
        l_parea: Sets l_parea parameter.
        remove_negative: Remove negative triangles with iterative smoothing if\
            non-zero.
        reverse: Mirror image reverse brain before morphing.
        rotate_values: Rotates brain by specified angles.
        registration_file: Extract rotational components from registration\
            file.
        scale: Scales distances by the specified value.
        search_flag: Integrate with binary search line minimization.
        spring_value: Sets the spring parameter.
        tolerance: Specifies tolerance.
        topology_flag: Preserves the topology of positive area triangles.
        vnum: Set neighborhood parameters.
        vsmooth: Use space/time varying smoothness weighting.
        write_iterations: Set number of write iterations.
        gdiag_no: Supplies a vertex number for diagnostics.
        vector_flag: Prints help for Multiframe mode, listing field names and\
            numbers.
        threads: Set number of OMP threads.
        version_flag: Print the version number.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mris_register",
        "surf_fname": surf_fname,
        "target": target,
        "out_fname": out_fname,
        "one_flag": one_flag,
        "inflated": inflated,
        "adaptive": adaptive,
        "curvature_flag": curvature_flag,
        "initial_flag": initial_flag,
        "line_min": line_min,
        "median": median,
        "no_curv": no_curv,
        "no_normalization": no_normalization,
        "no_rotation": no_rotation,
        "no_sulc": no_sulc,
        "reverse": reverse,
        "search_flag": search_flag,
        "topology_flag": topology_flag,
        "vsmooth": vsmooth,
        "vector_flag": vector_flag,
        "version_flag": version_flag,
    }
    if addframe is not None:
        params["addframe"] = addframe
    if annot_name is not None:
        params["annot_name"] = annot_name
    if curvature_fname is not None:
        params["curvature_fname"] = curvature_fname
    if canonical_name is not None:
        params["canonical_name"] = canonical_name
    if inflated_name is not None:
        params["inflated_name"] = inflated_name
    if label_file is not None:
        params["label_file"] = label_file
    if orig_name is not None:
        params["orig_name"] = orig_name
    if overlay_values is not None:
        params["overlay_values"] = overlay_values
    if overlay_dir is not None:
        params["overlay_dir"] = overlay_dir
    if starting_reg_fname is not None:
        params["starting_reg_fname"] = starting_reg_fname
    if jacobian_fname is not None:
        params["jacobian_fname"] = jacobian_fname
    if n_averages is not None:
        params["n_averages"] = n_averages
    if l_area is not None:
        params["l_area"] = l_area
    if l_corr is not None:
        params["l_corr"] = l_corr
    if l_dist is not None:
        params["l_dist"] = l_dist
    if dt_value is not None:
        params["dt_value"] = dt_value
    if dt_decrease is not None:
        params["dt_decrease"] = dt_decrease
    if dt_increase is not None:
        params["dt_increase"] = dt_increase
    if l_external is not None:
        params["l_external"] = l_external
    if error_ratio is not None:
        params["error_ratio"] = error_ratio
    if l_laplacian is not None:
        params["l_laplacian"] = l_laplacian
    if momentum is not None:
        params["momentum"] = momentum
    if max_degrees is not None:
        params["max_degrees"] = max_degrees
    if min_degrees is not None:
        params["min_degrees"] = min_degrees
    if multi_scale is not None:
        params["multi_scale"] = multi_scale
    if n_iterations is not None:
        params["n_iterations"] = n_iterations
    if n_angles is not None:
        params["n_angles"] = n_angles
    if neighborhood_size is not None:
        params["neighborhood_size"] = neighborhood_size
    if l_nlarea is not None:
        params["l_nlarea"] = l_nlarea
    if num_surfaces is not None:
        params["num_surfaces"] = num_surfaces
    if overlay_corr is not None:
        params["overlay_corr"] = overlay_corr
    if max_passes is not None:
        params["max_passes"] = max_passes
    if l_parea is not None:
        params["l_parea"] = l_parea
    if remove_negative is not None:
        params["remove_negative"] = remove_negative
    if rotate_values is not None:
        params["rotate_values"] = rotate_values
    if registration_file is not None:
        params["registration_file"] = registration_file
    if scale is not None:
        params["scale"] = scale
    if spring_value is not None:
        params["spring_value"] = spring_value
    if tolerance is not None:
        params["tolerance"] = tolerance
    if vnum is not None:
        params["vnum"] = vnum
    if write_iterations is not None:
        params["write_iterations"] = write_iterations
    if gdiag_no is not None:
        params["gdiag_no"] = gdiag_no
    if threads is not None:
        params["threads"] = threads
    return params


def mris_register_cargs(
    params: MrisRegisterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_register")
    cargs.append(execution.input_file(params.get("surf_fname")))
    cargs.append(execution.input_file(params.get("target")))
    cargs.append(params.get("out_fname"))
    if params.get("one_flag"):
        cargs.append("-1")
    if params.get("addframe") is not None:
        cargs.extend([
            "-addframe",
            params.get("addframe")
        ])
    if params.get("annot_name") is not None:
        cargs.extend([
            "-annot",
            params.get("annot_name")
        ])
    if params.get("curvature_fname") is not None:
        cargs.extend([
            "-C",
            execution.input_file(params.get("curvature_fname"))
        ])
    if params.get("canonical_name") is not None:
        cargs.extend([
            "-canon",
            params.get("canonical_name")
        ])
    if params.get("inflated"):
        cargs.append("-inflated")
    if params.get("inflated_name") is not None:
        cargs.extend([
            "-infname",
            params.get("inflated_name")
        ])
    if params.get("label_file") is not None:
        cargs.extend([
            "-L",
            params.get("label_file")
        ])
    if params.get("orig_name") is not None:
        cargs.extend([
            "-O",
            params.get("orig_name")
        ])
    if params.get("overlay_values") is not None:
        cargs.extend([
            "-overlay",
            params.get("overlay_values")
        ])
    if params.get("overlay_dir") is not None:
        cargs.extend([
            "-overlay-dir",
            params.get("overlay_dir")
        ])
    if params.get("starting_reg_fname") is not None:
        cargs.extend([
            "-sreg",
            execution.input_file(params.get("starting_reg_fname"))
        ])
    if params.get("jacobian_fname") is not None:
        cargs.extend([
            "-jacobian",
            params.get("jacobian_fname")
        ])
    if params.get("n_averages") is not None:
        cargs.extend([
            "-A",
            str(params.get("n_averages"))
        ])
    if params.get("adaptive"):
        cargs.append("-adaptive")
    if params.get("l_area") is not None:
        cargs.extend([
            "-area",
            str(params.get("l_area"))
        ])
    if params.get("l_corr") is not None:
        cargs.extend([
            "-corr",
            str(params.get("l_corr"))
        ])
    if params.get("curvature_flag"):
        cargs.append("-curv")
    if params.get("l_dist") is not None:
        cargs.extend([
            "-dist",
            str(params.get("l_dist"))
        ])
    if params.get("dt_value") is not None:
        cargs.extend([
            "-dt",
            str(params.get("dt_value"))
        ])
    if params.get("dt_decrease") is not None:
        cargs.extend([
            "-dt_dec",
            str(params.get("dt_decrease"))
        ])
    if params.get("dt_increase") is not None:
        cargs.extend([
            "-dt_inc",
            str(params.get("dt_increase"))
        ])
    if params.get("l_external") is not None:
        cargs.extend([
            "-E",
            str(params.get("l_external"))
        ])
    if params.get("error_ratio") is not None:
        cargs.extend([
            "-error_ratio",
            str(params.get("error_ratio"))
        ])
    if params.get("initial_flag"):
        cargs.append("-init")
    if params.get("l_laplacian") is not None:
        cargs.extend([
            "-lap",
            str(params.get("l_laplacian"))
        ])
    if params.get("line_min"):
        cargs.append("-lm")
    if params.get("momentum") is not None:
        cargs.extend([
            "-M",
            str(params.get("momentum"))
        ])
    if params.get("max_degrees") is not None:
        cargs.extend([
            "-max_degrees",
            str(params.get("max_degrees"))
        ])
    if params.get("median"):
        cargs.append("-median")
    if params.get("min_degrees") is not None:
        cargs.extend([
            "-min_degrees",
            str(params.get("min_degrees"))
        ])
    if params.get("multi_scale") is not None:
        cargs.extend([
            "-multi_scale",
            str(params.get("multi_scale"))
        ])
    if params.get("n_iterations") is not None:
        cargs.extend([
            "-N",
            str(params.get("n_iterations"))
        ])
    if params.get("n_angles") is not None:
        cargs.extend([
            "-nangles",
            str(params.get("n_angles"))
        ])
    if params.get("neighborhood_size") is not None:
        cargs.extend([
            "-nbrs",
            str(params.get("neighborhood_size"))
        ])
    if params.get("l_nlarea") is not None:
        cargs.extend([
            "-nlarea",
            str(params.get("l_nlarea"))
        ])
    if params.get("no_curv"):
        cargs.append("-nocurv")
    if params.get("no_normalization"):
        cargs.append("-nonorm")
    if params.get("no_rotation"):
        cargs.append("-norot")
    if params.get("no_sulc"):
        cargs.append("-nosulc")
    if params.get("num_surfaces") is not None:
        cargs.extend([
            "-nsurfaces",
            str(params.get("num_surfaces"))
        ])
    if params.get("overlay_corr") is not None:
        cargs.extend([
            "-ocorr",
            str(params.get("overlay_corr"))
        ])
    if params.get("max_passes") is not None:
        cargs.extend([
            "-P",
            str(params.get("max_passes"))
        ])
    if params.get("l_parea") is not None:
        cargs.extend([
            "-parea",
            str(params.get("l_parea"))
        ])
    if params.get("remove_negative") is not None:
        cargs.extend([
            "-remove_negative",
            str(params.get("remove_negative"))
        ])
    if params.get("reverse"):
        cargs.append("-reverse")
    if params.get("rotate_values") is not None:
        cargs.extend([
            "-rotate",
            params.get("rotate_values")
        ])
    if params.get("registration_file") is not None:
        cargs.extend([
            "-reg",
            execution.input_file(params.get("registration_file"))
        ])
    if params.get("scale") is not None:
        cargs.extend([
            "-S",
            str(params.get("scale"))
        ])
    if params.get("search_flag"):
        cargs.append("-search")
    if params.get("spring_value") is not None:
        cargs.extend([
            "-spring",
            str(params.get("spring_value"))
        ])
    if params.get("tolerance") is not None:
        cargs.extend([
            "-tol",
            str(params.get("tolerance"))
        ])
    if params.get("topology_flag"):
        cargs.append("-topology")
    if params.get("vnum") is not None:
        cargs.extend([
            "-vnum",
            params.get("vnum")
        ])
    if params.get("vsmooth"):
        cargs.append("-vsmooth")
    if params.get("write_iterations") is not None:
        cargs.extend([
            "-W",
            str(params.get("write_iterations"))
        ])
    if params.get("gdiag_no") is not None:
        cargs.extend([
            "-V",
            str(params.get("gdiag_no"))
        ])
    if params.get("vector_flag"):
        cargs.append("-vector")
    if params.get("threads") is not None:
        cargs.extend([
            "-threads",
            str(params.get("threads"))
        ])
    if params.get("version_flag"):
        cargs.append("--version")
    return cargs


def mris_register_outputs(
    params: MrisRegisterParameters,
    execution: Execution,
) -> MrisRegisterOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisRegisterOutputs(
        root=execution.output_file("."),
        output_surface_file=execution.output_file(params.get("out_fname")),
        jacobian_output=execution.output_file(params.get("jacobian_fname")) if (params.get("jacobian_fname") is not None) else None,
    )
    return ret


def mris_register_execute(
    params: MrisRegisterParameters,
    execution: Execution,
) -> MrisRegisterOutputs:
    """
    This program registers a surface to an average surface template.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MrisRegisterOutputs`).
    """
    params = execution.params(params)
    cargs = mris_register_cargs(params, execution)
    ret = mris_register_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_register(
    surf_fname: InputPathType,
    target: InputPathType,
    out_fname: str,
    one_flag: bool = False,
    addframe: str | None = None,
    annot_name: str | None = None,
    curvature_fname: InputPathType | None = None,
    canonical_name: str | None = None,
    inflated: bool = False,
    inflated_name: str | None = None,
    label_file: str | None = None,
    orig_name: str | None = None,
    overlay_values: str | None = None,
    overlay_dir: str | None = None,
    starting_reg_fname: InputPathType | None = None,
    jacobian_fname: str | None = None,
    n_averages: float | None = None,
    adaptive: bool = False,
    l_area: float | None = None,
    l_corr: float | None = None,
    curvature_flag: bool = False,
    l_dist: float | None = None,
    dt_value: float | None = None,
    dt_decrease: float | None = None,
    dt_increase: float | None = None,
    l_external: float | None = None,
    error_ratio: float | None = None,
    initial_flag: bool = False,
    l_laplacian: float | None = None,
    line_min: bool = False,
    momentum: float | None = None,
    max_degrees: float | None = None,
    median: bool = False,
    min_degrees: float | None = None,
    multi_scale: float | None = None,
    n_iterations: float | None = None,
    n_angles: float | None = None,
    neighborhood_size: float | None = None,
    l_nlarea: float | None = None,
    no_curv: bool = False,
    no_normalization: bool = False,
    no_rotation: bool = False,
    no_sulc: bool = False,
    num_surfaces: float | None = None,
    overlay_corr: float | None = None,
    max_passes: float | None = None,
    l_parea: float | None = None,
    remove_negative: float | None = None,
    reverse: bool = False,
    rotate_values: str | None = None,
    registration_file: InputPathType | None = None,
    scale: float | None = None,
    search_flag: bool = False,
    spring_value: float | None = None,
    tolerance: float | None = None,
    topology_flag: bool = False,
    vnum: str | None = None,
    vsmooth: bool = False,
    write_iterations: float | None = None,
    gdiag_no: float | None = None,
    vector_flag: bool = False,
    threads: float | None = None,
    version_flag: bool = False,
    runner: Runner | None = None,
) -> MrisRegisterOutputs:
    """
    This program registers a surface to an average surface template.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        surf_fname: Surface to register, often {hemi}.sphere.
        target: The data to register to. A template file for average surface or\
            a single-subject's surface.
        out_fname: Output surface file to capture registration. Example:\
            {hemi}.sphere.reg.
        one_flag: Treats target argument as a single subject's surface not a\
            template file.
        addframe: Add field with location in the atlas.
        annot_name: Zeroes medial wall using annotation.
        curvature_fname: Curvature file name.
        canonical_name: Use surface for canonical properties.
        inflated: Use inflated surface for initial alignment.
        inflated_name: Uses this name for inflated surface for initial\
            alignment.
        label_file: Specify a manual label to align with atlas label.
        orig_name: Use this for original properties.
        overlay_values: Adds a variable to the atlas from overlay file,\
            smoothing it specified number of times.
        overlay_dir: Changes overlay path.
        starting_reg_fname: Start registration with coordinates from file.
        jacobian_fname: Write out jacobian of mapping to the specified file.
        n_averages: Set the number of averages.
        adaptive: Use adaptive time step integration.
        l_area: Sets l_area parameter.
        l_corr: Sets the l_corr parameter.
        curvature_flag: Use smoothwm curvature for final alignment.
        l_dist: Specify distance term.
        dt_value: Sets momentum with specified dt.
        dt_decrease: Set decrease for dt.
        dt_increase: Set increase for dt.
        l_external: Sets l_external parameter.
        error_ratio: Sets error ratio.
        initial_flag: Use initial registration.
        l_laplacian: Sets l_laplacian.
        line_min: Integrate using line minimization.
        momentum: Chooses integration_type = INTEGRATE_MOMENTUM and sets\
            momentum value.
        max_degrees: Set max angle for search.
        median: Uses median normalization (instead of mean).
        min_degrees: Set min angle for search.
        multi_scale: Use multi_scale scales for morphing.
        n_iterations: Sets number of iterations.
        n_angles: Set number of angles/search per scale.
        neighborhood_size: Use neighborhood size specified.
        l_nlarea: Sets l_nlarea parameter.
        no_curv: Do not use smoothwm curvature for final alignment.
        no_normalization: Disables normalization.
        no_rotation: Disables initial rigid alignment.
        no_sulc: Disables initial sulc alignment.
        num_surfaces: Use specified number of surfaces/curvatures for\
            alignment.
        overlay_corr: Sets overlay correlation coefficient.
        max_passes: Limit unfolding to specified passes.
        l_parea: Sets l_parea parameter.
        remove_negative: Remove negative triangles with iterative smoothing if\
            non-zero.
        reverse: Mirror image reverse brain before morphing.
        rotate_values: Rotates brain by specified angles.
        registration_file: Extract rotational components from registration\
            file.
        scale: Scales distances by the specified value.
        search_flag: Integrate with binary search line minimization.
        spring_value: Sets the spring parameter.
        tolerance: Specifies tolerance.
        topology_flag: Preserves the topology of positive area triangles.
        vnum: Set neighborhood parameters.
        vsmooth: Use space/time varying smoothness weighting.
        write_iterations: Set number of write iterations.
        gdiag_no: Supplies a vertex number for diagnostics.
        vector_flag: Prints help for Multiframe mode, listing field names and\
            numbers.
        threads: Set number of OMP threads.
        version_flag: Print the version number.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisRegisterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_REGISTER_METADATA)
    params = mris_register_params(
        surf_fname=surf_fname,
        target=target,
        out_fname=out_fname,
        one_flag=one_flag,
        addframe=addframe,
        annot_name=annot_name,
        curvature_fname=curvature_fname,
        canonical_name=canonical_name,
        inflated=inflated,
        inflated_name=inflated_name,
        label_file=label_file,
        orig_name=orig_name,
        overlay_values=overlay_values,
        overlay_dir=overlay_dir,
        starting_reg_fname=starting_reg_fname,
        jacobian_fname=jacobian_fname,
        n_averages=n_averages,
        adaptive=adaptive,
        l_area=l_area,
        l_corr=l_corr,
        curvature_flag=curvature_flag,
        l_dist=l_dist,
        dt_value=dt_value,
        dt_decrease=dt_decrease,
        dt_increase=dt_increase,
        l_external=l_external,
        error_ratio=error_ratio,
        initial_flag=initial_flag,
        l_laplacian=l_laplacian,
        line_min=line_min,
        momentum=momentum,
        max_degrees=max_degrees,
        median=median,
        min_degrees=min_degrees,
        multi_scale=multi_scale,
        n_iterations=n_iterations,
        n_angles=n_angles,
        neighborhood_size=neighborhood_size,
        l_nlarea=l_nlarea,
        no_curv=no_curv,
        no_normalization=no_normalization,
        no_rotation=no_rotation,
        no_sulc=no_sulc,
        num_surfaces=num_surfaces,
        overlay_corr=overlay_corr,
        max_passes=max_passes,
        l_parea=l_parea,
        remove_negative=remove_negative,
        reverse=reverse,
        rotate_values=rotate_values,
        registration_file=registration_file,
        scale=scale,
        search_flag=search_flag,
        spring_value=spring_value,
        tolerance=tolerance,
        topology_flag=topology_flag,
        vnum=vnum,
        vsmooth=vsmooth,
        write_iterations=write_iterations,
        gdiag_no=gdiag_no,
        vector_flag=vector_flag,
        threads=threads,
        version_flag=version_flag,
    )
    return mris_register_execute(params, execution)


__all__ = [
    "MRIS_REGISTER_METADATA",
    "MrisRegisterOutputs",
    "MrisRegisterParameters",
    "mris_register",
    "mris_register_params",
]
