# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_LINEAR_ALIGN_BINARY_METADATA = Metadata(
    id="8f952429c373760f2ebf14b9f290bc6f0c53127a.boutiques",
    name="mri_linear_align_binary",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriLinearAlignBinaryParameters = typing.TypedDict('MriLinearAlignBinaryParameters', {
    "__STYX_TYPE__": typing.Literal["mri_linear_align_binary"],
    "source": InputPathType,
    "target": InputPathType,
    "output_xform": str,
    "target_label": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_linear_align_binary": mri_linear_align_binary_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_linear_align_binary": mri_linear_align_binary_outputs,
    }.get(t)


class MriLinearAlignBinaryOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_linear_align_binary(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_xform_file: OutputPathType
    """The output transformation file"""


def mri_linear_align_binary_params(
    source: InputPathType,
    target: InputPathType,
    output_xform: str,
    target_label: str | None = None,
) -> MriLinearAlignBinaryParameters:
    """
    Build parameters.
    
    Args:
        source: Source image file.
        target: Target image file.
        output_xform: Output transformation file.
        target_label: Target label, assume source is high-resolution\
            hippocampal labeling.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_linear_align_binary",
        "source": source,
        "target": target,
        "output_xform": output_xform,
    }
    if target_label is not None:
        params["target_label"] = target_label
    return params


def mri_linear_align_binary_cargs(
    params: MriLinearAlignBinaryParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_linear_align_binary")
    cargs.append(execution.input_file(params.get("source")))
    cargs.append(execution.input_file(params.get("target")))
    cargs.append(params.get("output_xform"))
    if params.get("target_label") is not None:
        cargs.extend([
            "-h",
            params.get("target_label")
        ])
    return cargs


def mri_linear_align_binary_outputs(
    params: MriLinearAlignBinaryParameters,
    execution: Execution,
) -> MriLinearAlignBinaryOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriLinearAlignBinaryOutputs(
        root=execution.output_file("."),
        output_xform_file=execution.output_file(params.get("output_xform")),
    )
    return ret


def mri_linear_align_binary_execute(
    params: MriLinearAlignBinaryParameters,
    execution: Execution,
) -> MriLinearAlignBinaryOutputs:
    """
    A tool for linear alignment of MRI images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriLinearAlignBinaryOutputs`).
    """
    params = execution.params(params)
    cargs = mri_linear_align_binary_cargs(params, execution)
    ret = mri_linear_align_binary_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_linear_align_binary(
    source: InputPathType,
    target: InputPathType,
    output_xform: str,
    target_label: str | None = None,
    runner: Runner | None = None,
) -> MriLinearAlignBinaryOutputs:
    """
    A tool for linear alignment of MRI images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        source: Source image file.
        target: Target image file.
        output_xform: Output transformation file.
        target_label: Target label, assume source is high-resolution\
            hippocampal labeling.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLinearAlignBinaryOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_LINEAR_ALIGN_BINARY_METADATA)
    params = mri_linear_align_binary_params(
        source=source,
        target=target,
        output_xform=output_xform,
        target_label=target_label,
    )
    return mri_linear_align_binary_execute(params, execution)


__all__ = [
    "MRI_LINEAR_ALIGN_BINARY_METADATA",
    "MriLinearAlignBinaryOutputs",
    "MriLinearAlignBinaryParameters",
    "mri_linear_align_binary",
    "mri_linear_align_binary_params",
]
