# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

NMOVIE_QT_METADATA = Metadata(
    id="40a52c883b6ef1eabbaca98341ef5cfeff36ee79.boutiques",
    name="nmovie_qt",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


NmovieQtParameters = typing.TypedDict('NmovieQtParameters', {
    "__STYX_TYPE__": typing.Literal["nmovie_qt"],
    "images": list[InputPathType],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "nmovie_qt": nmovie_qt_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class NmovieQtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `nmovie_qt(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def nmovie_qt_params(
    images: list[InputPathType],
) -> NmovieQtParameters:
    """
    Build parameters.
    
    Args:
        images: Input image files to be displayed. Multiple files can be\
            provided.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "nmovie_qt",
        "images": images,
    }
    return params


def nmovie_qt_cargs(
    params: NmovieQtParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("nmovie_qt")
    cargs.extend([execution.input_file(f) for f in params.get("images")])
    return cargs


def nmovie_qt_outputs(
    params: NmovieQtParameters,
    execution: Execution,
) -> NmovieQtOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = NmovieQtOutputs(
        root=execution.output_file("."),
    )
    return ret


def nmovie_qt_execute(
    params: NmovieQtParameters,
    execution: Execution,
) -> NmovieQtOutputs:
    """
    An image viewer using Qt for displaying images in sequence.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `NmovieQtOutputs`).
    """
    params = execution.params(params)
    cargs = nmovie_qt_cargs(params, execution)
    ret = nmovie_qt_outputs(params, execution)
    execution.run(cargs)
    return ret


def nmovie_qt(
    images: list[InputPathType],
    runner: Runner | None = None,
) -> NmovieQtOutputs:
    """
    An image viewer using Qt for displaying images in sequence.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        images: Input image files to be displayed. Multiple files can be\
            provided.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `NmovieQtOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(NMOVIE_QT_METADATA)
    params = nmovie_qt_params(
        images=images,
    )
    return nmovie_qt_execute(params, execution)


__all__ = [
    "NMOVIE_QT_METADATA",
    "NmovieQtOutputs",
    "NmovieQtParameters",
    "nmovie_qt",
    "nmovie_qt_params",
]
