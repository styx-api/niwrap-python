# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSFIRST_FSL_METADATA = Metadata(
    id="fe4368d67f0bf44514ba8d3556dd0dd0df276d60.boutiques",
    name="fsfirst.fsl",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsfirstFslParameters = typing.TypedDict('FsfirstFslParameters', {
    "__STYX_TYPE__": typing.Literal["fsfirst.fsl"],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fsfirst.fsl": fsfirst_fsl_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class FsfirstFslOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fsfirst_fsl(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fsfirst_fsl_params(
) -> FsfirstFslParameters:
    """
    Build parameters.
    
    Args:
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fsfirst.fsl",
    }
    return params


def fsfirst_fsl_cargs(
    params: FsfirstFslParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fsfirst.fsl")
    return cargs


def fsfirst_fsl_outputs(
    params: FsfirstFslParameters,
    execution: Execution,
) -> FsfirstFslOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsfirstFslOutputs(
        root=execution.output_file("."),
    )
    return ret


def fsfirst_fsl_execute(
    params: FsfirstFslParameters,
    execution: Execution,
) -> FsfirstFslOutputs:
    """
    The tool intended for FSL's FIRST module, responsible for model-based
    segmentation and registration of subcortical structures.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FsfirstFslOutputs`).
    """
    params = execution.params(params)
    cargs = fsfirst_fsl_cargs(params, execution)
    ret = fsfirst_fsl_outputs(params, execution)
    execution.run(cargs)
    return ret


def fsfirst_fsl(
    runner: Runner | None = None,
) -> FsfirstFslOutputs:
    """
    The tool intended for FSL's FIRST module, responsible for model-based
    segmentation and registration of subcortical structures.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsfirstFslOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSFIRST_FSL_METADATA)
    params = fsfirst_fsl_params(
    )
    return fsfirst_fsl_execute(params, execution)


__all__ = [
    "FSFIRST_FSL_METADATA",
    "FsfirstFslOutputs",
    "FsfirstFslParameters",
    "fsfirst_fsl",
    "fsfirst_fsl_params",
]
