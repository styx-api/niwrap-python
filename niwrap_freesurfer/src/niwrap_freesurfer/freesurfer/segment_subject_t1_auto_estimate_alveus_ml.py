# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEGMENT_SUBJECT_T1_AUTO_ESTIMATE_ALVEUS_ML_METADATA = Metadata(
    id="43b0001ab86e4ffd97c64d3a223a099dafddc2e9.boutiques",
    name="segmentSubjectT1_autoEstimateAlveusML",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SegmentSubjectT1AutoEstimateAlveusMlParameters = typing.TypedDict('SegmentSubjectT1AutoEstimateAlveusMlParameters', {
    "__STYX_TYPE__": typing.Literal["segmentSubjectT1_autoEstimateAlveusML"],
    "t1_file": InputPathType,
    "output_folder": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "segmentSubjectT1_autoEstimateAlveusML": segment_subject_t1_auto_estimate_alveus_ml_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "segmentSubjectT1_autoEstimateAlveusML": segment_subject_t1_auto_estimate_alveus_ml_outputs,
    }.get(t)


class SegmentSubjectT1AutoEstimateAlveusMlOutputs(typing.NamedTuple):
    """
    Output object returned when calling `segment_subject_t1_auto_estimate_alveus_ml(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    segmentation_output: OutputPathType
    """The file containing segmented MRI data."""


def segment_subject_t1_auto_estimate_alveus_ml_params(
    t1_file: InputPathType,
    output_folder: str,
) -> SegmentSubjectT1AutoEstimateAlveusMlParameters:
    """
    Build parameters.
    
    Args:
        t1_file: Input T1-weighted MRI file to be segmented.
        output_folder: Path to the folder where the outputs will be saved.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "segmentSubjectT1_autoEstimateAlveusML",
        "t1_file": t1_file,
        "output_folder": output_folder,
    }
    return params


def segment_subject_t1_auto_estimate_alveus_ml_cargs(
    params: SegmentSubjectT1AutoEstimateAlveusMlParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("segmentSubjectT1_autoEstimateAlveusML")
    cargs.append(execution.input_file(params.get("t1_file")))
    cargs.append(params.get("output_folder"))
    return cargs


def segment_subject_t1_auto_estimate_alveus_ml_outputs(
    params: SegmentSubjectT1AutoEstimateAlveusMlParameters,
    execution: Execution,
) -> SegmentSubjectT1AutoEstimateAlveusMlOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SegmentSubjectT1AutoEstimateAlveusMlOutputs(
        root=execution.output_file("."),
        segmentation_output=execution.output_file(params.get("output_folder") + "/segmented_output.nii.gz"),
    )
    return ret


def segment_subject_t1_auto_estimate_alveus_ml_execute(
    params: SegmentSubjectT1AutoEstimateAlveusMlParameters,
    execution: Execution,
) -> SegmentSubjectT1AutoEstimateAlveusMlOutputs:
    """
    A tool that segments T1-weighted MRI data and automatically estimates the
    Alveus.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `SegmentSubjectT1AutoEstimateAlveusMlOutputs`).
    """
    params = execution.params(params)
    cargs = segment_subject_t1_auto_estimate_alveus_ml_cargs(params, execution)
    ret = segment_subject_t1_auto_estimate_alveus_ml_outputs(params, execution)
    execution.run(cargs)
    return ret


def segment_subject_t1_auto_estimate_alveus_ml(
    t1_file: InputPathType,
    output_folder: str,
    runner: Runner | None = None,
) -> SegmentSubjectT1AutoEstimateAlveusMlOutputs:
    """
    A tool that segments T1-weighted MRI data and automatically estimates the
    Alveus.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        t1_file: Input T1-weighted MRI file to be segmented.
        output_folder: Path to the folder where the outputs will be saved.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentSubjectT1AutoEstimateAlveusMlOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEGMENT_SUBJECT_T1_AUTO_ESTIMATE_ALVEUS_ML_METADATA)
    params = segment_subject_t1_auto_estimate_alveus_ml_params(
        t1_file=t1_file,
        output_folder=output_folder,
    )
    return segment_subject_t1_auto_estimate_alveus_ml_execute(params, execution)


__all__ = [
    "SEGMENT_SUBJECT_T1_AUTO_ESTIMATE_ALVEUS_ML_METADATA",
    "SegmentSubjectT1AutoEstimateAlveusMlOutputs",
    "SegmentSubjectT1AutoEstimateAlveusMlParameters",
    "segment_subject_t1_auto_estimate_alveus_ml",
    "segment_subject_t1_auto_estimate_alveus_ml_params",
]
