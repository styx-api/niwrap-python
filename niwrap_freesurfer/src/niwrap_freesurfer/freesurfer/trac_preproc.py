# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TRAC_PREPROC_METADATA = Metadata(
    id="5854dffca5b99ca0a5c033e626a1874da235aa39.boutiques",
    name="trac-preproc",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


TracPreprocParameters = typing.TypedDict('TracPreprocParameters', {
    "__STYX_TYPE__": typing.Literal["trac-preproc"],
    "dmrirc_file": InputPathType,
    "log_file": typing.NotRequired[str | None],
    "nolog": bool,
    "cmd_file": typing.NotRequired[str | None],
    "nocmd": bool,
    "no_isrunning": bool,
    "umask": typing.NotRequired[str | None],
    "group_id": typing.NotRequired[str | None],
    "allow_core_dump": bool,
    "debug": bool,
    "dontrun": bool,
    "version": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "trac-preproc": trac_preproc_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class TracPreprocOutputs(typing.NamedTuple):
    """
    Output object returned when calling `trac_preproc(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def trac_preproc_params(
    dmrirc_file: InputPathType,
    log_file: str | None = None,
    nolog: bool = False,
    cmd_file: str | None = None,
    nocmd: bool = False,
    no_isrunning: bool = False,
    umask: str | None = None,
    group_id: str | None = None,
    allow_core_dump: bool = False,
    debug: bool = False,
    dontrun: bool = False,
    version: bool = False,
) -> TracPreprocParameters:
    """
    Build parameters.
    
    Args:
        dmrirc_file: dmrirc file (see dmrirc.example).
        log_file: Log file; default is trac-all.log in the same dir as dmrirc.
        nolog: Do not save a log file.
        cmd_file: Cmd file; default is trac-all.cmd in the same dir as dmrirc.
        nocmd: Do not save a cmd file.
        no_isrunning: Do not check whether this subject is currently being\
            processed.
        umask: Set unix file permission mask (default 002).
        group_id: Check that current group is alpha groupid.
        allow_core_dump: Set coredump limit to unlimited.
        debug: Generate much more output.
        dontrun: Do everything but execute each command.
        version: Print version of this script and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "trac-preproc",
        "dmrirc_file": dmrirc_file,
        "nolog": nolog,
        "nocmd": nocmd,
        "no_isrunning": no_isrunning,
        "allow_core_dump": allow_core_dump,
        "debug": debug,
        "dontrun": dontrun,
        "version": version,
    }
    if log_file is not None:
        params["log_file"] = log_file
    if cmd_file is not None:
        params["cmd_file"] = cmd_file
    if umask is not None:
        params["umask"] = umask
    if group_id is not None:
        params["group_id"] = group_id
    return params


def trac_preproc_cargs(
    params: TracPreprocParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("trac-preproc")
    cargs.extend([
        "-c",
        execution.input_file(params.get("dmrirc_file"))
    ])
    if params.get("log_file") is not None:
        cargs.extend([
            "-log",
            params.get("log_file")
        ])
    if params.get("nolog"):
        cargs.append("-nolog")
    if params.get("cmd_file") is not None:
        cargs.extend([
            "-cmd",
            params.get("cmd_file")
        ])
    if params.get("nocmd"):
        cargs.append("-nocmd")
    if params.get("no_isrunning"):
        cargs.append("-no-isrunning")
    if params.get("umask") is not None:
        cargs.extend([
            "-umask",
            params.get("umask")
        ])
    if params.get("group_id") is not None:
        cargs.extend([
            "-grp",
            params.get("group_id")
        ])
    if params.get("allow_core_dump"):
        cargs.append("-allowcoredump")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("dontrun"):
        cargs.append("-dontrun")
    if params.get("version"):
        cargs.append("-version")
    return cargs


def trac_preproc_outputs(
    params: TracPreprocParameters,
    execution: Execution,
) -> TracPreprocOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TracPreprocOutputs(
        root=execution.output_file("."),
    )
    return ret


def trac_preproc_execute(
    params: TracPreprocParameters,
    execution: Execution,
) -> TracPreprocOutputs:
    """
    Tractography pre-processing for a single subject.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `TracPreprocOutputs`).
    """
    params = execution.params(params)
    cargs = trac_preproc_cargs(params, execution)
    ret = trac_preproc_outputs(params, execution)
    execution.run(cargs)
    return ret


def trac_preproc(
    dmrirc_file: InputPathType,
    log_file: str | None = None,
    nolog: bool = False,
    cmd_file: str | None = None,
    nocmd: bool = False,
    no_isrunning: bool = False,
    umask: str | None = None,
    group_id: str | None = None,
    allow_core_dump: bool = False,
    debug: bool = False,
    dontrun: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> TracPreprocOutputs:
    """
    Tractography pre-processing for a single subject.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        dmrirc_file: dmrirc file (see dmrirc.example).
        log_file: Log file; default is trac-all.log in the same dir as dmrirc.
        nolog: Do not save a log file.
        cmd_file: Cmd file; default is trac-all.cmd in the same dir as dmrirc.
        nocmd: Do not save a cmd file.
        no_isrunning: Do not check whether this subject is currently being\
            processed.
        umask: Set unix file permission mask (default 002).
        group_id: Check that current group is alpha groupid.
        allow_core_dump: Set coredump limit to unlimited.
        debug: Generate much more output.
        dontrun: Do everything but execute each command.
        version: Print version of this script and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TracPreprocOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TRAC_PREPROC_METADATA)
    params = trac_preproc_params(
        dmrirc_file=dmrirc_file,
        log_file=log_file,
        nolog=nolog,
        cmd_file=cmd_file,
        nocmd=nocmd,
        no_isrunning=no_isrunning,
        umask=umask,
        group_id=group_id,
        allow_core_dump=allow_core_dump,
        debug=debug,
        dontrun=dontrun,
        version=version,
    )
    return trac_preproc_execute(params, execution)


__all__ = [
    "TRAC_PREPROC_METADATA",
    "TracPreprocOutputs",
    "TracPreprocParameters",
    "trac_preproc",
    "trac_preproc_params",
]
