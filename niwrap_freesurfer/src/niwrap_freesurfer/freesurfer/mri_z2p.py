# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_Z2P_METADATA = Metadata(
    id="993304b1f6f275d376d70048d9e4d541fe6daff2.boutiques",
    name="mri_z2p",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriZ2pParameters = typing.TypedDict('MriZ2pParameters', {
    "__STYX_TYPE__": typing.Literal["mri_z2p"],
    "z_volume": InputPathType,
    "p_volume": str,
    "sig_volume": str,
    "mask_volume": typing.NotRequired[InputPathType | None],
    "two_sided": bool,
    "one_sided": bool,
    "signed": bool,
    "feat": typing.NotRequired[str | None],
    "feat_format": typing.NotRequired[str | None],
    "img_format": bool,
    "debug": bool,
    "check_opts": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_z2p": mri_z2p_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_z2p": mri_z2p_outputs,
    }.get(t)


class MriZ2pOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_z2p(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_p_volume: OutputPathType
    """Output P volume file."""
    output_sig_volume: OutputPathType
    """Output significance volume file."""


def mri_z2p_params(
    z_volume: InputPathType,
    p_volume: str,
    sig_volume: str,
    mask_volume: InputPathType | None = None,
    two_sided: bool = False,
    one_sided: bool = False,
    signed: bool = False,
    feat: str | None = None,
    feat_format: str | None = None,
    img_format: bool = False,
    debug: bool = False,
    check_opts: bool = False,
) -> MriZ2pParameters:
    """
    Build parameters.
    
    Args:
        z_volume: Z volume file.
        p_volume: P volume file.
        sig_volume: Significance volume file.
        mask_volume: Mask volume file.
        two_sided: Assume a two-sided, unsigned test (keeps sign of input).
        one_sided: Assume a one-sided, signed test.
        signed: Two-sided/signed p-value (p = 2*(1-p)).
        feat: Convert all z-stats and zf-stats to sigs in the specified\
            directory.
        feat_format: Use specified format for output (e.g., nii, nii.gz, mgh).
        img_format: Use Analyze output format.
        debug: Turn on debugging.
        check_opts: Don't run anything, just check options and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_z2p",
        "z_volume": z_volume,
        "p_volume": p_volume,
        "sig_volume": sig_volume,
        "two_sided": two_sided,
        "one_sided": one_sided,
        "signed": signed,
        "img_format": img_format,
        "debug": debug,
        "check_opts": check_opts,
    }
    if mask_volume is not None:
        params["mask_volume"] = mask_volume
    if feat is not None:
        params["feat"] = feat
    if feat_format is not None:
        params["feat_format"] = feat_format
    return params


def mri_z2p_cargs(
    params: MriZ2pParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_z2p")
    cargs.extend([
        "--z",
        execution.input_file(params.get("z_volume"))
    ])
    cargs.extend([
        "--p",
        params.get("p_volume")
    ])
    cargs.extend([
        "--log10p",
        params.get("sig_volume")
    ])
    if params.get("mask_volume") is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask_volume"))
        ])
    if params.get("two_sided"):
        cargs.append("--two-sided")
    if params.get("one_sided"):
        cargs.append("--one-sided")
    if params.get("signed"):
        cargs.append("--signed")
    if params.get("feat") is not None:
        cargs.extend([
            "--feat",
            params.get("feat")
        ])
    if params.get("feat_format") is not None:
        cargs.extend([
            "--featfmt",
            params.get("feat_format")
        ])
    if params.get("img_format"):
        cargs.append("--img")
    if params.get("debug"):
        cargs.append("--debug")
    if params.get("check_opts"):
        cargs.append("--checkopts")
    return cargs


def mri_z2p_outputs(
    params: MriZ2pParameters,
    execution: Execution,
) -> MriZ2pOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriZ2pOutputs(
        root=execution.output_file("."),
        output_p_volume=execution.output_file(params.get("p_volume")),
        output_sig_volume=execution.output_file(params.get("sig_volume")),
    )
    return ret


def mri_z2p_execute(
    params: MriZ2pParameters,
    execution: Execution,
) -> MriZ2pOutputs:
    """
    Converts Z-statistic volumes to P-value volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriZ2pOutputs`).
    """
    params = execution.params(params)
    cargs = mri_z2p_cargs(params, execution)
    ret = mri_z2p_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_z2p(
    z_volume: InputPathType,
    p_volume: str,
    sig_volume: str,
    mask_volume: InputPathType | None = None,
    two_sided: bool = False,
    one_sided: bool = False,
    signed: bool = False,
    feat: str | None = None,
    feat_format: str | None = None,
    img_format: bool = False,
    debug: bool = False,
    check_opts: bool = False,
    runner: Runner | None = None,
) -> MriZ2pOutputs:
    """
    Converts Z-statistic volumes to P-value volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        z_volume: Z volume file.
        p_volume: P volume file.
        sig_volume: Significance volume file.
        mask_volume: Mask volume file.
        two_sided: Assume a two-sided, unsigned test (keeps sign of input).
        one_sided: Assume a one-sided, signed test.
        signed: Two-sided/signed p-value (p = 2*(1-p)).
        feat: Convert all z-stats and zf-stats to sigs in the specified\
            directory.
        feat_format: Use specified format for output (e.g., nii, nii.gz, mgh).
        img_format: Use Analyze output format.
        debug: Turn on debugging.
        check_opts: Don't run anything, just check options and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriZ2pOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_Z2P_METADATA)
    params = mri_z2p_params(
        z_volume=z_volume,
        p_volume=p_volume,
        sig_volume=sig_volume,
        mask_volume=mask_volume,
        two_sided=two_sided,
        one_sided=one_sided,
        signed=signed,
        feat=feat,
        feat_format=feat_format,
        img_format=img_format,
        debug=debug,
        check_opts=check_opts,
    )
    return mri_z2p_execute(params, execution)


__all__ = [
    "MRI_Z2P_METADATA",
    "MriZ2pOutputs",
    "MriZ2pParameters",
    "mri_z2p",
    "mri_z2p_params",
]
