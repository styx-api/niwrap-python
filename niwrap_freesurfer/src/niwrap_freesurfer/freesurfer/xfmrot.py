# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

XFMROT_METADATA = Metadata(
    id="e68f95765471172c3f4d5eecbc6fc6f118b60ba7.boutiques",
    name="xfmrot",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


XfmrotParameters = typing.TypedDict('XfmrotParameters', {
    "__STYX_TYPE__": typing.Literal["xfmrot"],
    "transform_file": InputPathType,
    "input_vector_file": InputPathType,
    "output_vector_file": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "xfmrot": xfmrot_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "xfmrot": xfmrot_outputs,
    }.get(t)


class XfmrotOutputs(typing.NamedTuple):
    """
    Output object returned when calling `xfmrot(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    transformed_vector: OutputPathType | None
    """The transformed output vector file with the same format as input."""


def xfmrot_params(
    transform_file: InputPathType,
    input_vector_file: InputPathType,
    output_vector_file: str | None = None,
) -> XfmrotParameters:
    """
    Build parameters.
    
    Args:
        transform_file: Transform file, can be an eddy_correct/eddy log file or\
            a .mat file.
        input_vector_file: Input vector file which can be formatted in 3 rows\
            or 3 columns.
        output_vector_file: Output vector file will have the same format as\
            input.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "xfmrot",
        "transform_file": transform_file,
        "input_vector_file": input_vector_file,
    }
    if output_vector_file is not None:
        params["output_vector_file"] = output_vector_file
    return params


def xfmrot_cargs(
    params: XfmrotParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("xfmrot")
    cargs.append(execution.input_file(params.get("transform_file")))
    cargs.append(execution.input_file(params.get("input_vector_file")))
    if params.get("output_vector_file") is not None:
        cargs.append(params.get("output_vector_file"))
    return cargs


def xfmrot_outputs(
    params: XfmrotParameters,
    execution: Execution,
) -> XfmrotOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = XfmrotOutputs(
        root=execution.output_file("."),
        transformed_vector=execution.output_file(params.get("output_vector_file")) if (params.get("output_vector_file") is not None) else None,
    )
    return ret


def xfmrot_execute(
    params: XfmrotParameters,
    execution: Execution,
) -> XfmrotOutputs:
    """
    Tool to apply a transformation defined in a transform file to an input vector
    file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `XfmrotOutputs`).
    """
    params = execution.params(params)
    cargs = xfmrot_cargs(params, execution)
    ret = xfmrot_outputs(params, execution)
    execution.run(cargs)
    return ret


def xfmrot(
    transform_file: InputPathType,
    input_vector_file: InputPathType,
    output_vector_file: str | None = None,
    runner: Runner | None = None,
) -> XfmrotOutputs:
    """
    Tool to apply a transformation defined in a transform file to an input vector
    file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        transform_file: Transform file, can be an eddy_correct/eddy log file or\
            a .mat file.
        input_vector_file: Input vector file which can be formatted in 3 rows\
            or 3 columns.
        output_vector_file: Output vector file will have the same format as\
            input.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XfmrotOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(XFMROT_METADATA)
    params = xfmrot_params(
        transform_file=transform_file,
        input_vector_file=input_vector_file,
        output_vector_file=output_vector_file,
    )
    return xfmrot_execute(params, execution)


__all__ = [
    "XFMROT_METADATA",
    "XfmrotOutputs",
    "XfmrotParameters",
    "xfmrot",
    "xfmrot_params",
]
