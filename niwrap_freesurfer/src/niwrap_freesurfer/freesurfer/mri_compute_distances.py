# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_COMPUTE_DISTANCES_METADATA = Metadata(
    id="eb2a170cca460d6725165d5ac72cc0e8e165909c.boutiques",
    name="mri_compute_distances",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriComputeDistancesParameters = typing.TypedDict('MriComputeDistancesParameters', {
    "__STYX_TYPE__": typing.Literal["mri_compute_distances"],
    "source": InputPathType,
    "target": InputPathType,
    "output_xform": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_compute_distances": mri_compute_distances_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_compute_distances": mri_compute_distances_outputs,
    }.get(t)


class MriComputeDistancesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_compute_distances(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_xform_file: OutputPathType
    """Output transformation file"""


def mri_compute_distances_params(
    source: InputPathType,
    target: InputPathType,
    output_xform: str,
) -> MriComputeDistancesParameters:
    """
    Build parameters.
    
    Args:
        source: Input source image file.
        target: Input target image file.
        output_xform: Output transformation file containing the computed\
            distances.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_compute_distances",
        "source": source,
        "target": target,
        "output_xform": output_xform,
    }
    return params


def mri_compute_distances_cargs(
    params: MriComputeDistancesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_compute_distances")
    cargs.append(execution.input_file(params.get("source")))
    cargs.append(execution.input_file(params.get("target")))
    cargs.append(params.get("output_xform"))
    return cargs


def mri_compute_distances_outputs(
    params: MriComputeDistancesParameters,
    execution: Execution,
) -> MriComputeDistancesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriComputeDistancesOutputs(
        root=execution.output_file("."),
        output_xform_file=execution.output_file(params.get("output_xform")),
    )
    return ret


def mri_compute_distances_execute(
    params: MriComputeDistancesParameters,
    execution: Execution,
) -> MriComputeDistancesOutputs:
    """
    A tool to compute distances between source and target images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriComputeDistancesOutputs`).
    """
    params = execution.params(params)
    cargs = mri_compute_distances_cargs(params, execution)
    ret = mri_compute_distances_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_compute_distances(
    source: InputPathType,
    target: InputPathType,
    output_xform: str,
    runner: Runner | None = None,
) -> MriComputeDistancesOutputs:
    """
    A tool to compute distances between source and target images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        source: Input source image file.
        target: Input target image file.
        output_xform: Output transformation file containing the computed\
            distances.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriComputeDistancesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_COMPUTE_DISTANCES_METADATA)
    params = mri_compute_distances_params(
        source=source,
        target=target,
        output_xform=output_xform,
    )
    return mri_compute_distances_execute(params, execution)


__all__ = [
    "MRI_COMPUTE_DISTANCES_METADATA",
    "MriComputeDistancesOutputs",
    "MriComputeDistancesParameters",
    "mri_compute_distances",
    "mri_compute_distances_params",
]
