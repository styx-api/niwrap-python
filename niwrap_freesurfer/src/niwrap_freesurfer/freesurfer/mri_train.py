# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_TRAIN_METADATA = Metadata(
    id="18e33eff7b8f70bf5d7c40cd7762266812d2728b.boutiques",
    name="mri_train",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriTrainParameters = typing.TypedDict('MriTrainParameters', {
    "__STYX_TYPE__": typing.Literal["mri_train"],
    "training_file": InputPathType,
    "output_file": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_train": mri_train_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_train": mri_train_outputs,
    }.get(t)


class MriTrainOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_train(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file_generated: OutputPathType
    """Output file generated by mri_train."""


def mri_train_params(
    training_file: InputPathType,
    output_file: str,
) -> MriTrainParameters:
    """
    Build parameters.
    
    Args:
        training_file: Input training file name.
        output_file: Output file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_train",
        "training_file": training_file,
        "output_file": output_file,
    }
    return params


def mri_train_cargs(
    params: MriTrainParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_train")
    cargs.append(execution.input_file(params.get("training_file")))
    cargs.append(params.get("output_file"))
    return cargs


def mri_train_outputs(
    params: MriTrainParameters,
    execution: Execution,
) -> MriTrainOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriTrainOutputs(
        root=execution.output_file("."),
        output_file_generated=execution.output_file(params.get("output_file")),
    )
    return ret


def mri_train_execute(
    params: MriTrainParameters,
    execution: Execution,
) -> MriTrainOutputs:
    """
    Tool for training with MRI data in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriTrainOutputs`).
    """
    params = execution.params(params)
    cargs = mri_train_cargs(params, execution)
    ret = mri_train_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_train(
    training_file: InputPathType,
    output_file: str,
    runner: Runner | None = None,
) -> MriTrainOutputs:
    """
    Tool for training with MRI data in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        training_file: Input training file name.
        output_file: Output file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriTrainOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_TRAIN_METADATA)
    params = mri_train_params(
        training_file=training_file,
        output_file=output_file,
    )
    return mri_train_execute(params, execution)


__all__ = [
    "MRI_TRAIN_METADATA",
    "MriTrainOutputs",
    "MriTrainParameters",
    "mri_train",
    "mri_train_params",
]
