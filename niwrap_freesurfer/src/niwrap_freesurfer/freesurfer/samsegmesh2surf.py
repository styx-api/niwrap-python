# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SAMSEGMESH2SURF_METADATA = Metadata(
    id="d985be1373714eb0aff1a308730598604fe9d68c.boutiques",
    name="samsegmesh2surf",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Samsegmesh2surfParameters = typing.TypedDict('Samsegmesh2surfParameters', {
    "__STYX_TYPE__": typing.Literal["samsegmesh2surf"],
    "atlas_mesh": InputPathType,
    "template": typing.NotRequired[InputPathType | None],
    "lta_transform": typing.NotRequired[InputPathType | None],
    "output_surface": typing.NotRequired[str | None],
    "output_priors": typing.NotRequired[str | None],
    "invert_flag": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "samsegmesh2surf": samsegmesh2surf_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "samsegmesh2surf": samsegmesh2surf_outputs,
    }.get(t)


class Samsegmesh2surfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `samsegmesh2surf(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface_file: OutputPathType | None
    """FreeSurfer surface file generated from SAMSEG atlas mesh"""
    output_priors_file: OutputPathType | None
    """Priors MRI volume at each vertex"""


def samsegmesh2surf_params(
    atlas_mesh: InputPathType,
    template: InputPathType | None = None,
    lta_transform: InputPathType | None = None,
    output_surface: str | None = None,
    output_priors: str | None = None,
    invert_flag: bool = False,
) -> Samsegmesh2surfParameters:
    """
    Build parameters.
    
    Args:
        atlas_mesh: Input SAMSEG atlas mesh collection file.
        template: Input atlas template volume.
        lta_transform: Input LTA transform to be applied to surface.
        output_surface: Output FreeSurfer surface file.
        output_priors: Output priors as MRI volume.
        invert_flag: Invert LTA transform.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "samsegmesh2surf",
        "atlas_mesh": atlas_mesh,
        "invert_flag": invert_flag,
    }
    if template is not None:
        params["template"] = template
    if lta_transform is not None:
        params["lta_transform"] = lta_transform
    if output_surface is not None:
        params["output_surface"] = output_surface
    if output_priors is not None:
        params["output_priors"] = output_priors
    return params


def samsegmesh2surf_cargs(
    params: Samsegmesh2surfParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("samsegmesh2surf")
    cargs.extend([
        "--atlasmesh",
        execution.input_file(params.get("atlas_mesh"))
    ])
    if params.get("template") is not None:
        cargs.extend([
            "--template",
            "(" + execution.input_file(params.get("template"))
        ])
    cargs.append("|")
    if params.get("lta_transform") is not None:
        cargs.extend([
            "--lta",
            execution.input_file(params.get("lta_transform")) + ")"
        ])
    if params.get("output_surface") is not None:
        cargs.extend([
            "--osurf",
            "(" + params.get("output_surface")
        ])
    cargs.append("|")
    if params.get("output_priors") is not None:
        cargs.extend([
            "--opriors",
            params.get("output_priors") + ")"
        ])
    if params.get("invert_flag"):
        cargs.append("--invert")
    return cargs


def samsegmesh2surf_outputs(
    params: Samsegmesh2surfParameters,
    execution: Execution,
) -> Samsegmesh2surfOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Samsegmesh2surfOutputs(
        root=execution.output_file("."),
        output_surface_file=execution.output_file(params.get("output_surface")) if (params.get("output_surface") is not None) else None,
        output_priors_file=execution.output_file(params.get("output_priors")) if (params.get("output_priors") is not None) else None,
    )
    return ret


def samsegmesh2surf_execute(
    params: Samsegmesh2surfParameters,
    execution: Execution,
) -> Samsegmesh2surfOutputs:
    """
    Generate Freesurfer surface from a SAMSEG atlas mesh file and generate priors at
    each vertex as overlay MRI volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `Samsegmesh2surfOutputs`).
    """
    params = execution.params(params)
    cargs = samsegmesh2surf_cargs(params, execution)
    ret = samsegmesh2surf_outputs(params, execution)
    execution.run(cargs)
    return ret


def samsegmesh2surf(
    atlas_mesh: InputPathType,
    template: InputPathType | None = None,
    lta_transform: InputPathType | None = None,
    output_surface: str | None = None,
    output_priors: str | None = None,
    invert_flag: bool = False,
    runner: Runner | None = None,
) -> Samsegmesh2surfOutputs:
    """
    Generate Freesurfer surface from a SAMSEG atlas mesh file and generate priors at
    each vertex as overlay MRI volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        atlas_mesh: Input SAMSEG atlas mesh collection file.
        template: Input atlas template volume.
        lta_transform: Input LTA transform to be applied to surface.
        output_surface: Output FreeSurfer surface file.
        output_priors: Output priors as MRI volume.
        invert_flag: Invert LTA transform.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Samsegmesh2surfOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SAMSEGMESH2SURF_METADATA)
    params = samsegmesh2surf_params(
        atlas_mesh=atlas_mesh,
        template=template,
        lta_transform=lta_transform,
        output_surface=output_surface,
        output_priors=output_priors,
        invert_flag=invert_flag,
    )
    return samsegmesh2surf_execute(params, execution)


__all__ = [
    "SAMSEGMESH2SURF_METADATA",
    "Samsegmesh2surfOutputs",
    "Samsegmesh2surfParameters",
    "samsegmesh2surf",
    "samsegmesh2surf_params",
]
