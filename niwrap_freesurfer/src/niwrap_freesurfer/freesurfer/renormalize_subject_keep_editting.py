# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

RENORMALIZE_SUBJECT_KEEP_EDITTING_METADATA = Metadata(
    id="d1c64f0c85672d74bb2cb15852e56662e6d58c32.boutiques",
    name="renormalize_subject_keep_editting",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


RenormalizeSubjectKeepEdittingParameters = typing.TypedDict('RenormalizeSubjectKeepEdittingParameters', {
    "__STYX_TYPE__": typing.Literal["renormalize_subject_keep_editting"],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "renormalize_subject_keep_editting": renormalize_subject_keep_editting_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "renormalize_subject_keep_editting": renormalize_subject_keep_editting_outputs,
    }.get(t)


class RenormalizeSubjectKeepEdittingOutputs(typing.NamedTuple):
    """
    Output object returned when calling `renormalize_subject_keep_editting(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Placeholder output file since tool details are not available."""


def renormalize_subject_keep_editting_params(
) -> RenormalizeSubjectKeepEdittingParameters:
    """
    Build parameters.
    
    Args:
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "renormalize_subject_keep_editting",
    }
    return params


def renormalize_subject_keep_editting_cargs(
    params: RenormalizeSubjectKeepEdittingParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("renormalize_subject_keep_editting")
    return cargs


def renormalize_subject_keep_editting_outputs(
    params: RenormalizeSubjectKeepEdittingParameters,
    execution: Execution,
) -> RenormalizeSubjectKeepEdittingOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RenormalizeSubjectKeepEdittingOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file("output.txt"),
    )
    return ret


def renormalize_subject_keep_editting_execute(
    params: RenormalizeSubjectKeepEdittingParameters,
    execution: Execution,
) -> RenormalizeSubjectKeepEdittingOutputs:
    """
    A placeholder for the renormalize_subject_keep_editting tool, details not
    available.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `RenormalizeSubjectKeepEdittingOutputs`).
    """
    params = execution.params(params)
    cargs = renormalize_subject_keep_editting_cargs(params, execution)
    ret = renormalize_subject_keep_editting_outputs(params, execution)
    execution.run(cargs)
    return ret


def renormalize_subject_keep_editting(
    runner: Runner | None = None,
) -> RenormalizeSubjectKeepEdittingOutputs:
    """
    A placeholder for the renormalize_subject_keep_editting tool, details not
    available.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RenormalizeSubjectKeepEdittingOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RENORMALIZE_SUBJECT_KEEP_EDITTING_METADATA)
    params = renormalize_subject_keep_editting_params(
    )
    return renormalize_subject_keep_editting_execute(params, execution)


__all__ = [
    "RENORMALIZE_SUBJECT_KEEP_EDITTING_METADATA",
    "RenormalizeSubjectKeepEdittingOutputs",
    "RenormalizeSubjectKeepEdittingParameters",
    "renormalize_subject_keep_editting",
    "renormalize_subject_keep_editting_params",
]
