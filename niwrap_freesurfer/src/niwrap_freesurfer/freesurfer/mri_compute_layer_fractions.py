# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_COMPUTE_LAYER_FRACTIONS_METADATA = Metadata(
    id="4b975414209d034dddfda14c61a9efcc219f17d0.boutiques",
    name="mri_compute_layer_fractions",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriComputeLayerFractionsParameters = typing.TypedDict('MriComputeLayerFractionsParameters', {
    "__STYX_TYPE__": typing.Literal["mri_compute_layer_fractions"],
    "reg_file": InputPathType,
    "input_volume": InputPathType,
    "output_stem": str,
    "output_directory": typing.NotRequired[str | None],
    "aseg_file": typing.NotRequired[InputPathType | None],
    "target_volume": typing.NotRequired[InputPathType | None],
    "hemi_flag": bool,
    "fs_names_flag": bool,
    "subject_id": typing.NotRequired[str | None],
    "n_layers": typing.NotRequired[float | None],
    "synth_flag": bool,
    "thickness": typing.NotRequired[float | None],
    "random_file": typing.NotRequired[InputPathType | None],
    "identity_file": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_compute_layer_fractions": mri_compute_layer_fractions_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_compute_layer_fractions": mri_compute_layer_fractions_outputs,
    }.get(t)


class MriComputeLayerFractionsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_compute_layer_fractions(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    layer_fractions_output: OutputPathType
    """Output file for layer fractions computation"""
    synth_output: OutputPathType
    """Synthesized output volume combining layers and aseg"""


def mri_compute_layer_fractions_params(
    reg_file: InputPathType,
    input_volume: InputPathType,
    output_stem: str,
    output_directory: str | None = None,
    aseg_file: InputPathType | None = None,
    target_volume: InputPathType | None = None,
    hemi_flag: bool = False,
    fs_names_flag: bool = False,
    subject_id: str | None = None,
    n_layers: float | None = None,
    synth_flag: bool = False,
    thickness: float | None = None,
    random_file: InputPathType | None = None,
    identity_file: str | None = None,
) -> MriComputeLayerFractionsParameters:
    """
    Build parameters.
    
    Args:
        reg_file: Input registration file.
        input_volume: Input volume file.
        output_stem: Output stem for generated files.
        output_directory: Output directory specified by SUBJECTS_DIR.
        aseg_file: Input ASEG file for synthesis.
        target_volume: Target volume for analysis.
        hemi_flag: Specify hemisphere processing.
        fs_names_flag: Flag to use FreeSurfer names.
        subject_id: Subject ID for processing.
        n_layers: Number of layers for volume fraction computation.
        synth_flag: Flag to combine with the ASEG for a single segmentation\
            volume.
        thickness: Specify cortical thickness fraction.
        random_file: Specify random volume file.
        identity_file: Specify identity file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_compute_layer_fractions",
        "reg_file": reg_file,
        "input_volume": input_volume,
        "output_stem": output_stem,
        "hemi_flag": hemi_flag,
        "fs_names_flag": fs_names_flag,
        "synth_flag": synth_flag,
    }
    if output_directory is not None:
        params["output_directory"] = output_directory
    if aseg_file is not None:
        params["aseg_file"] = aseg_file
    if target_volume is not None:
        params["target_volume"] = target_volume
    if subject_id is not None:
        params["subject_id"] = subject_id
    if n_layers is not None:
        params["n_layers"] = n_layers
    if thickness is not None:
        params["thickness"] = thickness
    if random_file is not None:
        params["random_file"] = random_file
    if identity_file is not None:
        params["identity_file"] = identity_file
    return params


def mri_compute_layer_fractions_cargs(
    params: MriComputeLayerFractionsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_compute_layer_fractions")
    cargs.append(execution.input_file(params.get("reg_file")))
    cargs.append(execution.input_file(params.get("input_volume")))
    cargs.append(params.get("output_stem"))
    if params.get("output_directory") is not None:
        cargs.extend([
            "-SDIR",
            params.get("output_directory")
        ])
    if params.get("aseg_file") is not None:
        cargs.extend([
            "-a",
            execution.input_file(params.get("aseg_file"))
        ])
    if params.get("target_volume") is not None:
        cargs.append(execution.input_file(params.get("target_volume")))
    if params.get("hemi_flag"):
        cargs.append("-hemi")
    if params.get("fs_names_flag"):
        cargs.append("-FS_names")
    if params.get("subject_id") is not None:
        cargs.extend([
            "-s",
            params.get("subject_id")
        ])
    if params.get("n_layers") is not None:
        cargs.extend([
            "-nlayers",
            str(params.get("n_layers"))
        ])
    if params.get("synth_flag"):
        cargs.append("-synth")
    if params.get("thickness") is not None:
        cargs.extend([
            "-r",
            str(params.get("thickness"))
        ])
    if params.get("random_file") is not None:
        cargs.extend([
            "-n",
            execution.input_file(params.get("random_file"))
        ])
    if params.get("identity_file") is not None:
        cargs.append(params.get("identity_file"))
    return cargs


def mri_compute_layer_fractions_outputs(
    params: MriComputeLayerFractionsParameters,
    execution: Execution,
) -> MriComputeLayerFractionsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriComputeLayerFractionsOutputs(
        root=execution.output_file("."),
        layer_fractions_output=execution.output_file(params.get("output_stem") + "_layer_fractions.mgz"),
        synth_output=execution.output_file(params.get("output_stem") + "_synth.mgz"),
    )
    return ret


def mri_compute_layer_fractions_execute(
    params: MriComputeLayerFractionsParameters,
    execution: Execution,
) -> MriComputeLayerFractionsOutputs:
    """
    This program computes volumetric partial volume fractions from laminar surfaces
    using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriComputeLayerFractionsOutputs`).
    """
    params = execution.params(params)
    cargs = mri_compute_layer_fractions_cargs(params, execution)
    ret = mri_compute_layer_fractions_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_compute_layer_fractions(
    reg_file: InputPathType,
    input_volume: InputPathType,
    output_stem: str,
    output_directory: str | None = None,
    aseg_file: InputPathType | None = None,
    target_volume: InputPathType | None = None,
    hemi_flag: bool = False,
    fs_names_flag: bool = False,
    subject_id: str | None = None,
    n_layers: float | None = None,
    synth_flag: bool = False,
    thickness: float | None = None,
    random_file: InputPathType | None = None,
    identity_file: str | None = None,
    runner: Runner | None = None,
) -> MriComputeLayerFractionsOutputs:
    """
    This program computes volumetric partial volume fractions from laminar surfaces
    using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        reg_file: Input registration file.
        input_volume: Input volume file.
        output_stem: Output stem for generated files.
        output_directory: Output directory specified by SUBJECTS_DIR.
        aseg_file: Input ASEG file for synthesis.
        target_volume: Target volume for analysis.
        hemi_flag: Specify hemisphere processing.
        fs_names_flag: Flag to use FreeSurfer names.
        subject_id: Subject ID for processing.
        n_layers: Number of layers for volume fraction computation.
        synth_flag: Flag to combine with the ASEG for a single segmentation\
            volume.
        thickness: Specify cortical thickness fraction.
        random_file: Specify random volume file.
        identity_file: Specify identity file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriComputeLayerFractionsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_COMPUTE_LAYER_FRACTIONS_METADATA)
    params = mri_compute_layer_fractions_params(
        reg_file=reg_file,
        input_volume=input_volume,
        output_stem=output_stem,
        output_directory=output_directory,
        aseg_file=aseg_file,
        target_volume=target_volume,
        hemi_flag=hemi_flag,
        fs_names_flag=fs_names_flag,
        subject_id=subject_id,
        n_layers=n_layers,
        synth_flag=synth_flag,
        thickness=thickness,
        random_file=random_file,
        identity_file=identity_file,
    )
    return mri_compute_layer_fractions_execute(params, execution)


__all__ = [
    "MRI_COMPUTE_LAYER_FRACTIONS_METADATA",
    "MriComputeLayerFractionsOutputs",
    "MriComputeLayerFractionsParameters",
    "mri_compute_layer_fractions",
    "mri_compute_layer_fractions_params",
]
