# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

GROUPSTATS_METADATA = Metadata(
    id="355e1a7428f21999fd48f18935d2d56917a02e73.boutiques",
    name="groupstats",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


GroupstatsParameters = typing.TypedDict('GroupstatsParameters', {
    "__STYX_TYPE__": typing.Literal["groupstats"],
    "outdir": str,
    "group_fsgd": typing.NotRequired[InputPathType | None],
    "subjectfile": typing.NotRequired[InputPathType | None],
    "fwhm": typing.NotRequired[list[float] | None],
    "subject_dir": typing.NotRequired[str | None],
    "mapname": typing.NotRequired[str | None],
    "srcsurfreg": typing.NotRequired[str | None],
    "no_maps": bool,
    "lh_only": bool,
    "rh_only": bool,
    "no_aparcstats": bool,
    "no_asegstats": bool,
    "no_wparcstats": bool,
    "no_stats": bool,
    "new": bool,
    "base": bool,
    "keep53": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "groupstats": groupstats_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "groupstats": groupstats_outputs,
    }.get(t)


class GroupstatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `groupstats(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_files: OutputPathType
    """Output files generated by groupstats."""


def groupstats_params(
    outdir: str,
    group_fsgd: InputPathType | None = None,
    subjectfile: InputPathType | None = None,
    fwhm: list[float] | None = None,
    subject_dir: str | None = None,
    mapname: str | None = None,
    srcsurfreg: str | None = None,
    no_maps: bool = False,
    lh_only: bool = False,
    rh_only: bool = False,
    no_aparcstats: bool = False,
    no_asegstats: bool = False,
    no_wparcstats: bool = False,
    no_stats: bool = False,
    new: bool = False,
    base: bool = False,
    keep53: bool = False,
) -> GroupstatsParameters:
    """
    Build parameters.
    
    Args:
        outdir: Output folder.
        group_fsgd: Specify the FSGD file for the group.
        subjectfile: Subject list file.
        fwhm: Specify smoothing level(s).
        subject_dir: Subject directory.
        mapname: Use the given map name.
        srcsurfreg: Source surface registration (default is sphere.reg).
        no_maps: Only analyze ROI data.
        lh_only: Only analyze left hemisphere.
        rh_only: Only analyze right hemisphere.
        no_aparcstats: Do not compute aparcstats.
        no_asegstats: Do not compute asegstats.
        no_wparcstats: Do not compute wmparcstats.
        no_stats: Do not perform any ROI stats.
        new: Append .new.mris_make_surfaces to map names.
        base: Sets measure thickness area volume curvature sulcus (excludes\
            white-gray percentage).
        keep53: Keep 5.3 aseg names (e.g., Thalamus-Proper).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "groupstats",
        "outdir": outdir,
        "no_maps": no_maps,
        "lh_only": lh_only,
        "rh_only": rh_only,
        "no_aparcstats": no_aparcstats,
        "no_asegstats": no_asegstats,
        "no_wparcstats": no_wparcstats,
        "no_stats": no_stats,
        "new": new,
        "base": base,
        "keep53": keep53,
    }
    if group_fsgd is not None:
        params["group_fsgd"] = group_fsgd
    if subjectfile is not None:
        params["subjectfile"] = subjectfile
    if fwhm is not None:
        params["fwhm"] = fwhm
    if subject_dir is not None:
        params["subject_dir"] = subject_dir
    if mapname is not None:
        params["mapname"] = mapname
    if srcsurfreg is not None:
        params["srcsurfreg"] = srcsurfreg
    return params


def groupstats_cargs(
    params: GroupstatsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("groupstats")
    cargs.extend([
        "--o",
        params.get("outdir")
    ])
    if params.get("group_fsgd") is not None:
        cargs.extend([
            "--fsgd",
            execution.input_file(params.get("group_fsgd"))
        ])
    if params.get("subjectfile") is not None:
        cargs.extend([
            "--f",
            execution.input_file(params.get("subjectfile"))
        ])
    if params.get("fwhm") is not None:
        cargs.extend([
            "--fwhm",
            *map(str, params.get("fwhm"))
        ])
    if params.get("subject_dir") is not None:
        cargs.extend([
            "--sd",
            params.get("subject_dir")
        ])
    if params.get("mapname") is not None:
        cargs.extend([
            "--m",
            params.get("mapname")
        ])
    if params.get("srcsurfreg") is not None:
        cargs.extend([
            "--srcsurfreg",
            params.get("srcsurfreg")
        ])
    if params.get("no_maps"):
        cargs.append("--no-maps")
    if params.get("lh_only"):
        cargs.append("--lh")
    if params.get("rh_only"):
        cargs.append("--rh")
    if params.get("no_aparcstats"):
        cargs.append("--no-aparcstats")
    if params.get("no_asegstats"):
        cargs.append("--no-asegstats")
    if params.get("no_wparcstats"):
        cargs.append("--no-wparcstats")
    if params.get("no_stats"):
        cargs.append("--no-stats")
    if params.get("new"):
        cargs.append("--new")
    if params.get("base"):
        cargs.append("--base")
    if params.get("keep53"):
        cargs.append("--keep53")
    return cargs


def groupstats_outputs(
    params: GroupstatsParameters,
    execution: Execution,
) -> GroupstatsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = GroupstatsOutputs(
        root=execution.output_file("."),
        output_files=execution.output_file(params.get("outdir") + "/<output_file>.ext"),
    )
    return ret


def groupstats_execute(
    params: GroupstatsParameters,
    execution: Execution,
) -> GroupstatsOutputs:
    """
    A script for comprehensive group analysis on both maps and ROI results within
    FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `GroupstatsOutputs`).
    """
    params = execution.params(params)
    cargs = groupstats_cargs(params, execution)
    ret = groupstats_outputs(params, execution)
    execution.run(cargs)
    return ret


def groupstats(
    outdir: str,
    group_fsgd: InputPathType | None = None,
    subjectfile: InputPathType | None = None,
    fwhm: list[float] | None = None,
    subject_dir: str | None = None,
    mapname: str | None = None,
    srcsurfreg: str | None = None,
    no_maps: bool = False,
    lh_only: bool = False,
    rh_only: bool = False,
    no_aparcstats: bool = False,
    no_asegstats: bool = False,
    no_wparcstats: bool = False,
    no_stats: bool = False,
    new: bool = False,
    base: bool = False,
    keep53: bool = False,
    runner: Runner | None = None,
) -> GroupstatsOutputs:
    """
    A script for comprehensive group analysis on both maps and ROI results within
    FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        outdir: Output folder.
        group_fsgd: Specify the FSGD file for the group.
        subjectfile: Subject list file.
        fwhm: Specify smoothing level(s).
        subject_dir: Subject directory.
        mapname: Use the given map name.
        srcsurfreg: Source surface registration (default is sphere.reg).
        no_maps: Only analyze ROI data.
        lh_only: Only analyze left hemisphere.
        rh_only: Only analyze right hemisphere.
        no_aparcstats: Do not compute aparcstats.
        no_asegstats: Do not compute asegstats.
        no_wparcstats: Do not compute wmparcstats.
        no_stats: Do not perform any ROI stats.
        new: Append .new.mris_make_surfaces to map names.
        base: Sets measure thickness area volume curvature sulcus (excludes\
            white-gray percentage).
        keep53: Keep 5.3 aseg names (e.g., Thalamus-Proper).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GroupstatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(GROUPSTATS_METADATA)
    params = groupstats_params(
        outdir=outdir,
        group_fsgd=group_fsgd,
        subjectfile=subjectfile,
        fwhm=fwhm,
        subject_dir=subject_dir,
        mapname=mapname,
        srcsurfreg=srcsurfreg,
        no_maps=no_maps,
        lh_only=lh_only,
        rh_only=rh_only,
        no_aparcstats=no_aparcstats,
        no_asegstats=no_asegstats,
        no_wparcstats=no_wparcstats,
        no_stats=no_stats,
        new=new,
        base=base,
        keep53=keep53,
    )
    return groupstats_execute(params, execution)


__all__ = [
    "GROUPSTATS_METADATA",
    "GroupstatsOutputs",
    "GroupstatsParameters",
    "groupstats",
    "groupstats_params",
]
