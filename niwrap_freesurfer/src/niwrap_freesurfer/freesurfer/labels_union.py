# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LABELS_UNION_METADATA = Metadata(
    id="d5aa9c97375874b3bcbc62e4722154356911d0ad.boutiques",
    name="labels_union",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


LabelsUnionParameters = typing.TypedDict('LabelsUnionParameters', {
    "__STYX_TYPE__": typing.Literal["labels_union"],
    "label1": InputPathType,
    "label2": InputPathType,
    "outputname": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "labels_union": labels_union_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "labels_union": labels_union_outputs,
    }.get(t)


class LabelsUnionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `labels_union(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    union_label: OutputPathType
    """Union of the two label files"""


def labels_union_params(
    label1: InputPathType,
    label2: InputPathType,
    outputname: str,
) -> LabelsUnionParameters:
    """
    Build parameters.
    
    Args:
        label1: First label file (e.g., rh.BA3a.label).
        label2: Second label file (e.g., rh.BA3b.label).
        outputname: Output name for the union label file (e.g.,\
            rh.BA3ab.union.label).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "labels_union",
        "label1": label1,
        "label2": label2,
        "outputname": outputname,
    }
    return params


def labels_union_cargs(
    params: LabelsUnionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("labels_union")
    cargs.append(execution.input_file(params.get("label1")))
    cargs.append(execution.input_file(params.get("label2")))
    cargs.append(params.get("outputname"))
    return cargs


def labels_union_outputs(
    params: LabelsUnionParameters,
    execution: Execution,
) -> LabelsUnionOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LabelsUnionOutputs(
        root=execution.output_file("."),
        union_label=execution.output_file(params.get("outputname")),
    )
    return ret


def labels_union_execute(
    params: LabelsUnionParameters,
    execution: Execution,
) -> LabelsUnionOutputs:
    """
    Utility to create the union of two label files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `LabelsUnionOutputs`).
    """
    params = execution.params(params)
    cargs = labels_union_cargs(params, execution)
    ret = labels_union_outputs(params, execution)
    execution.run(cargs)
    return ret


def labels_union(
    label1: InputPathType,
    label2: InputPathType,
    outputname: str,
    runner: Runner | None = None,
) -> LabelsUnionOutputs:
    """
    Utility to create the union of two label files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        label1: First label file (e.g., rh.BA3a.label).
        label2: Second label file (e.g., rh.BA3b.label).
        outputname: Output name for the union label file (e.g.,\
            rh.BA3ab.union.label).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LabelsUnionOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LABELS_UNION_METADATA)
    params = labels_union_params(
        label1=label1,
        label2=label2,
        outputname=outputname,
    )
    return labels_union_execute(params, execution)


__all__ = [
    "LABELS_UNION_METADATA",
    "LabelsUnionOutputs",
    "LabelsUnionParameters",
    "labels_union",
    "labels_union_params",
]
