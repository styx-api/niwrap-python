# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MKXSUBJREG_METADATA = Metadata(
    id="e782131163109567ec01cead15e999955396aeed.boutiques",
    name="mkxsubjreg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MkxsubjregParameters = typing.TypedDict('MkxsubjregParameters', {
    "__STYX_TYPE__": typing.Literal["mkxsubjreg"],
    "srcreg": InputPathType,
    "targreg": InputPathType,
    "targsubj": typing.NotRequired[str | None],
    "xfm": typing.NotRequired[str | None],
    "sd": typing.NotRequired[str | None],
    "fvol": typing.NotRequired[InputPathType | None],
    "help": bool,
    "version": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mkxsubjreg": mkxsubjreg_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class MkxsubjregOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mkxsubjreg(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mkxsubjreg_params(
    srcreg: InputPathType,
    targreg: InputPathType,
    targsubj: str | None = None,
    xfm: str | None = None,
    sd: str | None = None,
    fvol: InputPathType | None = None,
    help_: bool = False,
    version: bool = False,
) -> MkxsubjregParameters:
    """
    Build parameters.
    
    Args:
        srcreg: Path to the source registration file (srcreg.dat).
        targreg: Path to the target registration file (targreg.dat).
        targsubj: Target subject ID; default is talairach.
        xfm: XFM file name relative to transforms.
        sd: Directory containing subject data; default is env SUBJECTS_DIR.
        fvol: Path to example functional volume.
        help_: Display help information.
        version: Display version information.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mkxsubjreg",
        "srcreg": srcreg,
        "targreg": targreg,
        "help": help_,
        "version": version,
    }
    if targsubj is not None:
        params["targsubj"] = targsubj
    if xfm is not None:
        params["xfm"] = xfm
    if sd is not None:
        params["sd"] = sd
    if fvol is not None:
        params["fvol"] = fvol
    return params


def mkxsubjreg_cargs(
    params: MkxsubjregParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mkxsubjreg")
    cargs.extend([
        "--srcreg",
        execution.input_file(params.get("srcreg"))
    ])
    cargs.extend([
        "--targreg",
        execution.input_file(params.get("targreg"))
    ])
    if params.get("targsubj") is not None:
        cargs.extend([
            "--targsubj",
            params.get("targsubj")
        ])
    if params.get("xfm") is not None:
        cargs.extend([
            "--xfm",
            params.get("xfm")
        ])
    if params.get("sd") is not None:
        cargs.extend([
            "--sd",
            params.get("sd")
        ])
    if params.get("fvol") is not None:
        cargs.extend([
            "--fvol",
            execution.input_file(params.get("fvol"))
        ])
    if params.get("help"):
        cargs.append("--help")
    if params.get("version"):
        cargs.append("--version")
    return cargs


def mkxsubjreg_outputs(
    params: MkxsubjregParameters,
    execution: Execution,
) -> MkxsubjregOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MkxsubjregOutputs(
        root=execution.output_file("."),
    )
    return ret


def mkxsubjreg_execute(
    params: MkxsubjregParameters,
    execution: Execution,
) -> MkxsubjregOutputs:
    """
    Creates a new registration matrix that maps from the functional volume of the
    source subject to the orig of the target subject through the talairach
    transform.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MkxsubjregOutputs`).
    """
    params = execution.params(params)
    cargs = mkxsubjreg_cargs(params, execution)
    ret = mkxsubjreg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mkxsubjreg(
    srcreg: InputPathType,
    targreg: InputPathType,
    targsubj: str | None = None,
    xfm: str | None = None,
    sd: str | None = None,
    fvol: InputPathType | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MkxsubjregOutputs:
    """
    Creates a new registration matrix that maps from the functional volume of the
    source subject to the orig of the target subject through the talairach
    transform.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        srcreg: Path to the source registration file (srcreg.dat).
        targreg: Path to the target registration file (targreg.dat).
        targsubj: Target subject ID; default is talairach.
        xfm: XFM file name relative to transforms.
        sd: Directory containing subject data; default is env SUBJECTS_DIR.
        fvol: Path to example functional volume.
        help_: Display help information.
        version: Display version information.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MkxsubjregOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MKXSUBJREG_METADATA)
    params = mkxsubjreg_params(
        srcreg=srcreg,
        targreg=targreg,
        targsubj=targsubj,
        xfm=xfm,
        sd=sd,
        fvol=fvol,
        help_=help_,
        version=version,
    )
    return mkxsubjreg_execute(params, execution)


__all__ = [
    "MKXSUBJREG_METADATA",
    "MkxsubjregOutputs",
    "MkxsubjregParameters",
    "mkxsubjreg",
    "mkxsubjreg_params",
]
