# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

COMPUTE_VOX2VOX_METADATA = Metadata(
    id="cac931a71ca00f1e6fd4a05be9aebaf5ca0482ec.boutiques",
    name="compute_vox2vox",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


ComputeVox2voxParameters = typing.TypedDict('ComputeVox2voxParameters', {
    "__STYX_TYPE__": typing.Literal["compute_vox2vox"],
    "source": InputPathType,
    "t4file": InputPathType,
    "target": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "compute_vox2vox": compute_vox2vox_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "compute_vox2vox": compute_vox2vox_outputs,
    }.get(t)


class ComputeVox2voxOutputs(typing.NamedTuple):
    """
    Output object returned when calling `compute_vox2vox(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """The resulting transformed voxel-to-voxel 4dfp output file."""


def compute_vox2vox_params(
    source: InputPathType,
    t4file: InputPathType,
    target: InputPathType,
) -> ComputeVox2voxParameters:
    """
    Build parameters.
    
    Args:
        source: Input 4dfp source file.
        t4file: T4 transformation matrix file.
        target: Input 4dfp target file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "compute_vox2vox",
        "source": source,
        "t4file": t4file,
        "target": target,
    }
    return params


def compute_vox2vox_cargs(
    params: ComputeVox2voxParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("compute_vox2vox")
    cargs.append(execution.input_file(params.get("source")))
    cargs.append(execution.input_file(params.get("t4file")))
    cargs.append(execution.input_file(params.get("target")))
    return cargs


def compute_vox2vox_outputs(
    params: ComputeVox2voxParameters,
    execution: Execution,
) -> ComputeVox2voxOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ComputeVox2voxOutputs(
        root=execution.output_file("."),
        output=execution.output_file("<replace_with_output_path_pattern>"),
    )
    return ret


def compute_vox2vox_execute(
    params: ComputeVox2voxParameters,
    execution: Execution,
) -> ComputeVox2voxOutputs:
    """
    Tool for computing voxel-to-voxel transformations.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `ComputeVox2voxOutputs`).
    """
    params = execution.params(params)
    cargs = compute_vox2vox_cargs(params, execution)
    ret = compute_vox2vox_outputs(params, execution)
    execution.run(cargs)
    return ret


def compute_vox2vox(
    source: InputPathType,
    t4file: InputPathType,
    target: InputPathType,
    runner: Runner | None = None,
) -> ComputeVox2voxOutputs:
    """
    Tool for computing voxel-to-voxel transformations.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        source: Input 4dfp source file.
        t4file: T4 transformation matrix file.
        target: Input 4dfp target file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ComputeVox2voxOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(COMPUTE_VOX2VOX_METADATA)
    params = compute_vox2vox_params(
        source=source,
        t4file=t4file,
        target=target,
    )
    return compute_vox2vox_execute(params, execution)


__all__ = [
    "COMPUTE_VOX2VOX_METADATA",
    "ComputeVox2voxOutputs",
    "ComputeVox2voxParameters",
    "compute_vox2vox",
    "compute_vox2vox_params",
]
