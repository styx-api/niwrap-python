# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_GRADIENT_INFO_METADATA = Metadata(
    id="31065ab477983c227eb79e13fe275d6a65852b07.boutiques",
    name="mri_gradient_info",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriGradientInfoParameters = typing.TypedDict('MriGradientInfoParameters', {
    "__STYX_TYPE__": typing.Literal["mri_gradient_info"],
    "input_image": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_gradient_info": mri_gradient_info_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_gradient_info": mri_gradient_info_outputs,
    }.get(t)


class MriGradientInfoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_gradient_info(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    gradient_info_output: OutputPathType
    """Text file containing the extracted gradient information."""


def mri_gradient_info_params(
    input_image: InputPathType,
) -> MriGradientInfoParameters:
    """
    Build parameters.
    
    Args:
        input_image: Input MRI image file, typically in .mgz format.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_gradient_info",
        "input_image": input_image,
    }
    return params


def mri_gradient_info_cargs(
    params: MriGradientInfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_gradient_info")
    cargs.append(execution.input_file(params.get("input_image")))
    return cargs


def mri_gradient_info_outputs(
    params: MriGradientInfoParameters,
    execution: Execution,
) -> MriGradientInfoOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriGradientInfoOutputs(
        root=execution.output_file("."),
        gradient_info_output=execution.output_file("gradient_info_output.txt"),
    )
    return ret


def mri_gradient_info_execute(
    params: MriGradientInfoParameters,
    execution: Execution,
) -> MriGradientInfoOutputs:
    """
    A utility to obtain gradient information from MRI images using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriGradientInfoOutputs`).
    """
    params = execution.params(params)
    cargs = mri_gradient_info_cargs(params, execution)
    ret = mri_gradient_info_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_gradient_info(
    input_image: InputPathType,
    runner: Runner | None = None,
) -> MriGradientInfoOutputs:
    """
    A utility to obtain gradient information from MRI images using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_image: Input MRI image file, typically in .mgz format.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriGradientInfoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_GRADIENT_INFO_METADATA)
    params = mri_gradient_info_params(
        input_image=input_image,
    )
    return mri_gradient_info_execute(params, execution)


__all__ = [
    "MRI_GRADIENT_INFO_METADATA",
    "MriGradientInfoOutputs",
    "MriGradientInfoParameters",
    "mri_gradient_info",
    "mri_gradient_info_params",
]
