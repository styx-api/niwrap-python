# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

VSM_SMOOTH_METADATA = Metadata(
    id="c9910f98cd5b5b7c5c6d2ac12c7a50e16ba9d6d7.boutiques",
    name="vsm-smooth",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


VsmSmoothParameters = typing.TypedDict('VsmSmoothParameters', {
    "__STYX_TYPE__": typing.Literal["vsm-smooth"],
    "input_file": InputPathType,
    "output_file": str,
    "fwhm_value": float,
    "temp_dir": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "vsm-smooth": vsm_smooth_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "vsm-smooth": vsm_smooth_outputs,
    }.get(t)


class VsmSmoothOutputs(typing.NamedTuple):
    """
    Output object returned when calling `vsm_smooth(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_vsm: OutputPathType
    """The resulting smoothed voxel shift map."""


def vsm_smooth_params(
    input_file: InputPathType,
    output_file: str,
    fwhm_value: float,
    temp_dir: str,
) -> VsmSmoothParameters:
    """
    Build parameters.
    
    Args:
        input_file: Input voxel shift map (vsm).
        output_file: Output smoothed voxel shift map.
        fwhm_value: Full width at half maximum for smoothing.
        temp_dir: Directory for temporary files.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "vsm-smooth",
        "input_file": input_file,
        "output_file": output_file,
        "fwhm_value": fwhm_value,
        "temp_dir": temp_dir,
    }
    return params


def vsm_smooth_cargs(
    params: VsmSmoothParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("vsm-smooth")
    cargs.extend([
        "--i",
        execution.input_file(params.get("input_file"))
    ])
    cargs.extend([
        "--o",
        params.get("output_file")
    ])
    cargs.extend([
        "--fwhm",
        str(params.get("fwhm_value"))
    ])
    cargs.extend([
        "--tmpdir",
        params.get("temp_dir")
    ])
    return cargs


def vsm_smooth_outputs(
    params: VsmSmoothParameters,
    execution: Execution,
) -> VsmSmoothOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = VsmSmoothOutputs(
        root=execution.output_file("."),
        output_vsm=execution.output_file(params.get("output_file")),
    )
    return ret


def vsm_smooth_execute(
    params: VsmSmoothParameters,
    execution: Execution,
) -> VsmSmoothOutputs:
    """
    Implements a masked smoothing in which the input (vsm) is unchanged in voxels
    that have a non-zero value. In voxels with a zero value, the value is replaced
    with vsm smoothed by the given amount. This will likely only change the voxels
    that are near the edge of the non-zero voxels. This is a simple way to
    extrapolate the non-zero voxels beyond their range. This works well for a B0
    distortion correction voxel shift map (vsm), but it can be applied to other
    maps.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `VsmSmoothOutputs`).
    """
    params = execution.params(params)
    cargs = vsm_smooth_cargs(params, execution)
    ret = vsm_smooth_outputs(params, execution)
    execution.run(cargs)
    return ret


def vsm_smooth(
    input_file: InputPathType,
    output_file: str,
    fwhm_value: float,
    temp_dir: str,
    runner: Runner | None = None,
) -> VsmSmoothOutputs:
    """
    Implements a masked smoothing in which the input (vsm) is unchanged in voxels
    that have a non-zero value. In voxels with a zero value, the value is replaced
    with vsm smoothed by the given amount. This will likely only change the voxels
    that are near the edge of the non-zero voxels. This is a simple way to
    extrapolate the non-zero voxels beyond their range. This works well for a B0
    distortion correction voxel shift map (vsm), but it can be applied to other
    maps.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input voxel shift map (vsm).
        output_file: Output smoothed voxel shift map.
        fwhm_value: Full width at half maximum for smoothing.
        temp_dir: Directory for temporary files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VsmSmoothOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VSM_SMOOTH_METADATA)
    params = vsm_smooth_params(
        input_file=input_file,
        output_file=output_file,
        fwhm_value=fwhm_value,
        temp_dir=temp_dir,
    )
    return vsm_smooth_execute(params, execution)


__all__ = [
    "VSM_SMOOTH_METADATA",
    "VsmSmoothOutputs",
    "VsmSmoothParameters",
    "vsm_smooth",
    "vsm_smooth_params",
]
