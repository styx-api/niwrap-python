# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MORPH_ONLY_SUBJECT_METADATA = Metadata(
    id="bff2c0f8f21164dcde88d76e1c6a7e662e454b4a.boutiques",
    name="morph_only_subject",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MorphOnlySubjectParameters = typing.TypedDict('MorphOnlySubjectParameters', {
    "__STYX_TYPE__": typing.Literal["morph_only_subject"],
    "placeholder_input": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "morph_only_subject": morph_only_subject_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class MorphOnlySubjectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `morph_only_subject(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def morph_only_subject_params(
    placeholder_input: str | None = None,
) -> MorphOnlySubjectParameters:
    """
    Build parameters.
    
    Args:
        placeholder_input: Placeholder input argument for morph_only_subject\
            tool.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "morph_only_subject",
    }
    if placeholder_input is not None:
        params["placeholder_input"] = placeholder_input
    return params


def morph_only_subject_cargs(
    params: MorphOnlySubjectParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("morph_only_subject")
    if params.get("placeholder_input") is not None:
        cargs.append(params.get("placeholder_input"))
    return cargs


def morph_only_subject_outputs(
    params: MorphOnlySubjectParameters,
    execution: Execution,
) -> MorphOnlySubjectOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MorphOnlySubjectOutputs(
        root=execution.output_file("."),
    )
    return ret


def morph_only_subject_execute(
    params: MorphOnlySubjectParameters,
    execution: Execution,
) -> MorphOnlySubjectOutputs:
    """
    A placeholder descriptor for morph_only_subject tool as help content is
    unavailable.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MorphOnlySubjectOutputs`).
    """
    params = execution.params(params)
    cargs = morph_only_subject_cargs(params, execution)
    ret = morph_only_subject_outputs(params, execution)
    execution.run(cargs)
    return ret


def morph_only_subject(
    placeholder_input: str | None = None,
    runner: Runner | None = None,
) -> MorphOnlySubjectOutputs:
    """
    A placeholder descriptor for morph_only_subject tool as help content is
    unavailable.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        placeholder_input: Placeholder input argument for morph_only_subject\
            tool.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MorphOnlySubjectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MORPH_ONLY_SUBJECT_METADATA)
    params = morph_only_subject_params(
        placeholder_input=placeholder_input,
    )
    return morph_only_subject_execute(params, execution)


__all__ = [
    "MORPH_ONLY_SUBJECT_METADATA",
    "MorphOnlySubjectOutputs",
    "MorphOnlySubjectParameters",
    "morph_only_subject",
    "morph_only_subject_params",
]
