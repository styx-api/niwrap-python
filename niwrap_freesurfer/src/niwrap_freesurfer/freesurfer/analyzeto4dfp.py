# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ANALYZETO4DFP_METADATA = Metadata(
    id="68ba555395398681b7b2f785a91ccbac22cbddc9.boutiques",
    name="analyzeto4dfp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Analyzeto4dfpParameters = typing.TypedDict('Analyzeto4dfpParameters', {
    "__STYX_TYPE__": typing.Literal["analyzeto4dfp"],
    "analyze_image": InputPathType,
    "rois_scale": bool,
    "flip_x": bool,
    "flip_y": bool,
    "flip_z": bool,
    "endian": typing.NotRequired[str | None],
    "orientation": typing.NotRequired[int | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "analyzeto4dfp": analyzeto4dfp_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class Analyzeto4dfpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `analyzeto4dfp(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def analyzeto4dfp_params(
    analyze_image: InputPathType,
    rois_scale: bool = False,
    flip_x: bool = False,
    flip_y: bool = False,
    flip_z: bool = False,
    endian: str | None = None,
    orientation: int | None = None,
) -> Analyzeto4dfpParameters:
    """
    Build parameters.
    
    Args:
        analyze_image: Input ANALYZE image file.
        rois_scale: Apply ROIScaleFactor.
        flip_x: Flip first axis.
        flip_y: Flip second axis.
        flip_z: Flip third axis.
        endian: Output big or little endian (default CPU endian).
        orientation: Supply orientation code (in range [0-5]).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "analyzeto4dfp",
        "analyze_image": analyze_image,
        "rois_scale": rois_scale,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
    }
    if endian is not None:
        params["endian"] = endian
    if orientation is not None:
        params["orientation"] = orientation
    return params


def analyzeto4dfp_cargs(
    params: Analyzeto4dfpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("analyzeto4dfp")
    cargs.append(execution.input_file(params.get("analyze_image")))
    if params.get("rois_scale"):
        cargs.append("-s")
    if params.get("flip_x"):
        cargs.append("-x")
    if params.get("flip_y"):
        cargs.append("-y")
    if params.get("flip_z"):
        cargs.append("-z")
    if params.get("endian") is not None:
        cargs.extend([
            "-@",
            params.get("endian")
        ])
    if params.get("orientation") is not None:
        cargs.extend([
            "-O",
            str(params.get("orientation"))
        ])
    return cargs


def analyzeto4dfp_outputs(
    params: Analyzeto4dfpParameters,
    execution: Execution,
) -> Analyzeto4dfpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Analyzeto4dfpOutputs(
        root=execution.output_file("."),
    )
    return ret


def analyzeto4dfp_execute(
    params: Analyzeto4dfpParameters,
    execution: Execution,
) -> Analyzeto4dfpOutputs:
    """
    Convert ANALYZE image format to 4dfp format with various options.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `Analyzeto4dfpOutputs`).
    """
    params = execution.params(params)
    cargs = analyzeto4dfp_cargs(params, execution)
    ret = analyzeto4dfp_outputs(params, execution)
    execution.run(cargs)
    return ret


def analyzeto4dfp(
    analyze_image: InputPathType,
    rois_scale: bool = False,
    flip_x: bool = False,
    flip_y: bool = False,
    flip_z: bool = False,
    endian: str | None = None,
    orientation: int | None = None,
    runner: Runner | None = None,
) -> Analyzeto4dfpOutputs:
    """
    Convert ANALYZE image format to 4dfp format with various options.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        analyze_image: Input ANALYZE image file.
        rois_scale: Apply ROIScaleFactor.
        flip_x: Flip first axis.
        flip_y: Flip second axis.
        flip_z: Flip third axis.
        endian: Output big or little endian (default CPU endian).
        orientation: Supply orientation code (in range [0-5]).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Analyzeto4dfpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ANALYZETO4DFP_METADATA)
    params = analyzeto4dfp_params(
        analyze_image=analyze_image,
        rois_scale=rois_scale,
        flip_x=flip_x,
        flip_y=flip_y,
        flip_z=flip_z,
        endian=endian,
        orientation=orientation,
    )
    return analyzeto4dfp_execute(params, execution)


__all__ = [
    "ANALYZETO4DFP_METADATA",
    "Analyzeto4dfpOutputs",
    "Analyzeto4dfpParameters",
    "analyzeto4dfp",
    "analyzeto4dfp_params",
]
