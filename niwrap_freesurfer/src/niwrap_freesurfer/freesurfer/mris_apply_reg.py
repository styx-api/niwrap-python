# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_APPLY_REG_METADATA = Metadata(
    id="cba2fa7ec9ece7dd7da7631135e083c0bc5bc503.boutiques",
    name="mris_apply_reg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisApplyRegParameters = typing.TypedDict('MrisApplyRegParameters', {
    "__STYX_TYPE__": typing.Literal["mris_apply_reg"],
    "src_input": InputPathType,
    "trg_output": str,
    "streg_pair": str,
    "src_label": typing.NotRequired[InputPathType | None],
    "src_annotation": typing.NotRequired[InputPathType | None],
    "src_xyz": typing.NotRequired[InputPathType | None],
    "jacobian": bool,
    "no_reverse": bool,
    "rand_noise": bool,
    "replace_ones": bool,
    "center_output": bool,
    "curv_format": bool,
    "lta_transform": typing.NotRequired[str | None],
    "lta_patch_transform": typing.NotRequired[str | None],
    "reverse_surface": typing.NotRequired[str | None],
    "patch_apply": typing.NotRequired[str | None],
    "save_vertex_pair": typing.NotRequired[InputPathType | None],
    "m3z_transform": typing.NotRequired[str | None],
    "inv_m3z_transform": typing.NotRequired[str | None],
    "src_reg_scale": typing.NotRequired[float | None],
    "trg_reg_scale": typing.NotRequired[float | None],
    "debug_mode": bool,
    "check_options": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mris_apply_reg": mris_apply_reg_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mris_apply_reg": mris_apply_reg_outputs,
    }.get(t)


class MrisApplyRegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mris_apply_reg(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_result: OutputPathType
    """The output file resulting from registration"""


def mris_apply_reg_params(
    src_input: InputPathType,
    trg_output: str,
    streg_pair: str,
    src_label: InputPathType | None = None,
    src_annotation: InputPathType | None = None,
    src_xyz: InputPathType | None = None,
    jacobian: bool = False,
    no_reverse: bool = False,
    rand_noise: bool = False,
    replace_ones: bool = False,
    center_output: bool = False,
    curv_format: bool = False,
    lta_transform: str | None = None,
    lta_patch_transform: str | None = None,
    reverse_surface: str | None = None,
    patch_apply: str | None = None,
    save_vertex_pair: InputPathType | None = None,
    m3z_transform: str | None = None,
    inv_m3z_transform: str | None = None,
    src_reg_scale: float | None = None,
    trg_reg_scale: float | None = None,
    debug_mode: bool = False,
    check_options: bool = False,
) -> MrisApplyRegParameters:
    """
    Build parameters.
    
    Args:
        src_input: Source values (surface overlay).
        trg_output: Target output file.
        streg_pair: Source and target registration file pair.
        src_label: Source label file (implies --no-rev).
        src_annotation: Source annotation file (implies --no-rev).
        src_xyz: XYZ coordinates from the given surface file as input.
        jacobian: Use jacobian correction.
        no_reverse: Do not do reverse mapping.
        rand_noise: Replace input with white Gaussian noise.
        replace_ones: Replace input with ones.
        center_output: Place the center of the output surface at (0,0,0).
        curv_format: Save output in curvature file format.
        lta_transform: Apply LTA transform to the surface.
        lta_patch_transform: Apply LTA transform to surface patch.
        reverse_surface: LR reverse surface with optional patch.
        patch_apply: Apply patch for each --streg.
        save_vertex_pair: Save vertex pairs from source and target surfaces.
        m3z_transform: Apply M3Z transform.
        inv_m3z_transform: Apply inverse M3Z transform.
        src_reg_scale: Scale the coordinates of the first surface.
        trg_reg_scale: Scale the coordinates of the last surface.
        debug_mode: Turn on debugging.
        check_options: Check options without executing anything.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mris_apply_reg",
        "src_input": src_input,
        "trg_output": trg_output,
        "streg_pair": streg_pair,
        "jacobian": jacobian,
        "no_reverse": no_reverse,
        "rand_noise": rand_noise,
        "replace_ones": replace_ones,
        "center_output": center_output,
        "curv_format": curv_format,
        "debug_mode": debug_mode,
        "check_options": check_options,
    }
    if src_label is not None:
        params["src_label"] = src_label
    if src_annotation is not None:
        params["src_annotation"] = src_annotation
    if src_xyz is not None:
        params["src_xyz"] = src_xyz
    if lta_transform is not None:
        params["lta_transform"] = lta_transform
    if lta_patch_transform is not None:
        params["lta_patch_transform"] = lta_patch_transform
    if reverse_surface is not None:
        params["reverse_surface"] = reverse_surface
    if patch_apply is not None:
        params["patch_apply"] = patch_apply
    if save_vertex_pair is not None:
        params["save_vertex_pair"] = save_vertex_pair
    if m3z_transform is not None:
        params["m3z_transform"] = m3z_transform
    if inv_m3z_transform is not None:
        params["inv_m3z_transform"] = inv_m3z_transform
    if src_reg_scale is not None:
        params["src_reg_scale"] = src_reg_scale
    if trg_reg_scale is not None:
        params["trg_reg_scale"] = trg_reg_scale
    return params


def mris_apply_reg_cargs(
    params: MrisApplyRegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_apply_reg")
    cargs.extend([
        "--src",
        execution.input_file(params.get("src_input"))
    ])
    cargs.extend([
        "--trg",
        params.get("trg_output")
    ])
    cargs.extend([
        "--streg",
        params.get("streg_pair")
    ])
    cargs.append("[STREG_ADDITIONAL...]")
    if params.get("src_label") is not None:
        cargs.extend([
            "--src-label",
            execution.input_file(params.get("src_label"))
        ])
    if params.get("src_annotation") is not None:
        cargs.extend([
            "--src-annot",
            execution.input_file(params.get("src_annotation"))
        ])
    if params.get("src_xyz") is not None:
        cargs.extend([
            "--src-xyz",
            execution.input_file(params.get("src_xyz"))
        ])
    if params.get("jacobian"):
        cargs.append("--jac")
    if params.get("no_reverse"):
        cargs.append("--no-rev")
    if params.get("rand_noise"):
        cargs.append("--randn")
    if params.get("replace_ones"):
        cargs.append("--ones")
    if params.get("center_output"):
        cargs.append("--center")
    if params.get("curv_format"):
        cargs.append("--curv")
    if params.get("lta_transform") is not None:
        cargs.extend([
            "--lta",
            params.get("lta_transform")
        ])
    if params.get("lta_patch_transform") is not None:
        cargs.extend([
            "--lta-patch",
            params.get("lta_patch_transform")
        ])
    if params.get("reverse_surface") is not None:
        cargs.extend([
            "--reverse",
            params.get("reverse_surface")
        ])
    if params.get("patch_apply") is not None:
        cargs.extend([
            "--patch",
            params.get("patch_apply")
        ])
    if params.get("save_vertex_pair") is not None:
        cargs.extend([
            "--stvpair",
            execution.input_file(params.get("save_vertex_pair"))
        ])
    if params.get("m3z_transform") is not None:
        cargs.extend([
            "--m3z",
            params.get("m3z_transform")
        ])
    if params.get("inv_m3z_transform") is not None:
        cargs.extend([
            "--inv-m3z",
            params.get("inv_m3z_transform")
        ])
    if params.get("src_reg_scale") is not None:
        cargs.extend([
            "--src-reg-scale",
            str(params.get("src_reg_scale"))
        ])
    if params.get("trg_reg_scale") is not None:
        cargs.extend([
            "--trg-reg-scale",
            str(params.get("trg_reg_scale"))
        ])
    if params.get("debug_mode"):
        cargs.append("--debug")
    if params.get("check_options"):
        cargs.append("--checkopts")
    return cargs


def mris_apply_reg_outputs(
    params: MrisApplyRegParameters,
    execution: Execution,
) -> MrisApplyRegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisApplyRegOutputs(
        root=execution.output_file("."),
        output_result=execution.output_file(params.get("trg_output")),
    )
    return ret


def mris_apply_reg_execute(
    params: MrisApplyRegParameters,
    execution: Execution,
) -> MrisApplyRegOutputs:
    """
    Apply surface registration in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MrisApplyRegOutputs`).
    """
    params = execution.params(params)
    cargs = mris_apply_reg_cargs(params, execution)
    ret = mris_apply_reg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_apply_reg(
    src_input: InputPathType,
    trg_output: str,
    streg_pair: str,
    src_label: InputPathType | None = None,
    src_annotation: InputPathType | None = None,
    src_xyz: InputPathType | None = None,
    jacobian: bool = False,
    no_reverse: bool = False,
    rand_noise: bool = False,
    replace_ones: bool = False,
    center_output: bool = False,
    curv_format: bool = False,
    lta_transform: str | None = None,
    lta_patch_transform: str | None = None,
    reverse_surface: str | None = None,
    patch_apply: str | None = None,
    save_vertex_pair: InputPathType | None = None,
    m3z_transform: str | None = None,
    inv_m3z_transform: str | None = None,
    src_reg_scale: float | None = None,
    trg_reg_scale: float | None = None,
    debug_mode: bool = False,
    check_options: bool = False,
    runner: Runner | None = None,
) -> MrisApplyRegOutputs:
    """
    Apply surface registration in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        src_input: Source values (surface overlay).
        trg_output: Target output file.
        streg_pair: Source and target registration file pair.
        src_label: Source label file (implies --no-rev).
        src_annotation: Source annotation file (implies --no-rev).
        src_xyz: XYZ coordinates from the given surface file as input.
        jacobian: Use jacobian correction.
        no_reverse: Do not do reverse mapping.
        rand_noise: Replace input with white Gaussian noise.
        replace_ones: Replace input with ones.
        center_output: Place the center of the output surface at (0,0,0).
        curv_format: Save output in curvature file format.
        lta_transform: Apply LTA transform to the surface.
        lta_patch_transform: Apply LTA transform to surface patch.
        reverse_surface: LR reverse surface with optional patch.
        patch_apply: Apply patch for each --streg.
        save_vertex_pair: Save vertex pairs from source and target surfaces.
        m3z_transform: Apply M3Z transform.
        inv_m3z_transform: Apply inverse M3Z transform.
        src_reg_scale: Scale the coordinates of the first surface.
        trg_reg_scale: Scale the coordinates of the last surface.
        debug_mode: Turn on debugging.
        check_options: Check options without executing anything.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisApplyRegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_APPLY_REG_METADATA)
    params = mris_apply_reg_params(
        src_input=src_input,
        trg_output=trg_output,
        streg_pair=streg_pair,
        src_label=src_label,
        src_annotation=src_annotation,
        src_xyz=src_xyz,
        jacobian=jacobian,
        no_reverse=no_reverse,
        rand_noise=rand_noise,
        replace_ones=replace_ones,
        center_output=center_output,
        curv_format=curv_format,
        lta_transform=lta_transform,
        lta_patch_transform=lta_patch_transform,
        reverse_surface=reverse_surface,
        patch_apply=patch_apply,
        save_vertex_pair=save_vertex_pair,
        m3z_transform=m3z_transform,
        inv_m3z_transform=inv_m3z_transform,
        src_reg_scale=src_reg_scale,
        trg_reg_scale=trg_reg_scale,
        debug_mode=debug_mode,
        check_options=check_options,
    )
    return mris_apply_reg_execute(params, execution)


__all__ = [
    "MRIS_APPLY_REG_METADATA",
    "MrisApplyRegOutputs",
    "MrisApplyRegParameters",
    "mris_apply_reg",
    "mris_apply_reg_params",
]
