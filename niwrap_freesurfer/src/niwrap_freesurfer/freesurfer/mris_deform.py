# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_DEFORM_METADATA = Metadata(
    id="ea5061ef18cb76bb82c43acc63761667972d145b.boutiques",
    name="mris_deform",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisDeformParameters = typing.TypedDict('MrisDeformParameters', {
    "__STYX_TYPE__": typing.Literal["mris_deform"],
    "input_surface": InputPathType,
    "input_volume": InputPathType,
    "xform": InputPathType,
    "output_surface": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mris_deform": mris_deform_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mris_deform": mris_deform_outputs,
    }.get(t)


class MrisDeformOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mris_deform(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    deformed_surface: OutputPathType
    """Deformed surface file output by mris_deform"""


def mris_deform_params(
    input_surface: InputPathType,
    input_volume: InputPathType,
    xform: InputPathType,
    output_surface: str,
) -> MrisDeformParameters:
    """
    Build parameters.
    
    Args:
        input_surface: Input surface file (e.g., lh.white).
        input_volume: Input volume file (e.g., brain.mgz).
        xform: Transformation file (e.g., talairach.xfm).
        output_surface: Output surface file (e.g., lh.white.deformed).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mris_deform",
        "input_surface": input_surface,
        "input_volume": input_volume,
        "xform": xform,
        "output_surface": output_surface,
    }
    return params


def mris_deform_cargs(
    params: MrisDeformParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_deform")
    cargs.append(execution.input_file(params.get("input_surface")))
    cargs.append(execution.input_file(params.get("input_volume")))
    cargs.append(execution.input_file(params.get("xform")))
    cargs.append(params.get("output_surface"))
    return cargs


def mris_deform_outputs(
    params: MrisDeformParameters,
    execution: Execution,
) -> MrisDeformOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisDeformOutputs(
        root=execution.output_file("."),
        deformed_surface=execution.output_file(params.get("output_surface")),
    )
    return ret


def mris_deform_execute(
    params: MrisDeformParameters,
    execution: Execution,
) -> MrisDeformOutputs:
    """
    A tool for deforming surface meshes using volumetric information from an
    auxiliary volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MrisDeformOutputs`).
    """
    params = execution.params(params)
    cargs = mris_deform_cargs(params, execution)
    ret = mris_deform_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_deform(
    input_surface: InputPathType,
    input_volume: InputPathType,
    xform: InputPathType,
    output_surface: str,
    runner: Runner | None = None,
) -> MrisDeformOutputs:
    """
    A tool for deforming surface meshes using volumetric information from an
    auxiliary volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface: Input surface file (e.g., lh.white).
        input_volume: Input volume file (e.g., brain.mgz).
        xform: Transformation file (e.g., talairach.xfm).
        output_surface: Output surface file (e.g., lh.white.deformed).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisDeformOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_DEFORM_METADATA)
    params = mris_deform_params(
        input_surface=input_surface,
        input_volume=input_volume,
        xform=xform,
        output_surface=output_surface,
    )
    return mris_deform_execute(params, execution)


__all__ = [
    "MRIS_DEFORM_METADATA",
    "MrisDeformOutputs",
    "MrisDeformParameters",
    "mris_deform",
    "mris_deform_params",
]
