# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_HAUSDORFF_DIST_METADATA = Metadata(
    id="c8c6f8e737d084817096cd5c6491a8218fa2f1ee.boutiques",
    name="mris_hausdorff_dist",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisHausdorffDistParameters = typing.TypedDict('MrisHausdorffDistParameters', {
    "__STYX_TYPE__": typing.Literal["mris_hausdorff_dist"],
    "surface": InputPathType,
    "label1": InputPathType,
    "label2": InputPathType,
    "annot_name": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mris_hausdorff_dist": mris_hausdorff_dist_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mris_hausdorff_dist": mris_hausdorff_dist_outputs,
    }.get(t)


class MrisHausdorffDistOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mris_hausdorff_dist(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output file containing the Hausdorff distance computation results"""


def mris_hausdorff_dist_params(
    surface: InputPathType,
    label1: InputPathType,
    label2: InputPathType,
    annot_name: str | None = None,
) -> MrisHausdorffDistParameters:
    """
    Build parameters.
    
    Args:
        surface: Surface file on which the labels exist.
        label1: First label file.
        label2: Second label file.
        annot_name: Compute pairwise Hausdorff Distance (HD) between all\
            annotations with the given name.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mris_hausdorff_dist",
        "surface": surface,
        "label1": label1,
        "label2": label2,
    }
    if annot_name is not None:
        params["annot_name"] = annot_name
    return params


def mris_hausdorff_dist_cargs(
    params: MrisHausdorffDistParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_hausdorff_dist")
    cargs.append(execution.input_file(params.get("surface")))
    cargs.append(execution.input_file(params.get("label1")))
    cargs.append(execution.input_file(params.get("label2")))
    if params.get("annot_name") is not None:
        cargs.extend([
            "-a",
            params.get("annot_name")
        ])
    return cargs


def mris_hausdorff_dist_outputs(
    params: MrisHausdorffDistParameters,
    execution: Execution,
) -> MrisHausdorffDistOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisHausdorffDistOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file("hausdorff_output.txt"),
    )
    return ret


def mris_hausdorff_dist_execute(
    params: MrisHausdorffDistParameters,
    execution: Execution,
) -> MrisHausdorffDistOutputs:
    """
    This program computes the Hausdorff distance between two labels on a surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MrisHausdorffDistOutputs`).
    """
    params = execution.params(params)
    cargs = mris_hausdorff_dist_cargs(params, execution)
    ret = mris_hausdorff_dist_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_hausdorff_dist(
    surface: InputPathType,
    label1: InputPathType,
    label2: InputPathType,
    annot_name: str | None = None,
    runner: Runner | None = None,
) -> MrisHausdorffDistOutputs:
    """
    This program computes the Hausdorff distance between two labels on a surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        surface: Surface file on which the labels exist.
        label1: First label file.
        label2: Second label file.
        annot_name: Compute pairwise Hausdorff Distance (HD) between all\
            annotations with the given name.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisHausdorffDistOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_HAUSDORFF_DIST_METADATA)
    params = mris_hausdorff_dist_params(
        surface=surface,
        label1=label1,
        label2=label2,
        annot_name=annot_name,
    )
    return mris_hausdorff_dist_execute(params, execution)


__all__ = [
    "MRIS_HAUSDORFF_DIST_METADATA",
    "MrisHausdorffDistOutputs",
    "MrisHausdorffDistParameters",
    "mris_hausdorff_dist",
    "mris_hausdorff_dist_params",
]
