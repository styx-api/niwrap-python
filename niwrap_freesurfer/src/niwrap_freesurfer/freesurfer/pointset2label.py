# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

POINTSET2LABEL_METADATA = Metadata(
    id="76bc9f6d69a026b807da7960f3bfd93ec5f85c89.boutiques",
    name="pointset2label",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Pointset2labelParameters = typing.TypedDict('Pointset2labelParameters', {
    "__STYX_TYPE__": typing.Literal["pointset2label"],
    "waypoint_file": InputPathType,
    "input_volume": InputPathType,
    "label_value": float,
    "output_volume": str,
    "clear_option": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "pointset2label": pointset2label_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "pointset2label": pointset2label_outputs,
    }.get(t)


class Pointset2labelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `pointset2label(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_label_volume: OutputPathType
    """Output volume label file with applied labels."""


def pointset2label_params(
    waypoint_file: InputPathType,
    input_volume: InputPathType,
    label_value: float,
    output_volume: str,
    clear_option: bool = False,
) -> Pointset2labelParameters:
    """
    Build parameters.
    
    Args:
        waypoint_file: Path to the waypoint file.
        input_volume: Path to the input volume file.
        label_value: Label value to apply at the waypoints.
        output_volume: Path to the output volume label file.
        clear_option: Clear the input volume before processing.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "pointset2label",
        "waypoint_file": waypoint_file,
        "input_volume": input_volume,
        "label_value": label_value,
        "output_volume": output_volume,
        "clear_option": clear_option,
    }
    return params


def pointset2label_cargs(
    params: Pointset2labelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("pointset2label")
    cargs.append(execution.input_file(params.get("waypoint_file")))
    cargs.append(execution.input_file(params.get("input_volume")))
    cargs.append(str(params.get("label_value")))
    cargs.append(params.get("output_volume"))
    if params.get("clear_option"):
        cargs.append("-clear")
    return cargs


def pointset2label_outputs(
    params: Pointset2labelParameters,
    execution: Execution,
) -> Pointset2labelOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Pointset2labelOutputs(
        root=execution.output_file("."),
        output_label_volume=execution.output_file(params.get("output_volume")),
    )
    return ret


def pointset2label_execute(
    params: Pointset2labelParameters,
    execution: Execution,
) -> Pointset2labelOutputs:
    """
    Tool for applying waypoint labels to a volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `Pointset2labelOutputs`).
    """
    params = execution.params(params)
    cargs = pointset2label_cargs(params, execution)
    ret = pointset2label_outputs(params, execution)
    execution.run(cargs)
    return ret


def pointset2label(
    waypoint_file: InputPathType,
    input_volume: InputPathType,
    label_value: float,
    output_volume: str,
    clear_option: bool = False,
    runner: Runner | None = None,
) -> Pointset2labelOutputs:
    """
    Tool for applying waypoint labels to a volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        waypoint_file: Path to the waypoint file.
        input_volume: Path to the input volume file.
        label_value: Label value to apply at the waypoints.
        output_volume: Path to the output volume label file.
        clear_option: Clear the input volume before processing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Pointset2labelOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(POINTSET2LABEL_METADATA)
    params = pointset2label_params(
        waypoint_file=waypoint_file,
        input_volume=input_volume,
        label_value=label_value,
        output_volume=output_volume,
        clear_option=clear_option,
    )
    return pointset2label_execute(params, execution)


__all__ = [
    "POINTSET2LABEL_METADATA",
    "Pointset2labelOutputs",
    "Pointset2labelParameters",
    "pointset2label",
    "pointset2label_params",
]
