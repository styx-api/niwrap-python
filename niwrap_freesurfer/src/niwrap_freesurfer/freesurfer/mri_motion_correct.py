# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MOTION_CORRECT_METADATA = Metadata(
    id="3cfbb0cc88f7a83298127f974e5ce214fa8cdbf7.boutiques",
    name="mri_motion_correct",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMotionCorrectParameters = typing.TypedDict('MriMotionCorrectParameters', {
    "__STYX_TYPE__": typing.Literal["mri_motion_correct"],
    "outfile": str,
    "infiles": list[InputPathType],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_motion_correct": mri_motion_correct_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_motion_correct": mri_motion_correct_outputs,
    }.get(t)


class MriMotionCorrectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_motion_correct(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    corrected_outfile: OutputPathType
    """Corrected MRI image output file."""


def mri_motion_correct_params(
    outfile: str,
    infiles: list[InputPathType],
) -> MriMotionCorrectParameters:
    """
    Build parameters.
    
    Args:
        outfile: Output file where the corrected MRI image(s) will be stored.
        infiles: Input MRI image files to be corrected.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_motion_correct",
        "outfile": outfile,
        "infiles": infiles,
    }
    return params


def mri_motion_correct_cargs(
    params: MriMotionCorrectParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_motion_correct")
    cargs.append(params.get("outfile"))
    cargs.extend([execution.input_file(f) for f in params.get("infiles")])
    return cargs


def mri_motion_correct_outputs(
    params: MriMotionCorrectParameters,
    execution: Execution,
) -> MriMotionCorrectOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMotionCorrectOutputs(
        root=execution.output_file("."),
        corrected_outfile=execution.output_file(params.get("outfile")),
    )
    return ret


def mri_motion_correct_execute(
    params: MriMotionCorrectParameters,
    execution: Execution,
) -> MriMotionCorrectOutputs:
    """
    Tool for correcting motion in MRI scans.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriMotionCorrectOutputs`).
    """
    params = execution.params(params)
    cargs = mri_motion_correct_cargs(params, execution)
    ret = mri_motion_correct_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_motion_correct(
    outfile: str,
    infiles: list[InputPathType],
    runner: Runner | None = None,
) -> MriMotionCorrectOutputs:
    """
    Tool for correcting motion in MRI scans.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        outfile: Output file where the corrected MRI image(s) will be stored.
        infiles: Input MRI image files to be corrected.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMotionCorrectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MOTION_CORRECT_METADATA)
    params = mri_motion_correct_params(
        outfile=outfile,
        infiles=infiles,
    )
    return mri_motion_correct_execute(params, execution)


__all__ = [
    "MRI_MOTION_CORRECT_METADATA",
    "MriMotionCorrectOutputs",
    "MriMotionCorrectParameters",
    "mri_motion_correct",
    "mri_motion_correct_params",
]
