# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_EXTRACT_FCD_FEATURES_METADATA = Metadata(
    id="4dc97ce09339ae602c500d2ce62f291dceb53709.boutiques",
    name="mri_extract_fcd_features",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriExtractFcdFeaturesParameters = typing.TypedDict('MriExtractFcdFeaturesParameters', {
    "__STYX_TYPE__": typing.Literal["mri_extract_fcd_features"],
    "subject": str,
    "hemi": str,
    "output_file": InputPathType,
    "subjects_dir": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_extract_fcd_features": mri_extract_fcd_features_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class MriExtractFcdFeaturesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_extract_fcd_features(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_extract_fcd_features_params(
    subject: str,
    hemi: str,
    output_file: InputPathType,
    subjects_dir: str | None = None,
) -> MriExtractFcdFeaturesParameters:
    """
    Build parameters.
    
    Args:
        subject: The subject identifier.
        hemi: The hemisphere (e.g., lh or rh).
        output_file: Output file path.
        subjects_dir: Specify SUBJECTS_DIR on the command line instead of in\
            the environment.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_extract_fcd_features",
        "subject": subject,
        "hemi": hemi,
        "output_file": output_file,
    }
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    return params


def mri_extract_fcd_features_cargs(
    params: MriExtractFcdFeaturesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_extract_fcd_features")
    cargs.append(params.get("subject"))
    cargs.append(params.get("hemi"))
    cargs.append(execution.input_file(params.get("output_file")))
    if params.get("subjects_dir") is not None:
        cargs.extend([
            "sdir",
            params.get("subjects_dir")
        ])
    return cargs


def mri_extract_fcd_features_outputs(
    params: MriExtractFcdFeaturesParameters,
    execution: Execution,
) -> MriExtractFcdFeaturesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriExtractFcdFeaturesOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_extract_fcd_features_execute(
    params: MriExtractFcdFeaturesParameters,
    execution: Execution,
) -> MriExtractFcdFeaturesOutputs:
    """
    A tool for extracting focal cortical dysplasia features.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriExtractFcdFeaturesOutputs`).
    """
    params = execution.params(params)
    cargs = mri_extract_fcd_features_cargs(params, execution)
    ret = mri_extract_fcd_features_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_extract_fcd_features(
    subject: str,
    hemi: str,
    output_file: InputPathType,
    subjects_dir: str | None = None,
    runner: Runner | None = None,
) -> MriExtractFcdFeaturesOutputs:
    """
    A tool for extracting focal cortical dysplasia features.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: The subject identifier.
        hemi: The hemisphere (e.g., lh or rh).
        output_file: Output file path.
        subjects_dir: Specify SUBJECTS_DIR on the command line instead of in\
            the environment.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriExtractFcdFeaturesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_EXTRACT_FCD_FEATURES_METADATA)
    params = mri_extract_fcd_features_params(
        subject=subject,
        hemi=hemi,
        output_file=output_file,
        subjects_dir=subjects_dir,
    )
    return mri_extract_fcd_features_execute(params, execution)


__all__ = [
    "MRI_EXTRACT_FCD_FEATURES_METADATA",
    "MriExtractFcdFeaturesOutputs",
    "MriExtractFcdFeaturesParameters",
    "mri_extract_fcd_features",
    "mri_extract_fcd_features_params",
]
