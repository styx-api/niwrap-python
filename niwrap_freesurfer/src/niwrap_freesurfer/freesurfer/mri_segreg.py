# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_SEGREG_METADATA = Metadata(
    id="f2669e04710c9f1f9d1fd46259ec2d013c37daf3.boutiques",
    name="mri_segreg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriSegregParameters = typing.TypedDict('MriSegregParameters', {
    "__STYX_TYPE__": typing.Literal["mri_segreg"],
    "input_file": InputPathType,
    "output_file": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_segreg": mri_segreg_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_segreg": mri_segreg_outputs,
    }.get(t)


class MriSegregOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_segreg(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Output file generated by mri_segreg"""


def mri_segreg_params(
    input_file: InputPathType,
    output_file: str = "output.mgz",
) -> MriSegregParameters:
    """
    Build parameters.
    
    Args:
        input_file: Input image file. All formats accepted by mri_convert can\
            be used.
        output_file: Output file for the processed image.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_segreg",
        "input_file": input_file,
        "output_file": output_file,
    }
    return params


def mri_segreg_cargs(
    params: MriSegregParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_segreg")
    cargs.append(execution.input_file(params.get("input_file")))
    cargs.append(params.get("output_file"))
    return cargs


def mri_segreg_outputs(
    params: MriSegregParameters,
    execution: Execution,
) -> MriSegregOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriSegregOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("output_file")),
    )
    return ret


def mri_segreg_execute(
    params: MriSegregParameters,
    execution: Execution,
) -> MriSegregOutputs:
    """
    MRI Segregation tool.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriSegregOutputs`).
    """
    params = execution.params(params)
    cargs = mri_segreg_cargs(params, execution)
    ret = mri_segreg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_segreg(
    input_file: InputPathType,
    output_file: str = "output.mgz",
    runner: Runner | None = None,
) -> MriSegregOutputs:
    """
    MRI Segregation tool.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input image file. All formats accepted by mri_convert can\
            be used.
        output_file: Output file for the processed image.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSegregOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_SEGREG_METADATA)
    params = mri_segreg_params(
        input_file=input_file,
        output_file=output_file,
    )
    return mri_segreg_execute(params, execution)


__all__ = [
    "MRI_SEGREG_METADATA",
    "MriSegregOutputs",
    "MriSegregParameters",
    "mri_segreg",
    "mri_segreg_params",
]
