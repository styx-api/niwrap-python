# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FEAT2SEGSTATS_METADATA = Metadata(
    id="8af7d53f19100c1eda8294eeb0e717ad52e76435.boutiques",
    name="feat2segstats",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Feat2segstatsParameters = typing.TypedDict('Feat2segstatsParameters', {
    "__STYX_TYPE__": typing.Literal["feat2segstats"],
    "feat_dir": str,
    "featdirfile": typing.NotRequired[InputPathType | None],
    "seg_vol": typing.NotRequired[str | None],
    "aseg_flag": bool,
    "aparc_aseg_flag": bool,
    "ctab": typing.NotRequired[InputPathType | None],
    "all_segs_flag": bool,
    "copes_flag": bool,
    "varcopes_flag": bool,
    "zstats_flag": bool,
    "pes_flag": bool,
    "rvar": typing.NotRequired[str | None],
    "example_func": typing.NotRequired[str | None],
    "mask": typing.NotRequired[str | None],
    "mean_func": typing.NotRequired[str | None],
    "stat": str,
    "version_flag": bool,
    "help_flag": bool,
    "debug_flag": bool,
    "nolog_flag": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "feat2segstats": feat2segstats_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "feat2segstats": feat2segstats_outputs,
    }.get(t)


class Feat2segstatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `feat2segstats(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    segstats_output: OutputPathType | None
    """Output segmentation statistics file"""


def feat2segstats_params(
    feat_dir: str,
    stat_: str,
    featdirfile: InputPathType | None = None,
    seg_vol: str | None = None,
    aseg_flag: bool = False,
    aparc_aseg_flag: bool = False,
    ctab: InputPathType | None = None,
    all_segs_flag: bool = False,
    copes_flag: bool = False,
    varcopes_flag: bool = False,
    zstats_flag: bool = False,
    pes_flag: bool = False,
    rvar: str | None = None,
    example_func: str | None = None,
    mask: str | None = None,
    mean_func: str | None = None,
    version_flag: bool = False,
    help_flag: bool = False,
    debug_flag: bool = False,
    nolog_flag: bool = False,
) -> Feat2segstatsParameters:
    """
    Build parameters.
    
    Args:
        feat_dir: Feat output directory.
        stat_: Statistical output.
        featdirfile: File with a list of feat directories.
        seg_vol: Segmentation volume.
        aseg_flag: Use aseg segmentation.
        aparc_aseg_flag: Use aparc+aseg segmentation.
        ctab: Color lookup table, default is\
            FREESURFER_HOME/FreeSurferColorLUT.txt.
        all_segs_flag: Report on all segments, even empty ones.
        copes_flag: Do all copes.
        varcopes_flag: Do all varcopes.
        zstats_flag: Do all zstats.
        pes_flag: Do all pes.
        rvar: Sigma squared values.
        example_func: Example function.
        mask: Probably not too useful.
        mean_func: Mean function.
        version_flag: Print version and exit.
        help_flag: Print help and exit.
        debug_flag: Turn on debugging.
        nolog_flag: Do not create a log file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "feat2segstats",
        "feat_dir": feat_dir,
        "aseg_flag": aseg_flag,
        "aparc_aseg_flag": aparc_aseg_flag,
        "all_segs_flag": all_segs_flag,
        "copes_flag": copes_flag,
        "varcopes_flag": varcopes_flag,
        "zstats_flag": zstats_flag,
        "pes_flag": pes_flag,
        "stat": stat_,
        "version_flag": version_flag,
        "help_flag": help_flag,
        "debug_flag": debug_flag,
        "nolog_flag": nolog_flag,
    }
    if featdirfile is not None:
        params["featdirfile"] = featdirfile
    if seg_vol is not None:
        params["seg_vol"] = seg_vol
    if ctab is not None:
        params["ctab"] = ctab
    if rvar is not None:
        params["rvar"] = rvar
    if example_func is not None:
        params["example_func"] = example_func
    if mask is not None:
        params["mask"] = mask
    if mean_func is not None:
        params["mean_func"] = mean_func
    return params


def feat2segstats_cargs(
    params: Feat2segstatsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("feat2segstats")
    cargs.extend([
        "--feat",
        params.get("feat_dir")
    ])
    if params.get("featdirfile") is not None:
        cargs.extend([
            "--featdirfile",
            execution.input_file(params.get("featdirfile"))
        ])
    if params.get("seg_vol") is not None:
        cargs.extend([
            "--seg",
            params.get("seg_vol")
        ])
    if params.get("aseg_flag"):
        cargs.append("--aseg")
    if params.get("aparc_aseg_flag"):
        cargs.append("--aparc+aseg")
    if params.get("ctab") is not None:
        cargs.extend([
            "--ctab",
            execution.input_file(params.get("ctab"))
        ])
    if params.get("all_segs_flag"):
        cargs.append("--all-segs")
    if params.get("copes_flag"):
        cargs.append("--copes")
    if params.get("varcopes_flag"):
        cargs.append("--varcopes")
    if params.get("zstats_flag"):
        cargs.append("--zstats")
    if params.get("pes_flag"):
        cargs.append("--pes")
    if params.get("rvar") is not None:
        cargs.extend([
            "--rvar",
            params.get("rvar")
        ])
    if params.get("example_func") is not None:
        cargs.extend([
            "--exf",
            params.get("example_func")
        ])
    if params.get("mask") is not None:
        cargs.extend([
            "--mask",
            params.get("mask")
        ])
    if params.get("mean_func") is not None:
        cargs.extend([
            "--mean_func",
            params.get("mean_func")
        ])
    cargs.extend([
        "--stat",
        params.get("stat")
    ])
    if params.get("version_flag"):
        cargs.append("--version")
    if params.get("help_flag"):
        cargs.append("--help")
    if params.get("debug_flag"):
        cargs.append("--debug")
    if params.get("nolog_flag"):
        cargs.append("--nolog")
    return cargs


def feat2segstats_outputs(
    params: Feat2segstatsParameters,
    execution: Execution,
) -> Feat2segstatsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Feat2segstatsOutputs(
        root=execution.output_file("."),
        segstats_output=execution.output_file(params.get("feat_dir") + "/freesurfer/segstats/" + params.get("seg_vol") + "/" + params.get("stat") + ".dat") if (params.get("seg_vol") is not None) else None,
    )
    return ret


def feat2segstats_execute(
    params: Feat2segstatsParameters,
    execution: Execution,
) -> Feat2segstatsOutputs:
    """
    Computes segmentation summaries and stores output in
    featdir/freesurfer/segstats/segvol/statname.dat.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `Feat2segstatsOutputs`).
    """
    params = execution.params(params)
    cargs = feat2segstats_cargs(params, execution)
    ret = feat2segstats_outputs(params, execution)
    execution.run(cargs)
    return ret


def feat2segstats(
    feat_dir: str,
    stat_: str,
    featdirfile: InputPathType | None = None,
    seg_vol: str | None = None,
    aseg_flag: bool = False,
    aparc_aseg_flag: bool = False,
    ctab: InputPathType | None = None,
    all_segs_flag: bool = False,
    copes_flag: bool = False,
    varcopes_flag: bool = False,
    zstats_flag: bool = False,
    pes_flag: bool = False,
    rvar: str | None = None,
    example_func: str | None = None,
    mask: str | None = None,
    mean_func: str | None = None,
    version_flag: bool = False,
    help_flag: bool = False,
    debug_flag: bool = False,
    nolog_flag: bool = False,
    runner: Runner | None = None,
) -> Feat2segstatsOutputs:
    """
    Computes segmentation summaries and stores output in
    featdir/freesurfer/segstats/segvol/statname.dat.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        feat_dir: Feat output directory.
        stat_: Statistical output.
        featdirfile: File with a list of feat directories.
        seg_vol: Segmentation volume.
        aseg_flag: Use aseg segmentation.
        aparc_aseg_flag: Use aparc+aseg segmentation.
        ctab: Color lookup table, default is\
            FREESURFER_HOME/FreeSurferColorLUT.txt.
        all_segs_flag: Report on all segments, even empty ones.
        copes_flag: Do all copes.
        varcopes_flag: Do all varcopes.
        zstats_flag: Do all zstats.
        pes_flag: Do all pes.
        rvar: Sigma squared values.
        example_func: Example function.
        mask: Probably not too useful.
        mean_func: Mean function.
        version_flag: Print version and exit.
        help_flag: Print help and exit.
        debug_flag: Turn on debugging.
        nolog_flag: Do not create a log file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Feat2segstatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FEAT2SEGSTATS_METADATA)
    params = feat2segstats_params(
        feat_dir=feat_dir,
        featdirfile=featdirfile,
        seg_vol=seg_vol,
        aseg_flag=aseg_flag,
        aparc_aseg_flag=aparc_aseg_flag,
        ctab=ctab,
        all_segs_flag=all_segs_flag,
        copes_flag=copes_flag,
        varcopes_flag=varcopes_flag,
        zstats_flag=zstats_flag,
        pes_flag=pes_flag,
        rvar=rvar,
        example_func=example_func,
        mask=mask,
        mean_func=mean_func,
        stat_=stat_,
        version_flag=version_flag,
        help_flag=help_flag,
        debug_flag=debug_flag,
        nolog_flag=nolog_flag,
    )
    return feat2segstats_execute(params, execution)


__all__ = [
    "FEAT2SEGSTATS_METADATA",
    "Feat2segstatsOutputs",
    "Feat2segstatsParameters",
    "feat2segstats",
    "feat2segstats_params",
]
