# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

REGISTER_CSH_METADATA = Metadata(
    id="8e13f3c3638f86e0bcc4bf3ee729a031f8071c67.boutiques",
    name="register.csh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


RegisterCshParameters = typing.TypedDict('RegisterCshParameters', {
    "__STYX_TYPE__": typing.Literal["register.csh"],
    "base_image": InputPathType,
    "new_image": InputPathType,
    "options": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "register.csh": register_csh_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "register.csh": register_csh_outputs,
    }.get(t)


class RegisterCshOutputs(typing.NamedTuple):
    """
    Output object returned when calling `register_csh(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    registered_image: OutputPathType
    """The output registered image"""


def register_csh_params(
    base_image: InputPathType,
    new_image: InputPathType,
    options: str | None = None,
) -> RegisterCshParameters:
    """
    Build parameters.
    
    Args:
        base_image: The base image for registration.
        new_image: The new image to be registered to the base image.
        options: Additional options for the register.csh command.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "register.csh",
        "base_image": base_image,
        "new_image": new_image,
    }
    if options is not None:
        params["options"] = options
    return params


def register_csh_cargs(
    params: RegisterCshParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("register.csh")
    cargs.append(execution.input_file(params.get("base_image")))
    cargs.append(execution.input_file(params.get("new_image")))
    if params.get("options") is not None:
        cargs.append(params.get("options"))
    return cargs


def register_csh_outputs(
    params: RegisterCshParameters,
    execution: Execution,
) -> RegisterCshOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RegisterCshOutputs(
        root=execution.output_file("."),
        registered_image=execution.output_file(pathlib.Path(params.get("new_image")).name + "_registered"),
    )
    return ret


def register_csh_execute(
    params: RegisterCshParameters,
    execution: Execution,
) -> RegisterCshOutputs:
    """
    A script for registering MRI images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `RegisterCshOutputs`).
    """
    params = execution.params(params)
    cargs = register_csh_cargs(params, execution)
    ret = register_csh_outputs(params, execution)
    execution.run(cargs)
    return ret


def register_csh(
    base_image: InputPathType,
    new_image: InputPathType,
    options: str | None = None,
    runner: Runner | None = None,
) -> RegisterCshOutputs:
    """
    A script for registering MRI images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        base_image: The base image for registration.
        new_image: The new image to be registered to the base image.
        options: Additional options for the register.csh command.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RegisterCshOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(REGISTER_CSH_METADATA)
    params = register_csh_params(
        base_image=base_image,
        new_image=new_image,
        options=options,
    )
    return register_csh_execute(params, execution)


__all__ = [
    "REGISTER_CSH_METADATA",
    "RegisterCshOutputs",
    "RegisterCshParameters",
    "register_csh",
    "register_csh_params",
]
