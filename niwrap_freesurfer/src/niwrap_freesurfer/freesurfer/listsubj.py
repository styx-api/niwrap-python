# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LISTSUBJ_METADATA = Metadata(
    id="e9369381138405e14a70273bc76d2a91dd2f8045.boutiques",
    name="listsubj",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


ListsubjParameters = typing.TypedDict('ListsubjParameters', {
    "__STYX_TYPE__": typing.Literal["listsubj"],
    "subject_dir": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "listsubj": listsubj_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class ListsubjOutputs(typing.NamedTuple):
    """
    Output object returned when calling `listsubj(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def listsubj_params(
    subject_dir: str,
) -> ListsubjParameters:
    """
    Build parameters.
    
    Args:
        subject_dir: Directory where subjects are stored.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "listsubj",
        "subject_dir": subject_dir,
    }
    return params


def listsubj_cargs(
    params: ListsubjParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("listsubj")
    cargs.append("[OPTIONS]")
    cargs.append(params.get("subject_dir"))
    return cargs


def listsubj_outputs(
    params: ListsubjParameters,
    execution: Execution,
) -> ListsubjOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ListsubjOutputs(
        root=execution.output_file("."),
    )
    return ret


def listsubj_execute(
    params: ListsubjParameters,
    execution: Execution,
) -> ListsubjOutputs:
    """
    List subject IDs in SUBJECT_DIR.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `ListsubjOutputs`).
    """
    params = execution.params(params)
    cargs = listsubj_cargs(params, execution)
    ret = listsubj_outputs(params, execution)
    execution.run(cargs)
    return ret


def listsubj(
    subject_dir: str,
    runner: Runner | None = None,
) -> ListsubjOutputs:
    """
    List subject IDs in SUBJECT_DIR.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_dir: Directory where subjects are stored.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ListsubjOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LISTSUBJ_METADATA)
    params = listsubj_params(
        subject_dir=subject_dir,
    )
    return listsubj_execute(params, execution)


__all__ = [
    "LISTSUBJ_METADATA",
    "ListsubjOutputs",
    "ListsubjParameters",
    "listsubj",
    "listsubj_params",
]
