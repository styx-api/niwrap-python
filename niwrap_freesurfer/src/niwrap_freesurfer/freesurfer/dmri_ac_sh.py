# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DMRI_AC_SH_METADATA = Metadata(
    id="287622351d46590c1391cebf35d45dbab7c6ab7e.boutiques",
    name="dmri_ac.sh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DmriAcShParameters = typing.TypedDict('DmriAcShParameters', {
    "@type": typing.Literal["freesurfer.dmri_ac.sh"],
    "additional_args": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "freesurfer.dmri_ac.sh": dmri_ac_sh_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class DmriAcShOutputs(typing.NamedTuple):
    """
    Output object returned when calling `dmri_ac_sh(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def dmri_ac_sh_params(
    additional_args: str | None = None,
) -> DmriAcShParameters:
    """
    Build parameters.
    
    Args:
        additional_args: Additional arguments for dmri_ac.sh script.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer.dmri_ac.sh",
    }
    if additional_args is not None:
        params["additional_args"] = additional_args
    return params


def dmri_ac_sh_cargs(
    params: DmriAcShParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dmri_ac.sh")
    if params.get("additional_args") is not None:
        cargs.append(params.get("additional_args"))
    return cargs


def dmri_ac_sh_outputs(
    params: DmriAcShParameters,
    execution: Execution,
) -> DmriAcShOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DmriAcShOutputs(
        root=execution.output_file("."),
    )
    return ret


def dmri_ac_sh_execute(
    params: DmriAcShParameters,
    runner: Runner | None = None,
) -> DmriAcShOutputs:
    """
    dmri_ac.sh
    
    A script related to diffusion MRI processing in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriAcShOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DMRI_AC_SH_METADATA)
    params = execution.params(params)
    cargs = dmri_ac_sh_cargs(params, execution)
    ret = dmri_ac_sh_outputs(params, execution)
    execution.run(cargs)
    return ret


def dmri_ac_sh(
    additional_args: str | None = None,
    runner: Runner | None = None,
) -> DmriAcShOutputs:
    """
    dmri_ac.sh
    
    A script related to diffusion MRI processing in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        additional_args: Additional arguments for dmri_ac.sh script.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriAcShOutputs`).
    """
    params = dmri_ac_sh_params(
        additional_args=additional_args,
    )
    return dmri_ac_sh_execute(params, runner)


__all__ = [
    "DMRI_AC_SH_METADATA",
    "DmriAcShOutputs",
    "DmriAcShParameters",
    "dmri_ac_sh",
    "dmri_ac_sh_execute",
    "dmri_ac_sh_params",
]
