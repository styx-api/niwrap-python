# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_RF_LABEL_METADATA = Metadata(
    id="7f1e3e28634018fe4c2b21e53465fa3c07f2cb04.boutiques",
    name="mris_rf_label",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisRfLabelParameters = typing.TypedDict('MrisRfLabelParameters', {
    "__STYX_TYPE__": typing.Literal["mris_rf_label"],
    "subject": str,
    "rf_classifier": str,
    "output_name": str,
    "hemi": typing.NotRequired[str | None],
    "surf": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mris_rf_label": mris_rf_label_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class MrisRfLabelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mris_rf_label(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_rf_label_params(
    subject: str,
    rf_classifier: str,
    output_name: str,
    hemi: str | None = None,
    surf: str | None = None,
) -> MrisRfLabelParameters:
    """
    Build parameters.
    
    Args:
        subject: Subject identifier.
        rf_classifier: Random Forest classifier.
        output_name: Output name.
        hemi: Process specified hemisphere instead of default (lh).
        surf: Change default surface name from 'white' to specified surface.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mris_rf_label",
        "subject": subject,
        "rf_classifier": rf_classifier,
        "output_name": output_name,
    }
    if hemi is not None:
        params["hemi"] = hemi
    if surf is not None:
        params["surf"] = surf
    return params


def mris_rf_label_cargs(
    params: MrisRfLabelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_rf_label")
    cargs.append(params.get("subject"))
    cargs.append(params.get("rf_classifier"))
    cargs.append(params.get("output_name"))
    if params.get("hemi") is not None:
        cargs.extend([
            "--hemi",
            params.get("hemi")
        ])
    if params.get("surf") is not None:
        cargs.extend([
            "--surf",
            params.get("surf")
        ])
    return cargs


def mris_rf_label_outputs(
    params: MrisRfLabelParameters,
    execution: Execution,
) -> MrisRfLabelOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisRfLabelOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_rf_label_execute(
    params: MrisRfLabelParameters,
    execution: Execution,
) -> MrisRfLabelOutputs:
    """
    A tool for labeling regions of a surface using random forest classification.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MrisRfLabelOutputs`).
    """
    params = execution.params(params)
    cargs = mris_rf_label_cargs(params, execution)
    ret = mris_rf_label_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_rf_label(
    subject: str,
    rf_classifier: str,
    output_name: str,
    hemi: str | None = None,
    surf: str | None = None,
    runner: Runner | None = None,
) -> MrisRfLabelOutputs:
    """
    A tool for labeling regions of a surface using random forest classification.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject identifier.
        rf_classifier: Random Forest classifier.
        output_name: Output name.
        hemi: Process specified hemisphere instead of default (lh).
        surf: Change default surface name from 'white' to specified surface.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisRfLabelOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_RF_LABEL_METADATA)
    params = mris_rf_label_params(
        subject=subject,
        rf_classifier=rf_classifier,
        output_name=output_name,
        hemi=hemi,
        surf=surf,
    )
    return mris_rf_label_execute(params, execution)


__all__ = [
    "MRIS_RF_LABEL_METADATA",
    "MrisRfLabelOutputs",
    "MrisRfLabelParameters",
    "mris_rf_label",
    "mris_rf_label_params",
]
