# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FVCOMPARE_METADATA = Metadata(
    id="84e27ef54cc73075db70cca3ebbdd40631c9472d.boutiques",
    name="fvcompare",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FvcompareParameters = typing.TypedDict('FvcompareParameters', {
    "__STYX_TYPE__": typing.Literal["fvcompare"],
    "subject1": str,
    "subject2": str,
    "subject_dir1": typing.NotRequired[str | None],
    "subject_dir2": typing.NotRequired[str | None],
    "name1": typing.NotRequired[str | None],
    "name2": typing.NotRequired[str | None],
    "color1": typing.NotRequired[str | None],
    "volume": typing.NotRequired[str | None],
    "segmentation": typing.NotRequired[str | None],
    "aseg": bool,
    "no_seg": bool,
    "right_hemi": bool,
    "no_surf": bool,
    "gray_levels": typing.NotRequired[list[float] | None],
    "cursor_position": typing.NotRequired[list[float] | None],
    "zoom_level": typing.NotRequired[float | None],
    "annotation": typing.NotRequired[str | None],
    "aparc": bool,
    "inflated": bool,
    "white": bool,
    "orig": bool,
    "surf_name": typing.NotRequired[str | None],
    "pointset": typing.NotRequired[InputPathType | None],
    "wot2": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fvcompare": fvcompare_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class FvcompareOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fvcompare(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fvcompare_params(
    subject1: str,
    subject2: str,
    subject_dir1: str | None = None,
    subject_dir2: str | None = None,
    name1: str | None = None,
    name2: str | None = None,
    color1: str | None = None,
    volume: str | None = None,
    segmentation: str | None = None,
    aseg: bool = False,
    no_seg: bool = False,
    right_hemi: bool = False,
    no_surf: bool = False,
    gray_levels: list[float] | None = None,
    cursor_position: list[float] | None = None,
    zoom_level: float | None = None,
    annotation: str | None = None,
    aparc: bool = False,
    inflated: bool = False,
    white: bool = False,
    orig: bool = False,
    surf_name: str | None = None,
    pointset: InputPathType | None = None,
    wot2: bool = False,
) -> FvcompareParameters:
    """
    Build parameters.
    
    Args:
        subject1: Subject 1 identifier.
        subject2: Subject 2 identifier.
        subject_dir1: Directory path for Subject 1.
        subject_dir2: Directory path for Subject 2.
        name1: Name associated with Subject 1 (default: s1).
        name2: Name associated with Subject 2 (default: s2).
        color1: Set surface colors for Subject 1.
        volume: Volume name found in subject/mri (default: brainmask.mgz, can\
            have multiple).
        segmentation: Segmentation name found in subject/mri (default:\
            aparc+aseg.mgz, can have multiple).
        aseg: Add aseg.mgz to segmentation list.
        no_seg: Do not display segmentations.
        right_hemi: Only display right hemisphere.
        no_surf: Do not display surfaces.
        gray_levels: Set gray scale levels.
        cursor_position: Place cursor at given location and center Field of\
            View.
        zoom_level: Set zoom level.
        annotation: Load annotation onto surfaces.
        aparc: Load aparc.annot onto surfaces.
        inflated: Load inflated surfaces in addition to white and pial.
        white: Only show white surfaces.
        orig: Only show orig.nofix and orig surfaces.
        surf_name: Only show specified surface name.
        pointset: Load point set file.
        wot2: Include the ?h.woT2.pial surfs.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fvcompare",
        "subject1": subject1,
        "subject2": subject2,
        "aseg": aseg,
        "no_seg": no_seg,
        "right_hemi": right_hemi,
        "no_surf": no_surf,
        "aparc": aparc,
        "inflated": inflated,
        "white": white,
        "orig": orig,
        "wot2": wot2,
    }
    if subject_dir1 is not None:
        params["subject_dir1"] = subject_dir1
    if subject_dir2 is not None:
        params["subject_dir2"] = subject_dir2
    if name1 is not None:
        params["name1"] = name1
    if name2 is not None:
        params["name2"] = name2
    if color1 is not None:
        params["color1"] = color1
    if volume is not None:
        params["volume"] = volume
    if segmentation is not None:
        params["segmentation"] = segmentation
    if gray_levels is not None:
        params["gray_levels"] = gray_levels
    if cursor_position is not None:
        params["cursor_position"] = cursor_position
    if zoom_level is not None:
        params["zoom_level"] = zoom_level
    if annotation is not None:
        params["annotation"] = annotation
    if surf_name is not None:
        params["surf_name"] = surf_name
    if pointset is not None:
        params["pointset"] = pointset
    return params


def fvcompare_cargs(
    params: FvcompareParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fvcompare")
    cargs.extend([
        "--s1",
        params.get("subject1")
    ])
    cargs.extend([
        "--s2",
        params.get("subject2")
    ])
    if params.get("subject_dir1") is not None:
        cargs.extend([
            "--sd1",
            params.get("subject_dir1")
        ])
    if params.get("subject_dir2") is not None:
        cargs.extend([
            "--sd2",
            params.get("subject_dir2")
        ])
    if params.get("name1") is not None:
        cargs.extend([
            "--n1",
            params.get("name1")
        ])
    if params.get("name2") is not None:
        cargs.extend([
            "--n2",
            params.get("name2")
        ])
    if params.get("color1") is not None:
        cargs.extend([
            "--c1",
            params.get("color1")
        ])
    if params.get("volume") is not None:
        cargs.extend([
            "--vol",
            params.get("volume")
        ])
    if params.get("segmentation") is not None:
        cargs.extend([
            "--seg",
            params.get("segmentation")
        ])
    if params.get("aseg"):
        cargs.append("--aseg")
    if params.get("no_seg"):
        cargs.append("--no-seg")
    if params.get("right_hemi"):
        cargs.append("--rh")
    if params.get("no_surf"):
        cargs.append("--no-surf")
    if params.get("gray_levels") is not None:
        cargs.extend([
            "--gray",
            *map(str, params.get("gray_levels"))
        ])
    if params.get("cursor_position") is not None:
        cargs.extend([
            "--crs",
            *map(str, params.get("cursor_position"))
        ])
    if params.get("zoom_level") is not None:
        cargs.extend([
            "--zoom",
            str(params.get("zoom_level"))
        ])
    if params.get("annotation") is not None:
        cargs.extend([
            "--annot",
            params.get("annotation")
        ])
    if params.get("aparc"):
        cargs.append("--aparc")
    if params.get("inflated"):
        cargs.append("--inflated")
    if params.get("white"):
        cargs.append("--white")
    if params.get("orig"):
        cargs.append("--orig")
    if params.get("surf_name") is not None:
        cargs.extend([
            "--surf",
            params.get("surf_name")
        ])
    if params.get("pointset") is not None:
        cargs.extend([
            "--p",
            execution.input_file(params.get("pointset"))
        ])
    if params.get("wot2"):
        cargs.append("--wot2")
    return cargs


def fvcompare_outputs(
    params: FvcompareParameters,
    execution: Execution,
) -> FvcompareOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FvcompareOutputs(
        root=execution.output_file("."),
    )
    return ret


def fvcompare_execute(
    params: FvcompareParameters,
    execution: Execution,
) -> FvcompareOutputs:
    """
    Simultaneously loads volume, segmentation, and surface data from two subjects in
    freeview, for comparing across time or different analysis methods.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FvcompareOutputs`).
    """
    params = execution.params(params)
    cargs = fvcompare_cargs(params, execution)
    ret = fvcompare_outputs(params, execution)
    execution.run(cargs)
    return ret


def fvcompare(
    subject1: str,
    subject2: str,
    subject_dir1: str | None = None,
    subject_dir2: str | None = None,
    name1: str | None = None,
    name2: str | None = None,
    color1: str | None = None,
    volume: str | None = None,
    segmentation: str | None = None,
    aseg: bool = False,
    no_seg: bool = False,
    right_hemi: bool = False,
    no_surf: bool = False,
    gray_levels: list[float] | None = None,
    cursor_position: list[float] | None = None,
    zoom_level: float | None = None,
    annotation: str | None = None,
    aparc: bool = False,
    inflated: bool = False,
    white: bool = False,
    orig: bool = False,
    surf_name: str | None = None,
    pointset: InputPathType | None = None,
    wot2: bool = False,
    runner: Runner | None = None,
) -> FvcompareOutputs:
    """
    Simultaneously loads volume, segmentation, and surface data from two subjects in
    freeview, for comparing across time or different analysis methods.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject1: Subject 1 identifier.
        subject2: Subject 2 identifier.
        subject_dir1: Directory path for Subject 1.
        subject_dir2: Directory path for Subject 2.
        name1: Name associated with Subject 1 (default: s1).
        name2: Name associated with Subject 2 (default: s2).
        color1: Set surface colors for Subject 1.
        volume: Volume name found in subject/mri (default: brainmask.mgz, can\
            have multiple).
        segmentation: Segmentation name found in subject/mri (default:\
            aparc+aseg.mgz, can have multiple).
        aseg: Add aseg.mgz to segmentation list.
        no_seg: Do not display segmentations.
        right_hemi: Only display right hemisphere.
        no_surf: Do not display surfaces.
        gray_levels: Set gray scale levels.
        cursor_position: Place cursor at given location and center Field of\
            View.
        zoom_level: Set zoom level.
        annotation: Load annotation onto surfaces.
        aparc: Load aparc.annot onto surfaces.
        inflated: Load inflated surfaces in addition to white and pial.
        white: Only show white surfaces.
        orig: Only show orig.nofix and orig surfaces.
        surf_name: Only show specified surface name.
        pointset: Load point set file.
        wot2: Include the ?h.woT2.pial surfs.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FvcompareOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FVCOMPARE_METADATA)
    params = fvcompare_params(
        subject1=subject1,
        subject2=subject2,
        subject_dir1=subject_dir1,
        subject_dir2=subject_dir2,
        name1=name1,
        name2=name2,
        color1=color1,
        volume=volume,
        segmentation=segmentation,
        aseg=aseg,
        no_seg=no_seg,
        right_hemi=right_hemi,
        no_surf=no_surf,
        gray_levels=gray_levels,
        cursor_position=cursor_position,
        zoom_level=zoom_level,
        annotation=annotation,
        aparc=aparc,
        inflated=inflated,
        white=white,
        orig=orig,
        surf_name=surf_name,
        pointset=pointset,
        wot2=wot2,
    )
    return fvcompare_execute(params, execution)


__all__ = [
    "FVCOMPARE_METADATA",
    "FvcompareOutputs",
    "FvcompareParameters",
    "fvcompare",
    "fvcompare_params",
]
