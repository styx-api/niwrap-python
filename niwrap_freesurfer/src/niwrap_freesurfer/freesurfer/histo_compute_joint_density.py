# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

HISTO_COMPUTE_JOINT_DENSITY_METADATA = Metadata(
    id="f724dcdabbfe196e5a6d9bc856c3b1b0e765be9b.boutiques",
    name="histo_compute_joint_density",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


HistoComputeJointDensityParameters = typing.TypedDict('HistoComputeJointDensityParameters', {
    "__STYX_TYPE__": typing.Literal["histo_compute_joint_density"],
    "volume1": InputPathType,
    "volume2": InputPathType,
    "joint_density_file": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "histo_compute_joint_density": histo_compute_joint_density_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "histo_compute_joint_density": histo_compute_joint_density_outputs,
    }.get(t)


class HistoComputeJointDensityOutputs(typing.NamedTuple):
    """
    Output object returned when calling `histo_compute_joint_density(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_joint_density: OutputPathType
    """Computed joint density output file"""


def histo_compute_joint_density_params(
    volume1: InputPathType,
    volume2: InputPathType,
    joint_density_file: str,
) -> HistoComputeJointDensityParameters:
    """
    Build parameters.
    
    Args:
        volume1: Input volume 1.
        volume2: Input volume 2.
        joint_density_file: Output joint density file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "histo_compute_joint_density",
        "volume1": volume1,
        "volume2": volume2,
        "joint_density_file": joint_density_file,
    }
    return params


def histo_compute_joint_density_cargs(
    params: HistoComputeJointDensityParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("histo_compute_joint_density")
    cargs.append(execution.input_file(params.get("volume1")))
    cargs.append(execution.input_file(params.get("volume2")))
    cargs.append(params.get("joint_density_file"))
    return cargs


def histo_compute_joint_density_outputs(
    params: HistoComputeJointDensityParameters,
    execution: Execution,
) -> HistoComputeJointDensityOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = HistoComputeJointDensityOutputs(
        root=execution.output_file("."),
        output_joint_density=execution.output_file(params.get("joint_density_file")),
    )
    return ret


def histo_compute_joint_density_execute(
    params: HistoComputeJointDensityParameters,
    execution: Execution,
) -> HistoComputeJointDensityOutputs:
    """
    A tool to compute the joint density of two volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `HistoComputeJointDensityOutputs`).
    """
    params = execution.params(params)
    cargs = histo_compute_joint_density_cargs(params, execution)
    ret = histo_compute_joint_density_outputs(params, execution)
    execution.run(cargs)
    return ret


def histo_compute_joint_density(
    volume1: InputPathType,
    volume2: InputPathType,
    joint_density_file: str,
    runner: Runner | None = None,
) -> HistoComputeJointDensityOutputs:
    """
    A tool to compute the joint density of two volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        volume1: Input volume 1.
        volume2: Input volume 2.
        joint_density_file: Output joint density file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HistoComputeJointDensityOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(HISTO_COMPUTE_JOINT_DENSITY_METADATA)
    params = histo_compute_joint_density_params(
        volume1=volume1,
        volume2=volume2,
        joint_density_file=joint_density_file,
    )
    return histo_compute_joint_density_execute(params, execution)


__all__ = [
    "HISTO_COMPUTE_JOINT_DENSITY_METADATA",
    "HistoComputeJointDensityOutputs",
    "HistoComputeJointDensityParameters",
    "histo_compute_joint_density",
    "histo_compute_joint_density_params",
]
