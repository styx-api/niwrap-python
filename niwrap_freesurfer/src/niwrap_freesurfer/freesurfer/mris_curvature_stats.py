# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_CURVATURE_STATS_METADATA = Metadata(
    id="471b147c9e4a5986d26ffc5619a8d1ade9f883a3.boutiques",
    name="mris_curvature_stats",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisCurvatureStatsParameters = typing.TypedDict('MrisCurvatureStatsParameters', {
    "__STYX_TYPE__": typing.Literal["mris_curvature_stats"],
    "subject_name": str,
    "hemisphere": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mris_curvature_stats": mris_curvature_stats_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mris_curvature_stats": mris_curvature_stats_outputs,
    }.get(t)


class MrisCurvatureStatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mris_curvature_stats(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    scaled_curvature_file: OutputPathType
    """Scaled curvature file."""


def mris_curvature_stats_params(
    subject_name: str,
    hemisphere: str,
) -> MrisCurvatureStatsParameters:
    """
    Build parameters.
    
    Args:
        subject_name: Subject name defined in the SUBJECTS_DIR.
        hemisphere: Hemisphere, can be 'lh' or 'rh'.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mris_curvature_stats",
        "subject_name": subject_name,
        "hemisphere": hemisphere,
    }
    return params


def mris_curvature_stats_cargs(
    params: MrisCurvatureStatsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_curvature_stats")
    cargs.append("[OPTIONS]")
    cargs.append(params.get("subject_name"))
    cargs.append(params.get("hemisphere"))
    cargs.append("[CURVFILE...]")
    return cargs


def mris_curvature_stats_outputs(
    params: MrisCurvatureStatsParameters,
    execution: Execution,
) -> MrisCurvatureStatsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisCurvatureStatsOutputs(
        root=execution.output_file("."),
        scaled_curvature_file=execution.output_file(params.get("subject_name") + "/surf/" + params.get("hemisphere") + ".[CURVATURE_FILES].scaled.crv"),
    )
    return ret


def mris_curvature_stats_execute(
    params: MrisCurvatureStatsParameters,
    execution: Execution,
) -> MrisCurvatureStatsOutputs:
    """
    Tool for calculating statistics on surface curvature values.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MrisCurvatureStatsOutputs`).
    """
    params = execution.params(params)
    cargs = mris_curvature_stats_cargs(params, execution)
    ret = mris_curvature_stats_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_curvature_stats(
    subject_name: str,
    hemisphere: str,
    runner: Runner | None = None,
) -> MrisCurvatureStatsOutputs:
    """
    Tool for calculating statistics on surface curvature values.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_name: Subject name defined in the SUBJECTS_DIR.
        hemisphere: Hemisphere, can be 'lh' or 'rh'.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisCurvatureStatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_CURVATURE_STATS_METADATA)
    params = mris_curvature_stats_params(
        subject_name=subject_name,
        hemisphere=hemisphere,
    )
    return mris_curvature_stats_execute(params, execution)


__all__ = [
    "MRIS_CURVATURE_STATS_METADATA",
    "MrisCurvatureStatsOutputs",
    "MrisCurvatureStatsParameters",
    "mris_curvature_stats",
    "mris_curvature_stats_params",
]
