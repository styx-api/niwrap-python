# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEGMENT_MONKEY_METADATA = Metadata(
    id="4dccc2f58e68c24781760f51b33e78d977f7eaa8.boutiques",
    name="segment_monkey",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SegmentMonkeyParameters = typing.TypedDict('SegmentMonkeyParameters', {
    "__STYX_TYPE__": typing.Literal["segment_monkey"],
    "control_points": list[str],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "segment_monkey": segment_monkey_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class SegmentMonkeyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `segment_monkey(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def segment_monkey_params(
    control_points: list[str],
) -> SegmentMonkeyParameters:
    """
    Build parameters.
    
    Args:
        control_points: List of control points required for segmentation.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "segment_monkey",
        "control_points": control_points,
    }
    return params


def segment_monkey_cargs(
    params: SegmentMonkeyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("segment_monkey")
    cargs.extend(params.get("control_points"))
    return cargs


def segment_monkey_outputs(
    params: SegmentMonkeyParameters,
    execution: Execution,
) -> SegmentMonkeyOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SegmentMonkeyOutputs(
        root=execution.output_file("."),
    )
    return ret


def segment_monkey_execute(
    params: SegmentMonkeyParameters,
    execution: Execution,
) -> SegmentMonkeyOutputs:
    """
    A tool for segmenting images using specified control points.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `SegmentMonkeyOutputs`).
    """
    params = execution.params(params)
    cargs = segment_monkey_cargs(params, execution)
    ret = segment_monkey_outputs(params, execution)
    execution.run(cargs)
    return ret


def segment_monkey(
    control_points: list[str],
    runner: Runner | None = None,
) -> SegmentMonkeyOutputs:
    """
    A tool for segmenting images using specified control points.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        control_points: List of control points required for segmentation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentMonkeyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEGMENT_MONKEY_METADATA)
    params = segment_monkey_params(
        control_points=control_points,
    )
    return segment_monkey_execute(params, execution)


__all__ = [
    "SEGMENT_MONKEY_METADATA",
    "SegmentMonkeyOutputs",
    "SegmentMonkeyParameters",
    "segment_monkey",
    "segment_monkey_params",
]
