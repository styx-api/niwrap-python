# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SLICETIMER_FSL_METADATA = Metadata(
    id="27673c86089b795cd88a005218734e798ec23211.boutiques",
    name="slicetimer.fsl",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SlicetimerFslParameters = typing.TypedDict('SlicetimerFslParameters', {
    "__STYX_TYPE__": typing.Literal["slicetimer.fsl"],
    "infile": InputPathType,
    "outfile": typing.NotRequired[str | None],
    "tr": typing.NotRequired[float | None],
    "direction": typing.NotRequired[typing.Literal["x", "y", "z"] | None],
    "interleaved": bool,
    "reverse": bool,
    "custom_timings": typing.NotRequired[InputPathType | None],
    "global_shift": typing.NotRequired[float | None],
    "custom_interleave_order": typing.NotRequired[InputPathType | None],
    "verbose": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "slicetimer.fsl": slicetimer_fsl_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "slicetimer.fsl": slicetimer_fsl_outputs,
    }.get(t)


class SlicetimerFslOutputs(typing.NamedTuple):
    """
    Output object returned when calling `slicetimer_fsl(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    corrected_timeseries: OutputPathType | None
    """Corrected output timeseries"""


def slicetimer_fsl_params(
    infile: InputPathType,
    outfile: str | None = None,
    tr: float | None = None,
    direction: typing.Literal["x", "y", "z"] | None = None,
    interleaved: bool = False,
    reverse: bool = False,
    custom_timings: InputPathType | None = None,
    global_shift: float | None = None,
    custom_interleave_order: InputPathType | None = None,
    verbose: bool = False,
) -> SlicetimerFslParameters:
    """
    Build parameters.
    
    Args:
        infile: Filename of input timeseries.
        outfile: Filename of output corrected timeseries.
        tr: Specify TR of data, default is 3s.
        direction: Direction of slice acquisition (x=1, y=2, z=3); default is z.
        interleaved: Use interleaved acquisition.
        reverse: Reverse slice indexing (default is slices were acquired\
            bottom-up).
        custom_timings: Filename of single-column slice timings in fractions of\
            TR, positive values shift slices forwards in time.
        global_shift: Global shift in fraction of TR, default is 0.
        custom_interleave_order: Filename of single-column custom interleave\
            order file (first slice is referred to as 1 not 0).
        verbose: Switch on diagnostic messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "slicetimer.fsl",
        "infile": infile,
        "interleaved": interleaved,
        "reverse": reverse,
        "verbose": verbose,
    }
    if outfile is not None:
        params["outfile"] = outfile
    if tr is not None:
        params["tr"] = tr
    if direction is not None:
        params["direction"] = direction
    if custom_timings is not None:
        params["custom_timings"] = custom_timings
    if global_shift is not None:
        params["global_shift"] = global_shift
    if custom_interleave_order is not None:
        params["custom_interleave_order"] = custom_interleave_order
    return params


def slicetimer_fsl_cargs(
    params: SlicetimerFslParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("slicetimer")
    cargs.append("--in")
    cargs.extend([
        "-i",
        execution.input_file(params.get("infile"))
    ])
    if params.get("outfile") is not None:
        cargs.extend([
            "-o",
            params.get("outfile")
        ])
    if params.get("tr") is not None:
        cargs.extend([
            "-r",
            str(params.get("tr"))
        ])
    if params.get("direction") is not None:
        cargs.extend([
            "-d",
            params.get("direction")
        ])
    if params.get("interleaved"):
        cargs.append("--odd")
    if params.get("reverse"):
        cargs.append("--down")
    if params.get("custom_timings") is not None:
        cargs.extend([
            "--tcustom",
            execution.input_file(params.get("custom_timings"))
        ])
    if params.get("global_shift") is not None:
        cargs.extend([
            "--tglobal",
            str(params.get("global_shift"))
        ])
    if params.get("custom_interleave_order") is not None:
        cargs.extend([
            "--ocustom",
            execution.input_file(params.get("custom_interleave_order"))
        ])
    if params.get("verbose"):
        cargs.append("-v")
    return cargs


def slicetimer_fsl_outputs(
    params: SlicetimerFslParameters,
    execution: Execution,
) -> SlicetimerFslOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SlicetimerFslOutputs(
        root=execution.output_file("."),
        corrected_timeseries=execution.output_file(params.get("outfile")) if (params.get("outfile") is not None) else None,
    )
    return ret


def slicetimer_fsl_execute(
    params: SlicetimerFslParameters,
    execution: Execution,
) -> SlicetimerFslOutputs:
    """
    FMRIB's Interpolation for Slice Timing correction in FMRI data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `SlicetimerFslOutputs`).
    """
    params = execution.params(params)
    cargs = slicetimer_fsl_cargs(params, execution)
    ret = slicetimer_fsl_outputs(params, execution)
    execution.run(cargs)
    return ret


def slicetimer_fsl(
    infile: InputPathType,
    outfile: str | None = None,
    tr: float | None = None,
    direction: typing.Literal["x", "y", "z"] | None = None,
    interleaved: bool = False,
    reverse: bool = False,
    custom_timings: InputPathType | None = None,
    global_shift: float | None = None,
    custom_interleave_order: InputPathType | None = None,
    verbose: bool = False,
    runner: Runner | None = None,
) -> SlicetimerFslOutputs:
    """
    FMRIB's Interpolation for Slice Timing correction in FMRI data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        infile: Filename of input timeseries.
        outfile: Filename of output corrected timeseries.
        tr: Specify TR of data, default is 3s.
        direction: Direction of slice acquisition (x=1, y=2, z=3); default is z.
        interleaved: Use interleaved acquisition.
        reverse: Reverse slice indexing (default is slices were acquired\
            bottom-up).
        custom_timings: Filename of single-column slice timings in fractions of\
            TR, positive values shift slices forwards in time.
        global_shift: Global shift in fraction of TR, default is 0.
        custom_interleave_order: Filename of single-column custom interleave\
            order file (first slice is referred to as 1 not 0).
        verbose: Switch on diagnostic messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SlicetimerFslOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SLICETIMER_FSL_METADATA)
    params = slicetimer_fsl_params(
        infile=infile,
        outfile=outfile,
        tr=tr,
        direction=direction,
        interleaved=interleaved,
        reverse=reverse,
        custom_timings=custom_timings,
        global_shift=global_shift,
        custom_interleave_order=custom_interleave_order,
        verbose=verbose,
    )
    return slicetimer_fsl_execute(params, execution)


__all__ = [
    "SLICETIMER_FSL_METADATA",
    "SlicetimerFslOutputs",
    "SlicetimerFslParameters",
    "slicetimer_fsl",
    "slicetimer_fsl_params",
]
