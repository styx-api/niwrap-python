# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_LABEL2LABEL_METADATA = Metadata(
    id="17d5d1cd510c5a4c3d458511bf6609ccc3e1301b.boutiques",
    name="mri_label2label",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriLabel2labelParameters = typing.TypedDict('MriLabel2labelParameters', {
    "__STYX_TYPE__": typing.Literal["mri_label2label"],
    "src_label": InputPathType,
    "trg_label": str,
    "erode": typing.NotRequired[float | None],
    "open": typing.NotRequired[float | None],
    "close": typing.NotRequired[float | None],
    "dilate": typing.NotRequired[float | None],
    "ring": typing.NotRequired[float | None],
    "src_subject": typing.NotRequired[str | None],
    "trg_subject": typing.NotRequired[str | None],
    "subject": typing.NotRequired[str | None],
    "outmask": typing.NotRequired[str | None],
    "outstat": typing.NotRequired[str | None],
    "sample": typing.NotRequired[str | None],
    "regmethod": typing.NotRequired[str | None],
    "usepathfiles": bool,
    "hemi": typing.NotRequired[str | None],
    "src_hemi": typing.NotRequired[str | None],
    "trg_hemi": typing.NotRequired[str | None],
    "src_ico_order": typing.NotRequired[float | None],
    "trg_ico_order": typing.NotRequired[float | None],
    "direct": typing.NotRequired[str | None],
    "trgsurf": typing.NotRequired[str | None],
    "surfreg": typing.NotRequired[str | None],
    "srcsurfreg": typing.NotRequired[str | None],
    "trgsurfreg": typing.NotRequired[str | None],
    "srcsurfreg_file": typing.NotRequired[str | None],
    "trgsurfreg_file": typing.NotRequired[str | None],
    "paint": typing.NotRequired[str | None],
    "dmindmin": typing.NotRequired[str | None],
    "baryfill": typing.NotRequired[str | None],
    "label_cortex": typing.NotRequired[str | None],
    "surf_label2mask": typing.NotRequired[str | None],
    "srcmask": typing.NotRequired[str | None],
    "srcmasksign": typing.NotRequired[str | None],
    "srcmaskframe": typing.NotRequired[float | None],
    "xfm": typing.NotRequired[str | None],
    "reg": typing.NotRequired[str | None],
    "xfm_invert": bool,
    "projabs": typing.NotRequired[str | None],
    "projfrac": typing.NotRequired[str | None],
    "sd": typing.NotRequired[str | None],
    "nohash": bool,
    "norevmap": bool,
    "to_scanner": typing.NotRequired[str | None],
    "to_tkr": typing.NotRequired[str | None],
    "scanner": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_label2label": mri_label2label_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class MriLabel2labelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_label2label(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_label2label_params(
    src_label: InputPathType,
    trg_label: str,
    erode: float | None = None,
    open_: float | None = None,
    close: float | None = None,
    dilate: float | None = None,
    ring: float | None = None,
    src_subject: str | None = None,
    trg_subject: str | None = None,
    subject: str | None = None,
    outmask: str | None = None,
    outstat: str | None = None,
    sample: str | None = None,
    regmethod: str | None = None,
    usepathfiles: bool = False,
    hemi: str | None = None,
    src_hemi: str | None = None,
    trg_hemi: str | None = None,
    src_ico_order: float | None = None,
    trg_ico_order: float | None = None,
    direct: str | None = None,
    trgsurf: str | None = None,
    surfreg: str | None = None,
    srcsurfreg: str | None = None,
    trgsurfreg: str | None = None,
    srcsurfreg_file: str | None = None,
    trgsurfreg_file: str | None = None,
    paint: str | None = None,
    dmindmin: str | None = None,
    baryfill: str | None = None,
    label_cortex: str | None = None,
    surf_label2mask: str | None = None,
    srcmask: str | None = None,
    srcmasksign: str | None = None,
    srcmaskframe: float | None = None,
    xfm: str | None = None,
    reg: str | None = None,
    xfm_invert: bool = False,
    projabs: str | None = None,
    projfrac: str | None = None,
    sd: str | None = None,
    nohash: bool = False,
    norevmap: bool = False,
    to_scanner: str | None = None,
    to_tkr: str | None = None,
    scanner: bool = False,
) -> MriLabel2labelParameters:
    """
    Build parameters.
    
    Args:
        src_label: Input label file.
        trg_label: Output label file.
        erode: Erode the label N times before writing.
        open_: Open the label N times before writing.
        close: Close the label N times before writing.
        dilate: Dilate the label N times before writing.
        ring: Dilate the label N times then remove the original before writing.
        src_subject: Source subject.
        trg_subject: Target subject.
        subject: Use for both target and source.
        outmask: Save output label as a binary mask (surf only).
        outstat: Save output label stat as a mask (surf only).
        sample: Sample label onto surface.
        regmethod: Registration method (surface, volume).
        usepathfiles: Read from and write to a path file.
        hemi: Hemisphere (lh or rh) (with surface).
        src_hemi: Source Hemisphere (lh or rh).
        trg_hemi: Target Hemisphere (lh or rh).
        src_ico_order: When srcsubject=ico.
        trg_ico_order: When trgsubject=ico.
        direct: Use the [xyz] coords for src and trg surfaces to do direct\
            lookup.
        trgsurf: Get xyz from this surface (white).
        surfreg: Surface registration (sphere.reg).
        srcsurfreg: Source surface registration (sphere.reg).
        trgsurfreg: Target surface registration (sphere.reg).
        srcsurfreg_file: Specify full path to source reg.
        trgsurfreg_file: Specify full path to target reg.
        paint: Map to closest vertex on source surfname if d < dmax.
        dmindmin: Bin mask with vertex of closest label point when painting.
        baryfill: Fill with barycentric interpolation.
        label_cortex: Create a label like ?h.cortex.label.
        surf_label2mask: Convert a label to a binary mask.
        srcmask: Source mask surfvalfile thresh <format>.
        srcmasksign: Source mask sign (<abs>, pos, neg).
        srcmaskframe: Source mask frame number (0-based).
        xfm: Use xfm file instead of computing tal xfm.
        reg: Use register.dat file instead of computing tal xfm.
        xfm_invert: Invert xfm, or reg.
        projabs: Project dist mm along surf normal.
        projfrac: Project frac of thickness along surf normal.
        sd: Use specified subjects directory.
        nohash: Don't use hash table when regmethod is surface.
        norevmap: Don't use reverse mapping when regmethod is surface.
        to_scanner: Convert coords to scanner RAS prior to other operations.
        to_tkr: Convert coords to tkregister RAS prior to other operations.
        scanner: Set output coordinate type to scanner.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_label2label",
        "src_label": src_label,
        "trg_label": trg_label,
        "usepathfiles": usepathfiles,
        "xfm_invert": xfm_invert,
        "nohash": nohash,
        "norevmap": norevmap,
        "scanner": scanner,
    }
    if erode is not None:
        params["erode"] = erode
    if open_ is not None:
        params["open"] = open_
    if close is not None:
        params["close"] = close
    if dilate is not None:
        params["dilate"] = dilate
    if ring is not None:
        params["ring"] = ring
    if src_subject is not None:
        params["src_subject"] = src_subject
    if trg_subject is not None:
        params["trg_subject"] = trg_subject
    if subject is not None:
        params["subject"] = subject
    if outmask is not None:
        params["outmask"] = outmask
    if outstat is not None:
        params["outstat"] = outstat
    if sample is not None:
        params["sample"] = sample
    if regmethod is not None:
        params["regmethod"] = regmethod
    if hemi is not None:
        params["hemi"] = hemi
    if src_hemi is not None:
        params["src_hemi"] = src_hemi
    if trg_hemi is not None:
        params["trg_hemi"] = trg_hemi
    if src_ico_order is not None:
        params["src_ico_order"] = src_ico_order
    if trg_ico_order is not None:
        params["trg_ico_order"] = trg_ico_order
    if direct is not None:
        params["direct"] = direct
    if trgsurf is not None:
        params["trgsurf"] = trgsurf
    if surfreg is not None:
        params["surfreg"] = surfreg
    if srcsurfreg is not None:
        params["srcsurfreg"] = srcsurfreg
    if trgsurfreg is not None:
        params["trgsurfreg"] = trgsurfreg
    if srcsurfreg_file is not None:
        params["srcsurfreg_file"] = srcsurfreg_file
    if trgsurfreg_file is not None:
        params["trgsurfreg_file"] = trgsurfreg_file
    if paint is not None:
        params["paint"] = paint
    if dmindmin is not None:
        params["dmindmin"] = dmindmin
    if baryfill is not None:
        params["baryfill"] = baryfill
    if label_cortex is not None:
        params["label_cortex"] = label_cortex
    if surf_label2mask is not None:
        params["surf_label2mask"] = surf_label2mask
    if srcmask is not None:
        params["srcmask"] = srcmask
    if srcmasksign is not None:
        params["srcmasksign"] = srcmasksign
    if srcmaskframe is not None:
        params["srcmaskframe"] = srcmaskframe
    if xfm is not None:
        params["xfm"] = xfm
    if reg is not None:
        params["reg"] = reg
    if projabs is not None:
        params["projabs"] = projabs
    if projfrac is not None:
        params["projfrac"] = projfrac
    if sd is not None:
        params["sd"] = sd
    if to_scanner is not None:
        params["to_scanner"] = to_scanner
    if to_tkr is not None:
        params["to_tkr"] = to_tkr
    return params


def mri_label2label_cargs(
    params: MriLabel2labelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_label2label")
    cargs.extend([
        "--srclabel",
        execution.input_file(params.get("src_label"))
    ])
    cargs.extend([
        "--trglabel",
        params.get("trg_label")
    ])
    if params.get("erode") is not None:
        cargs.extend([
            "--erode",
            str(params.get("erode"))
        ])
    if params.get("open") is not None:
        cargs.extend([
            "--open",
            str(params.get("open"))
        ])
    if params.get("close") is not None:
        cargs.extend([
            "--close",
            str(params.get("close"))
        ])
    if params.get("dilate") is not None:
        cargs.extend([
            "--dilate",
            str(params.get("dilate"))
        ])
    if params.get("ring") is not None:
        cargs.extend([
            "--ring",
            str(params.get("ring"))
        ])
    if params.get("src_subject") is not None:
        cargs.extend([
            "--srcsubject",
            params.get("src_subject")
        ])
    if params.get("trg_subject") is not None:
        cargs.extend([
            "--trgsubject",
            params.get("trg_subject")
        ])
    if params.get("subject") is not None:
        cargs.extend([
            "--s",
            params.get("subject")
        ])
    if params.get("outmask") is not None:
        cargs.extend([
            "--outmask",
            params.get("outmask")
        ])
    if params.get("outstat") is not None:
        cargs.extend([
            "--outstat",
            params.get("outstat")
        ])
    if params.get("sample") is not None:
        cargs.extend([
            "--sample",
            params.get("sample")
        ])
    if params.get("regmethod") is not None:
        cargs.extend([
            "--regmethod",
            params.get("regmethod")
        ])
    if params.get("usepathfiles"):
        cargs.append("--usepathfiles")
    if params.get("hemi") is not None:
        cargs.extend([
            "--hemi",
            params.get("hemi")
        ])
    if params.get("src_hemi") is not None:
        cargs.extend([
            "--srchemi",
            params.get("src_hemi")
        ])
    if params.get("trg_hemi") is not None:
        cargs.extend([
            "--trghemi",
            params.get("trg_hemi")
        ])
    if params.get("src_ico_order") is not None:
        cargs.extend([
            "--srcicoorder",
            str(params.get("src_ico_order"))
        ])
    if params.get("trg_ico_order") is not None:
        cargs.extend([
            "--trgicoorder",
            str(params.get("trg_ico_order"))
        ])
    if params.get("direct") is not None:
        cargs.extend([
            "--direct",
            params.get("direct")
        ])
    if params.get("trgsurf") is not None:
        cargs.extend([
            "--trgsurf",
            params.get("trgsurf")
        ])
    if params.get("surfreg") is not None:
        cargs.extend([
            "--surfreg",
            params.get("surfreg")
        ])
    if params.get("srcsurfreg") is not None:
        cargs.extend([
            "--srcsurfreg",
            params.get("srcsurfreg")
        ])
    if params.get("trgsurfreg") is not None:
        cargs.extend([
            "--trgsurfreg",
            params.get("trgsurfreg")
        ])
    if params.get("srcsurfreg_file") is not None:
        cargs.extend([
            "--srcsurfreg-file",
            params.get("srcsurfreg_file")
        ])
    if params.get("trgsurfreg_file") is not None:
        cargs.extend([
            "--trgsurfreg-file",
            params.get("trgsurfreg_file")
        ])
    if params.get("paint") is not None:
        cargs.extend([
            "--paint",
            params.get("paint")
        ])
    if params.get("dmindmin") is not None:
        cargs.extend([
            "--dmindmin",
            params.get("dmindmin")
        ])
    if params.get("baryfill") is not None:
        cargs.extend([
            "--baryfill",
            params.get("baryfill")
        ])
    if params.get("label_cortex") is not None:
        cargs.extend([
            "--label-cortex",
            params.get("label_cortex")
        ])
    if params.get("surf_label2mask") is not None:
        cargs.extend([
            "--surf-label2mask",
            params.get("surf_label2mask")
        ])
    if params.get("srcmask") is not None:
        cargs.extend([
            "--srcmask",
            params.get("srcmask")
        ])
    if params.get("srcmasksign") is not None:
        cargs.extend([
            "--srcmasksign",
            params.get("srcmasksign")
        ])
    if params.get("srcmaskframe") is not None:
        cargs.extend([
            "--srcmaskframe",
            str(params.get("srcmaskframe"))
        ])
    if params.get("xfm") is not None:
        cargs.extend([
            "--xfm",
            params.get("xfm")
        ])
    if params.get("reg") is not None:
        cargs.extend([
            "--reg",
            params.get("reg")
        ])
    if params.get("xfm_invert"):
        cargs.append("--xfm-invert")
    if params.get("projabs") is not None:
        cargs.extend([
            "--projabs",
            params.get("projabs")
        ])
    if params.get("projfrac") is not None:
        cargs.extend([
            "--projfrac",
            params.get("projfrac")
        ])
    if params.get("sd") is not None:
        cargs.extend([
            "--sd",
            params.get("sd")
        ])
    if params.get("nohash"):
        cargs.append("--nohash")
    if params.get("norevmap"):
        cargs.append("--norevmap")
    if params.get("to_scanner") is not None:
        cargs.extend([
            "--to-scanner",
            params.get("to_scanner")
        ])
    if params.get("to_tkr") is not None:
        cargs.extend([
            "--to-tkr",
            params.get("to_tkr")
        ])
    if params.get("scanner"):
        cargs.append("--scanner")
    return cargs


def mri_label2label_outputs(
    params: MriLabel2labelParameters,
    execution: Execution,
) -> MriLabel2labelOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriLabel2labelOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_label2label_execute(
    params: MriLabel2labelParameters,
    execution: Execution,
) -> MriLabel2labelOutputs:
    """
    No description.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriLabel2labelOutputs`).
    """
    params = execution.params(params)
    cargs = mri_label2label_cargs(params, execution)
    ret = mri_label2label_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_label2label(
    src_label: InputPathType,
    trg_label: str,
    erode: float | None = None,
    open_: float | None = None,
    close: float | None = None,
    dilate: float | None = None,
    ring: float | None = None,
    src_subject: str | None = None,
    trg_subject: str | None = None,
    subject: str | None = None,
    outmask: str | None = None,
    outstat: str | None = None,
    sample: str | None = None,
    regmethod: str | None = None,
    usepathfiles: bool = False,
    hemi: str | None = None,
    src_hemi: str | None = None,
    trg_hemi: str | None = None,
    src_ico_order: float | None = None,
    trg_ico_order: float | None = None,
    direct: str | None = None,
    trgsurf: str | None = None,
    surfreg: str | None = None,
    srcsurfreg: str | None = None,
    trgsurfreg: str | None = None,
    srcsurfreg_file: str | None = None,
    trgsurfreg_file: str | None = None,
    paint: str | None = None,
    dmindmin: str | None = None,
    baryfill: str | None = None,
    label_cortex: str | None = None,
    surf_label2mask: str | None = None,
    srcmask: str | None = None,
    srcmasksign: str | None = None,
    srcmaskframe: float | None = None,
    xfm: str | None = None,
    reg: str | None = None,
    xfm_invert: bool = False,
    projabs: str | None = None,
    projfrac: str | None = None,
    sd: str | None = None,
    nohash: bool = False,
    norevmap: bool = False,
    to_scanner: str | None = None,
    to_tkr: str | None = None,
    scanner: bool = False,
    runner: Runner | None = None,
) -> MriLabel2labelOutputs:
    """
    No description.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        src_label: Input label file.
        trg_label: Output label file.
        erode: Erode the label N times before writing.
        open_: Open the label N times before writing.
        close: Close the label N times before writing.
        dilate: Dilate the label N times before writing.
        ring: Dilate the label N times then remove the original before writing.
        src_subject: Source subject.
        trg_subject: Target subject.
        subject: Use for both target and source.
        outmask: Save output label as a binary mask (surf only).
        outstat: Save output label stat as a mask (surf only).
        sample: Sample label onto surface.
        regmethod: Registration method (surface, volume).
        usepathfiles: Read from and write to a path file.
        hemi: Hemisphere (lh or rh) (with surface).
        src_hemi: Source Hemisphere (lh or rh).
        trg_hemi: Target Hemisphere (lh or rh).
        src_ico_order: When srcsubject=ico.
        trg_ico_order: When trgsubject=ico.
        direct: Use the [xyz] coords for src and trg surfaces to do direct\
            lookup.
        trgsurf: Get xyz from this surface (white).
        surfreg: Surface registration (sphere.reg).
        srcsurfreg: Source surface registration (sphere.reg).
        trgsurfreg: Target surface registration (sphere.reg).
        srcsurfreg_file: Specify full path to source reg.
        trgsurfreg_file: Specify full path to target reg.
        paint: Map to closest vertex on source surfname if d < dmax.
        dmindmin: Bin mask with vertex of closest label point when painting.
        baryfill: Fill with barycentric interpolation.
        label_cortex: Create a label like ?h.cortex.label.
        surf_label2mask: Convert a label to a binary mask.
        srcmask: Source mask surfvalfile thresh <format>.
        srcmasksign: Source mask sign (<abs>, pos, neg).
        srcmaskframe: Source mask frame number (0-based).
        xfm: Use xfm file instead of computing tal xfm.
        reg: Use register.dat file instead of computing tal xfm.
        xfm_invert: Invert xfm, or reg.
        projabs: Project dist mm along surf normal.
        projfrac: Project frac of thickness along surf normal.
        sd: Use specified subjects directory.
        nohash: Don't use hash table when regmethod is surface.
        norevmap: Don't use reverse mapping when regmethod is surface.
        to_scanner: Convert coords to scanner RAS prior to other operations.
        to_tkr: Convert coords to tkregister RAS prior to other operations.
        scanner: Set output coordinate type to scanner.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLabel2labelOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_LABEL2LABEL_METADATA)
    params = mri_label2label_params(
        src_label=src_label,
        trg_label=trg_label,
        erode=erode,
        open_=open_,
        close=close,
        dilate=dilate,
        ring=ring,
        src_subject=src_subject,
        trg_subject=trg_subject,
        subject=subject,
        outmask=outmask,
        outstat=outstat,
        sample=sample,
        regmethod=regmethod,
        usepathfiles=usepathfiles,
        hemi=hemi,
        src_hemi=src_hemi,
        trg_hemi=trg_hemi,
        src_ico_order=src_ico_order,
        trg_ico_order=trg_ico_order,
        direct=direct,
        trgsurf=trgsurf,
        surfreg=surfreg,
        srcsurfreg=srcsurfreg,
        trgsurfreg=trgsurfreg,
        srcsurfreg_file=srcsurfreg_file,
        trgsurfreg_file=trgsurfreg_file,
        paint=paint,
        dmindmin=dmindmin,
        baryfill=baryfill,
        label_cortex=label_cortex,
        surf_label2mask=surf_label2mask,
        srcmask=srcmask,
        srcmasksign=srcmasksign,
        srcmaskframe=srcmaskframe,
        xfm=xfm,
        reg=reg,
        xfm_invert=xfm_invert,
        projabs=projabs,
        projfrac=projfrac,
        sd=sd,
        nohash=nohash,
        norevmap=norevmap,
        to_scanner=to_scanner,
        to_tkr=to_tkr,
        scanner=scanner,
    )
    return mri_label2label_execute(params, execution)


__all__ = [
    "MRI_LABEL2LABEL_METADATA",
    "MriLabel2labelOutputs",
    "MriLabel2labelParameters",
    "mri_label2label",
    "mri_label2label_params",
]
