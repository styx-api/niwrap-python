# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_EXTRACT_LARGEST_CC_METADATA = Metadata(
    id="d482ce41fdae770a9397038906daba39eebb0541.boutiques",
    name="mri_extract_largest_CC",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriExtractLargestCcParameters = typing.TypedDict('MriExtractLargestCcParameters', {
    "__STYX_TYPE__": typing.Literal["mri_extract_largest_CC"],
    "input_volume": InputPathType,
    "output_volume": str,
    "threshold": typing.NotRequired[float | None],
    "hemisphere": typing.NotRequired[typing.Literal["lh", "rh"] | None],
    "largest_cc_in_bg": bool,
    "original_volume": typing.NotRequired[InputPathType | None],
    "label_value": typing.NotRequired[float | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_extract_largest_CC": mri_extract_largest_cc_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_extract_largest_CC": mri_extract_largest_cc_outputs,
    }.get(t)


class MriExtractLargestCcOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_extract_largest_cc(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType
    """The output volume with the largest connected component extracted."""


def mri_extract_largest_cc_params(
    input_volume: InputPathType,
    output_volume: str,
    threshold: float | None = None,
    hemisphere: typing.Literal["lh", "rh"] | None = None,
    largest_cc_in_bg: bool = False,
    original_volume: InputPathType | None = None,
    label_value: float | None = None,
) -> MriExtractLargestCcParameters:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume.
        output_volume: Output volume.
        threshold: Threshold for object.
        hemisphere: Set the target value corresponding to lh (255) or rh (127).
        largest_cc_in_bg: Find the largest CC in the background.
        original_volume: Clone values from original volume into output (used\
            with -I).
        label_value: Perform connected components on voxels with specified\
            label value.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_extract_largest_CC",
        "input_volume": input_volume,
        "output_volume": output_volume,
        "largest_cc_in_bg": largest_cc_in_bg,
    }
    if threshold is not None:
        params["threshold"] = threshold
    if hemisphere is not None:
        params["hemisphere"] = hemisphere
    if original_volume is not None:
        params["original_volume"] = original_volume
    if label_value is not None:
        params["label_value"] = label_value
    return params


def mri_extract_largest_cc_cargs(
    params: MriExtractLargestCcParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_extract_largest_CC")
    cargs.append(execution.input_file(params.get("input_volume")))
    cargs.append(params.get("output_volume"))
    if params.get("threshold") is not None:
        cargs.extend([
            "-T",
            str(params.get("threshold"))
        ])
    if params.get("hemisphere") is not None:
        cargs.extend([
            "-hemi",
            params.get("hemisphere")
        ])
    if params.get("largest_cc_in_bg"):
        cargs.append("-I")
    if params.get("original_volume") is not None:
        cargs.extend([
            "-O",
            execution.input_file(params.get("original_volume"))
        ])
    if params.get("label_value") is not None:
        cargs.extend([
            "-L",
            str(params.get("label_value"))
        ])
    return cargs


def mri_extract_largest_cc_outputs(
    params: MriExtractLargestCcParameters,
    execution: Execution,
) -> MriExtractLargestCcOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriExtractLargestCcOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("output_volume")),
    )
    return ret


def mri_extract_largest_cc_execute(
    params: MriExtractLargestCcParameters,
    execution: Execution,
) -> MriExtractLargestCcOutputs:
    """
    This program extracts the largest connected component of the input volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriExtractLargestCcOutputs`).
    """
    params = execution.params(params)
    cargs = mri_extract_largest_cc_cargs(params, execution)
    ret = mri_extract_largest_cc_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_extract_largest_cc(
    input_volume: InputPathType,
    output_volume: str,
    threshold: float | None = None,
    hemisphere: typing.Literal["lh", "rh"] | None = None,
    largest_cc_in_bg: bool = False,
    original_volume: InputPathType | None = None,
    label_value: float | None = None,
    runner: Runner | None = None,
) -> MriExtractLargestCcOutputs:
    """
    This program extracts the largest connected component of the input volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume.
        output_volume: Output volume.
        threshold: Threshold for object.
        hemisphere: Set the target value corresponding to lh (255) or rh (127).
        largest_cc_in_bg: Find the largest CC in the background.
        original_volume: Clone values from original volume into output (used\
            with -I).
        label_value: Perform connected components on voxels with specified\
            label value.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriExtractLargestCcOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_EXTRACT_LARGEST_CC_METADATA)
    params = mri_extract_largest_cc_params(
        input_volume=input_volume,
        output_volume=output_volume,
        threshold=threshold,
        hemisphere=hemisphere,
        largest_cc_in_bg=largest_cc_in_bg,
        original_volume=original_volume,
        label_value=label_value,
    )
    return mri_extract_largest_cc_execute(params, execution)


__all__ = [
    "MRI_EXTRACT_LARGEST_CC_METADATA",
    "MriExtractLargestCcOutputs",
    "MriExtractLargestCcParameters",
    "mri_extract_largest_cc",
    "mri_extract_largest_cc_params",
]
