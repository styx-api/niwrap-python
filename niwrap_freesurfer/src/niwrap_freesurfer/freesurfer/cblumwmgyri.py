# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CBLUMWMGYRI_METADATA = Metadata(
    id="fe20341079c6df1e8a587d62997fab1a4bf8a4d8.boutiques",
    name="cblumwmgyri",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


CblumwmgyriParameters = typing.TypedDict('CblumwmgyriParameters', {
    "__STYX_TYPE__": typing.Literal["cblumwmgyri"],
    "subject": str,
    "source_seg": typing.NotRequired[InputPathType | None],
    "n_erodes_dilates": typing.NotRequired[float | None],
    "out_seg": typing.NotRequired[str | None],
    "no_segstats": bool,
    "subjects_dir": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "cblumwmgyri": cblumwmgyri_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "cblumwmgyri": cblumwmgyri_outputs,
    }.get(t)


class CblumwmgyriOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cblumwmgyri(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_seg_file: OutputPathType | None
    """Output segmentation file after processing"""


def cblumwmgyri_params(
    subject: str,
    source_seg: InputPathType | None = None,
    n_erodes_dilates: float | None = 2,
    out_seg: str | None = "sourceseg+cblumwmgyri.mgz",
    no_segstats: bool = False,
    subjects_dir: str | None = None,
) -> CblumwmgyriParameters:
    """
    Build parameters.
    
    Args:
        subject: Subject identifier.
        source_seg: Source segmentation file (default: aparc+aseg.mgz).
        n_erodes_dilates: Number of erosions/dilations (default: 2).
        out_seg: Output segmentation file (default: sourceseg+cblumwmgyri.mgz).
        no_segstats: Do not compute segmentation statistics.
        subjects_dir: Subjects directory.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "cblumwmgyri",
        "subject": subject,
        "no_segstats": no_segstats,
    }
    if source_seg is not None:
        params["source_seg"] = source_seg
    if n_erodes_dilates is not None:
        params["n_erodes_dilates"] = n_erodes_dilates
    if out_seg is not None:
        params["out_seg"] = out_seg
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    return params


def cblumwmgyri_cargs(
    params: CblumwmgyriParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("cblumwmgyri")
    cargs.extend([
        "--s",
        params.get("subject")
    ])
    if params.get("source_seg") is not None:
        cargs.extend([
            "--seg",
            execution.input_file(params.get("source_seg"))
        ])
    if params.get("n_erodes_dilates") is not None:
        cargs.extend([
            "--n",
            str(params.get("n_erodes_dilates"))
        ])
    if params.get("out_seg") is not None:
        cargs.extend([
            "--o",
            params.get("out_seg")
        ])
    if params.get("no_segstats"):
        cargs.append("--no-segstats")
    if params.get("subjects_dir") is not None:
        cargs.extend([
            "--sd",
            params.get("subjects_dir")
        ])
    return cargs


def cblumwmgyri_outputs(
    params: CblumwmgyriParameters,
    execution: Execution,
) -> CblumwmgyriOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CblumwmgyriOutputs(
        root=execution.output_file("."),
        output_seg_file=execution.output_file(params.get("out_seg")) if (params.get("out_seg") is not None) else None,
    )
    return ret


def cblumwmgyri_execute(
    params: CblumwmgyriParameters,
    execution: Execution,
) -> CblumwmgyriOutputs:
    """
    Segments cerebellar white matter into gyral and core components using
    geometrical constraints.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `CblumwmgyriOutputs`).
    """
    params = execution.params(params)
    cargs = cblumwmgyri_cargs(params, execution)
    ret = cblumwmgyri_outputs(params, execution)
    execution.run(cargs)
    return ret


def cblumwmgyri(
    subject: str,
    source_seg: InputPathType | None = None,
    n_erodes_dilates: float | None = 2,
    out_seg: str | None = "sourceseg+cblumwmgyri.mgz",
    no_segstats: bool = False,
    subjects_dir: str | None = None,
    runner: Runner | None = None,
) -> CblumwmgyriOutputs:
    """
    Segments cerebellar white matter into gyral and core components using
    geometrical constraints.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject identifier.
        source_seg: Source segmentation file (default: aparc+aseg.mgz).
        n_erodes_dilates: Number of erosions/dilations (default: 2).
        out_seg: Output segmentation file (default: sourceseg+cblumwmgyri.mgz).
        no_segstats: Do not compute segmentation statistics.
        subjects_dir: Subjects directory.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CblumwmgyriOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CBLUMWMGYRI_METADATA)
    params = cblumwmgyri_params(
        subject=subject,
        source_seg=source_seg,
        n_erodes_dilates=n_erodes_dilates,
        out_seg=out_seg,
        no_segstats=no_segstats,
        subjects_dir=subjects_dir,
    )
    return cblumwmgyri_execute(params, execution)


__all__ = [
    "CBLUMWMGYRI_METADATA",
    "CblumwmgyriOutputs",
    "CblumwmgyriParameters",
    "cblumwmgyri",
    "cblumwmgyri_params",
]
