# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEGPONS_METADATA = Metadata(
    id="4b38e194fdd9fe1d16fc15d6ac746b2dffa56e0f.boutiques",
    name="segpons",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SegponsParameters = typing.TypedDict('SegponsParameters', {
    "__STYX_TYPE__": typing.Literal["segpons"],
    "subject": str,
    "aseg": bool,
    "apas": bool,
    "seg": typing.NotRequired[InputPathType | None],
    "no_refine": bool,
    "pons152_mask": typing.NotRequired[InputPathType | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "segpons": segpons_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "segpons": segpons_outputs,
    }.get(t)


class SegponsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `segpons(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    pons_output: OutputPathType
    """Output pons segmentation file."""


def segpons_params(
    subject: str,
    aseg: bool = False,
    apas: bool = False,
    seg: InputPathType | None = None,
    no_refine: bool = False,
    pons152_mask: InputPathType | None = None,
) -> SegponsParameters:
    """
    Build parameters.
    
    Args:
        subject: Subject identifier.
        aseg: Use and refine aseg (default, output will be aseg+pons.mgz).
        apas: Use aparc+aseg.mgz (output will be apas+pons.mgz).
        seg: Specify your own segmentation file.
        no_refine: Do not refine when using aseg.
        pons152_mask: Mask of pons in MNI152 space.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "segpons",
        "subject": subject,
        "aseg": aseg,
        "apas": apas,
        "no_refine": no_refine,
    }
    if seg is not None:
        params["seg"] = seg
    if pons152_mask is not None:
        params["pons152_mask"] = pons152_mask
    return params


def segpons_cargs(
    params: SegponsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("segpons")
    cargs.extend([
        "-s",
        "-" + params.get("subject")
    ])
    if params.get("aseg"):
        cargs.append("--aseg")
    if params.get("apas"):
        cargs.append("--apas")
    if params.get("seg") is not None:
        cargs.extend([
            "--seg",
            execution.input_file(params.get("seg"))
        ])
    if params.get("no_refine"):
        cargs.append("--no-refine")
    if params.get("pons152_mask") is not None:
        cargs.extend([
            "--pons152",
            execution.input_file(params.get("pons152_mask"))
        ])
    return cargs


def segpons_outputs(
    params: SegponsParameters,
    execution: Execution,
) -> SegponsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SegponsOutputs(
        root=execution.output_file("."),
        pons_output=execution.output_file(params.get("subject") + "+pons.mgz"),
    )
    return ret


def segpons_execute(
    params: SegponsParameters,
    execution: Execution,
) -> SegponsOutputs:
    """
    Approximate segmentation of pons using MNI152 space registration.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `SegponsOutputs`).
    """
    params = execution.params(params)
    cargs = segpons_cargs(params, execution)
    ret = segpons_outputs(params, execution)
    execution.run(cargs)
    return ret


def segpons(
    subject: str,
    aseg: bool = False,
    apas: bool = False,
    seg: InputPathType | None = None,
    no_refine: bool = False,
    pons152_mask: InputPathType | None = None,
    runner: Runner | None = None,
) -> SegponsOutputs:
    """
    Approximate segmentation of pons using MNI152 space registration.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject identifier.
        aseg: Use and refine aseg (default, output will be aseg+pons.mgz).
        apas: Use aparc+aseg.mgz (output will be apas+pons.mgz).
        seg: Specify your own segmentation file.
        no_refine: Do not refine when using aseg.
        pons152_mask: Mask of pons in MNI152 space.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegponsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEGPONS_METADATA)
    params = segpons_params(
        subject=subject,
        aseg=aseg,
        apas=apas,
        seg=seg,
        no_refine=no_refine,
        pons152_mask=pons152_mask,
    )
    return segpons_execute(params, execution)


__all__ = [
    "SEGPONS_METADATA",
    "SegponsOutputs",
    "SegponsParameters",
    "segpons",
    "segpons_params",
]
