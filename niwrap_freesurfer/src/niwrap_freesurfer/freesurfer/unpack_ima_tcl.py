# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

UNPACK_IMA_TCL_METADATA = Metadata(
    id="f7bb633c8e2fc57cba56d642be005b58715d8346.boutiques",
    name="unpack_ima.tcl",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


UnpackImaTclParameters = typing.TypedDict('UnpackImaTclParameters', {
    "__STYX_TYPE__": typing.Literal["unpack_ima.tcl"],
    "target_dir": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "unpack_ima.tcl": unpack_ima_tcl_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class UnpackImaTclOutputs(typing.NamedTuple):
    """
    Output object returned when calling `unpack_ima_tcl(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def unpack_ima_tcl_params(
    target_dir: str = "~",
) -> UnpackImaTclParameters:
    """
    Build parameters.
    
    Args:
        target_dir: Target directory to unpack the files.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "unpack_ima.tcl",
        "target_dir": target_dir,
    }
    return params


def unpack_ima_tcl_cargs(
    params: UnpackImaTclParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("unpack_ima.tcl")
    cargs.append(params.get("target_dir"))
    return cargs


def unpack_ima_tcl_outputs(
    params: UnpackImaTclParameters,
    execution: Execution,
) -> UnpackImaTclOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = UnpackImaTclOutputs(
        root=execution.output_file("."),
    )
    return ret


def unpack_ima_tcl_execute(
    params: UnpackImaTclParameters,
    execution: Execution,
) -> UnpackImaTclOutputs:
    """
    A tool to unpack MRI DICOM .ima files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `UnpackImaTclOutputs`).
    """
    params = execution.params(params)
    cargs = unpack_ima_tcl_cargs(params, execution)
    ret = unpack_ima_tcl_outputs(params, execution)
    execution.run(cargs)
    return ret


def unpack_ima_tcl(
    target_dir: str = "~",
    runner: Runner | None = None,
) -> UnpackImaTclOutputs:
    """
    A tool to unpack MRI DICOM .ima files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        target_dir: Target directory to unpack the files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `UnpackImaTclOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(UNPACK_IMA_TCL_METADATA)
    params = unpack_ima_tcl_params(
        target_dir=target_dir,
    )
    return unpack_ima_tcl_execute(params, execution)


__all__ = [
    "UNPACK_IMA_TCL_METADATA",
    "UnpackImaTclOutputs",
    "UnpackImaTclParameters",
    "unpack_ima_tcl",
    "unpack_ima_tcl_params",
]
