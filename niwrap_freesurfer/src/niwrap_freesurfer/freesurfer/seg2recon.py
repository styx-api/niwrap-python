# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEG2RECON_METADATA = Metadata(
    id="36dfabf1fcfdc6c0dea237cf9f3d8968bf6ef6bc.boutiques",
    name="seg2recon",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Seg2reconParameters = typing.TypedDict('Seg2reconParameters', {
    "__STYX_TYPE__": typing.Literal["seg2recon"],
    "subject": str,
    "segvol": InputPathType,
    "inputvol": InputPathType,
    "ctab": typing.NotRequired[InputPathType | None],
    "ndilate": typing.NotRequired[float | None],
    "threads": typing.NotRequired[float | None],
    "force_update": bool,
    "no_cc": bool,
    "mask": typing.NotRequired[InputPathType | None],
    "headmask": typing.NotRequired[InputPathType | None],
    "thresh": typing.NotRequired[float | None],
    "expert": typing.NotRequired[InputPathType | None],
    "rca": bool,
    "no_bias_field_cor": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "seg2recon": seg2recon_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "seg2recon": seg2recon_outputs,
    }.get(t)


class Seg2reconOutputs(typing.NamedTuple):
    """
    Output object returned when calling `seg2recon(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    aseg_auto_mgz: OutputPathType
    """Output aseg.auto.mgz file including corpus callosum segmentation"""
    nu_mgz: OutputPathType
    """Bias field corrected output nu.mgz file"""
    brainmask_mgz: OutputPathType
    """Output brainmask.mgz file"""


def seg2recon_params(
    subject: str,
    segvol: InputPathType,
    inputvol: InputPathType,
    ctab: InputPathType | None = None,
    ndilate: float | None = None,
    threads: float | None = None,
    force_update: bool = False,
    no_cc: bool = False,
    mask: InputPathType | None = None,
    headmask: InputPathType | None = None,
    thresh: float | None = None,
    expert: InputPathType | None = None,
    rca: bool = False,
    no_bias_field_cor: bool = False,
) -> Seg2reconParameters:
    """
    Build parameters.
    
    Args:
        subject: Output subject directory name.
        segvol: Aseg-type volume, e.g., from synthseg, fastsurfer, psacnn,\
            samseg, or aseg.
        inputvol: Input volume as would be passed to recon-all.
        ctab: Color table for the segmentation. Uses embedded table if\
            available, or FreeSurferColorLUT.txt if not specified.
        ndilate: Dilate binarization of segmentation when creating brainmask.\
            Default is 2.
        threads: Number of threads to use for processing.
        force_update: Force regeneration of files whether needed or not.
        no_cc: Do not segment corpus callosum.
        mask: Use this mask as brainmask instead of computing from\
            segmentation.
        headmask: Use this headmask instead of running mri_seghead.
        thresh: Threshold for bias field estimation.
        expert: Path to expert options file.
        rca: Run recon-all on the output.
        no_bias_field_cor: Do not compute or apply bias field correction.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "seg2recon",
        "subject": subject,
        "segvol": segvol,
        "inputvol": inputvol,
        "force_update": force_update,
        "no_cc": no_cc,
        "rca": rca,
        "no_bias_field_cor": no_bias_field_cor,
    }
    if ctab is not None:
        params["ctab"] = ctab
    if ndilate is not None:
        params["ndilate"] = ndilate
    if threads is not None:
        params["threads"] = threads
    if mask is not None:
        params["mask"] = mask
    if headmask is not None:
        params["headmask"] = headmask
    if thresh is not None:
        params["thresh"] = thresh
    if expert is not None:
        params["expert"] = expert
    return params


def seg2recon_cargs(
    params: Seg2reconParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("seg2recon")
    cargs.extend([
        "-s",
        params.get("subject")
    ])
    cargs.extend([
        "-seg",
        execution.input_file(params.get("segvol"))
    ])
    cargs.extend([
        "-i",
        execution.input_file(params.get("inputvol"))
    ])
    if params.get("ctab") is not None:
        cargs.extend([
            "-ctab",
            execution.input_file(params.get("ctab"))
        ])
    if params.get("ndilate") is not None:
        cargs.extend([
            "--ndilate",
            str(params.get("ndilate"))
        ])
    if params.get("threads") is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads"))
        ])
    if params.get("force_update"):
        cargs.append("--force-update")
    if params.get("no_cc"):
        cargs.append("--no-cc")
    if params.get("mask") is not None:
        cargs.extend([
            "--m",
            execution.input_file(params.get("mask"))
        ])
    if params.get("headmask") is not None:
        cargs.extend([
            "--h",
            execution.input_file(params.get("headmask"))
        ])
    if params.get("thresh") is not None:
        cargs.extend([
            "--thresh",
            str(params.get("thresh"))
        ])
    if params.get("expert") is not None:
        cargs.extend([
            "--expert",
            execution.input_file(params.get("expert"))
        ])
    if params.get("rca"):
        cargs.append("--rca")
    if params.get("no_bias_field_cor"):
        cargs.append("--no-bias-field-cor")
    return cargs


def seg2recon_outputs(
    params: Seg2reconParameters,
    execution: Execution,
) -> Seg2reconOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Seg2reconOutputs(
        root=execution.output_file("."),
        aseg_auto_mgz=execution.output_file(params.get("subject") + "/aseg.auto.mgz"),
        nu_mgz=execution.output_file(params.get("subject") + "/nu.mgz"),
        brainmask_mgz=execution.output_file(params.get("subject") + "/brainmask.mgz"),
    )
    return ret


def seg2recon_execute(
    params: Seg2reconParameters,
    execution: Execution,
) -> Seg2reconOutputs:
    """
    Creates and populates a subjects directory from an input image and segmentation
    suitable for running recon-all.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `Seg2reconOutputs`).
    """
    params = execution.params(params)
    cargs = seg2recon_cargs(params, execution)
    ret = seg2recon_outputs(params, execution)
    execution.run(cargs)
    return ret


def seg2recon(
    subject: str,
    segvol: InputPathType,
    inputvol: InputPathType,
    ctab: InputPathType | None = None,
    ndilate: float | None = None,
    threads: float | None = None,
    force_update: bool = False,
    no_cc: bool = False,
    mask: InputPathType | None = None,
    headmask: InputPathType | None = None,
    thresh: float | None = None,
    expert: InputPathType | None = None,
    rca: bool = False,
    no_bias_field_cor: bool = False,
    runner: Runner | None = None,
) -> Seg2reconOutputs:
    """
    Creates and populates a subjects directory from an input image and segmentation
    suitable for running recon-all.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Output subject directory name.
        segvol: Aseg-type volume, e.g., from synthseg, fastsurfer, psacnn,\
            samseg, or aseg.
        inputvol: Input volume as would be passed to recon-all.
        ctab: Color table for the segmentation. Uses embedded table if\
            available, or FreeSurferColorLUT.txt if not specified.
        ndilate: Dilate binarization of segmentation when creating brainmask.\
            Default is 2.
        threads: Number of threads to use for processing.
        force_update: Force regeneration of files whether needed or not.
        no_cc: Do not segment corpus callosum.
        mask: Use this mask as brainmask instead of computing from\
            segmentation.
        headmask: Use this headmask instead of running mri_seghead.
        thresh: Threshold for bias field estimation.
        expert: Path to expert options file.
        rca: Run recon-all on the output.
        no_bias_field_cor: Do not compute or apply bias field correction.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Seg2reconOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEG2RECON_METADATA)
    params = seg2recon_params(
        subject=subject,
        segvol=segvol,
        inputvol=inputvol,
        ctab=ctab,
        ndilate=ndilate,
        threads=threads,
        force_update=force_update,
        no_cc=no_cc,
        mask=mask,
        headmask=headmask,
        thresh=thresh,
        expert=expert,
        rca=rca,
        no_bias_field_cor=no_bias_field_cor,
    )
    return seg2recon_execute(params, execution)


__all__ = [
    "SEG2RECON_METADATA",
    "Seg2reconOutputs",
    "Seg2reconParameters",
    "seg2recon",
    "seg2recon_params",
]
