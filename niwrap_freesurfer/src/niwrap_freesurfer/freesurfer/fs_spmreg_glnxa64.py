# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FS_SPMREG_GLNXA64_METADATA = Metadata(
    id="d96fd1d83e2b7bf77ac2922d1bead84c42091878.boutiques",
    name="fs_spmreg.glnxa64",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsSpmregGlnxa64Parameters = typing.TypedDict('FsSpmregGlnxa64Parameters', {
    "__STYX_TYPE__": typing.Literal["fs_spmreg.glnxa64"],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fs_spmreg.glnxa64": fs_spmreg_glnxa64_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "fs_spmreg.glnxa64": fs_spmreg_glnxa64_outputs,
    }.get(t)


class FsSpmregGlnxa64Outputs(typing.NamedTuple):
    """
    Output object returned when calling `fs_spmreg_glnxa64(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_matrix_file: OutputPathType
    """Output registration matrix file"""


def fs_spmreg_glnxa64_params(
) -> FsSpmregGlnxa64Parameters:
    """
    Build parameters.
    
    Args:
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fs_spmreg.glnxa64",
    }
    return params


def fs_spmreg_glnxa64_cargs(
    params: FsSpmregGlnxa64Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fs_spmreg")
    cargs.append("[OPTIONS]")
    return cargs


def fs_spmreg_glnxa64_outputs(
    params: FsSpmregGlnxa64Parameters,
    execution: Execution,
) -> FsSpmregGlnxa64Outputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsSpmregGlnxa64Outputs(
        root=execution.output_file("."),
        output_matrix_file=execution.output_file("[OUTPUT_MATRIX]"),
    )
    return ret


def fs_spmreg_glnxa64_execute(
    params: FsSpmregGlnxa64Parameters,
    execution: Execution,
) -> FsSpmregGlnxa64Outputs:
    """
    fs_spmreg is a tool for registration using SPM within FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FsSpmregGlnxa64Outputs`).
    """
    params = execution.params(params)
    cargs = fs_spmreg_glnxa64_cargs(params, execution)
    ret = fs_spmreg_glnxa64_outputs(params, execution)
    execution.run(cargs)
    return ret


def fs_spmreg_glnxa64(
    runner: Runner | None = None,
) -> FsSpmregGlnxa64Outputs:
    """
    fs_spmreg is a tool for registration using SPM within FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsSpmregGlnxa64Outputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FS_SPMREG_GLNXA64_METADATA)
    params = fs_spmreg_glnxa64_params(
    )
    return fs_spmreg_glnxa64_execute(params, execution)


__all__ = [
    "FS_SPMREG_GLNXA64_METADATA",
    "FsSpmregGlnxa64Outputs",
    "FsSpmregGlnxa64Parameters",
    "fs_spmreg_glnxa64",
    "fs_spmreg_glnxa64_params",
]
