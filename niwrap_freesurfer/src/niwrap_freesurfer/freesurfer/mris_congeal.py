# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_CONGEAL_METADATA = Metadata(
    id="f68a7b50f081a50aa62c0826055ec17d488357b5.boutiques",
    name="mris_congeal",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisCongealParameters = typing.TypedDict('MrisCongealParameters', {
    "__STYX_TYPE__": typing.Literal["mris_congeal"],
    "input_surface_name": str,
    "hemi": str,
    "subjects": list[str],
    "output_surface_name": str,
    "subjects_dir": typing.NotRequired[str | None],
    "disable_rigid_alignment": bool,
    "disable_sulc_alignment": bool,
    "smoothwm_curv": bool,
    "jacobian_output": typing.NotRequired[str | None],
    "distance_term": typing.NotRequired[float | None],
    "manual_label": typing.NotRequired[list[str] | None],
    "addframe": typing.NotRequired[list[str] | None],
    "overlay": typing.NotRequired[list[str] | None],
    "overlay_dir": typing.NotRequired[str | None],
    "target_subject": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mris_congeal": mris_congeal_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mris_congeal": mris_congeal_outputs,
    }.get(t)


class MrisCongealOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mris_congeal(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface: OutputPathType
    """Output surface"""


def mris_congeal_params(
    input_surface_name: str,
    hemi: str,
    subjects: list[str],
    output_surface_name: str,
    subjects_dir: str | None = None,
    disable_rigid_alignment: bool = False,
    disable_sulc_alignment: bool = False,
    smoothwm_curv: bool = False,
    jacobian_output: str | None = None,
    distance_term: float | None = None,
    manual_label: list[str] | None = None,
    addframe: list[str] | None = None,
    overlay: list[str] | None = None,
    overlay_dir: str | None = None,
    target_subject: bool = False,
) -> MrisCongealParameters:
    """
    Build parameters.
    
    Args:
        input_surface_name: Input surface name.
        hemi: Hemisphere (hemi).
        subjects: List of subjects.
        output_surface_name: Output surface name.
        subjects_dir: Subjects directory.
        disable_rigid_alignment: Disable initial rigid alignment.
        disable_sulc_alignment: Disable initial sulc alignment.
        smoothwm_curv: Use smoothwm curvature for final alignment.
        jacobian_output: Write-out jacobian overlay data to file.
        distance_term: Specify distance term.
        manual_label: Specify a manual label to align with atlas label.
        addframe: Add frame with specified parameters.
        overlay: Specify overlay surface values and number of averages.
        overlay_dir: Specify overlay directory.
        target_subject: Target specifies a subject's surface, not a template\
            file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mris_congeal",
        "input_surface_name": input_surface_name,
        "hemi": hemi,
        "subjects": subjects,
        "output_surface_name": output_surface_name,
        "disable_rigid_alignment": disable_rigid_alignment,
        "disable_sulc_alignment": disable_sulc_alignment,
        "smoothwm_curv": smoothwm_curv,
        "target_subject": target_subject,
    }
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    if jacobian_output is not None:
        params["jacobian_output"] = jacobian_output
    if distance_term is not None:
        params["distance_term"] = distance_term
    if manual_label is not None:
        params["manual_label"] = manual_label
    if addframe is not None:
        params["addframe"] = addframe
    if overlay is not None:
        params["overlay"] = overlay
    if overlay_dir is not None:
        params["overlay_dir"] = overlay_dir
    return params


def mris_congeal_cargs(
    params: MrisCongealParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_congeal")
    cargs.append(params.get("input_surface_name"))
    cargs.append(params.get("hemi"))
    cargs.extend(params.get("subjects"))
    cargs.append(params.get("output_surface_name"))
    if params.get("subjects_dir") is not None:
        cargs.extend([
            "-SDIR",
            params.get("subjects_dir")
        ])
    if params.get("disable_rigid_alignment"):
        cargs.append("-norot")
    if params.get("disable_sulc_alignment"):
        cargs.append("-nosulc")
    if params.get("smoothwm_curv"):
        cargs.append("-curv")
    if params.get("jacobian_output") is not None:
        cargs.extend([
            "-jacobian",
            params.get("jacobian_output")
        ])
    if params.get("distance_term") is not None:
        cargs.extend([
            "-dist",
            str(params.get("distance_term"))
        ])
    if params.get("manual_label") is not None:
        cargs.extend([
            "-l",
            *params.get("manual_label")
        ])
    if params.get("addframe") is not None:
        cargs.extend([
            "-addframe",
            *params.get("addframe")
        ])
    if params.get("overlay") is not None:
        cargs.extend([
            "-overlay",
            *params.get("overlay")
        ])
    if params.get("overlay_dir") is not None:
        cargs.extend([
            "-overlay-dir",
            params.get("overlay_dir")
        ])
    if params.get("target_subject"):
        cargs.append("-1")
    return cargs


def mris_congeal_outputs(
    params: MrisCongealParameters,
    execution: Execution,
) -> MrisCongealOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisCongealOutputs(
        root=execution.output_file("."),
        output_surface=execution.output_file(params.get("output_surface_name")),
    )
    return ret


def mris_congeal_execute(
    params: MrisCongealParameters,
    execution: Execution,
) -> MrisCongealOutputs:
    """
    Program that registers a set of input surfaces together and generates an atlas.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MrisCongealOutputs`).
    """
    params = execution.params(params)
    cargs = mris_congeal_cargs(params, execution)
    ret = mris_congeal_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_congeal(
    input_surface_name: str,
    hemi: str,
    subjects: list[str],
    output_surface_name: str,
    subjects_dir: str | None = None,
    disable_rigid_alignment: bool = False,
    disable_sulc_alignment: bool = False,
    smoothwm_curv: bool = False,
    jacobian_output: str | None = None,
    distance_term: float | None = None,
    manual_label: list[str] | None = None,
    addframe: list[str] | None = None,
    overlay: list[str] | None = None,
    overlay_dir: str | None = None,
    target_subject: bool = False,
    runner: Runner | None = None,
) -> MrisCongealOutputs:
    """
    Program that registers a set of input surfaces together and generates an atlas.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface_name: Input surface name.
        hemi: Hemisphere (hemi).
        subjects: List of subjects.
        output_surface_name: Output surface name.
        subjects_dir: Subjects directory.
        disable_rigid_alignment: Disable initial rigid alignment.
        disable_sulc_alignment: Disable initial sulc alignment.
        smoothwm_curv: Use smoothwm curvature for final alignment.
        jacobian_output: Write-out jacobian overlay data to file.
        distance_term: Specify distance term.
        manual_label: Specify a manual label to align with atlas label.
        addframe: Add frame with specified parameters.
        overlay: Specify overlay surface values and number of averages.
        overlay_dir: Specify overlay directory.
        target_subject: Target specifies a subject's surface, not a template\
            file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisCongealOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_CONGEAL_METADATA)
    params = mris_congeal_params(
        input_surface_name=input_surface_name,
        hemi=hemi,
        subjects=subjects,
        output_surface_name=output_surface_name,
        subjects_dir=subjects_dir,
        disable_rigid_alignment=disable_rigid_alignment,
        disable_sulc_alignment=disable_sulc_alignment,
        smoothwm_curv=smoothwm_curv,
        jacobian_output=jacobian_output,
        distance_term=distance_term,
        manual_label=manual_label,
        addframe=addframe,
        overlay=overlay,
        overlay_dir=overlay_dir,
        target_subject=target_subject,
    )
    return mris_congeal_execute(params, execution)


__all__ = [
    "MRIS_CONGEAL_METADATA",
    "MrisCongealOutputs",
    "MrisCongealParameters",
    "mris_congeal",
    "mris_congeal_params",
]
