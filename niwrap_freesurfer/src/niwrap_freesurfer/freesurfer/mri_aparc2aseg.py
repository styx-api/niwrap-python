# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_APARC2ASEG_METADATA = Metadata(
    id="70399c00183edd73f6d174d9a1c242615869d650.boutiques",
    name="mri_aparc2aseg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriAparc2asegParameters = typing.TypedDict('MriAparc2asegParameters', {
    "__STYX_TYPE__": typing.Literal["mri_aparc2aseg"],
    "subject": typing.NotRequired[str | None],
    "output_volfile": typing.NotRequired[str | None],
    "old_ribbon": bool,
    "new_ribbon": bool,
    "a2005s": bool,
    "a2009s": bool,
    "annot_name": typing.NotRequired[str | None],
    "annot_table": typing.NotRequired[str | None],
    "base_offset": typing.NotRequired[float | None],
    "label_wm": bool,
    "wmparc_dmax": typing.NotRequired[float | None],
    "rip_unknown": bool,
    "hypo_as_wm": bool,
    "no_fix_parahip": bool,
    "smooth_normals": typing.NotRequired[float | None],
    "crs_test": typing.NotRequired[str | None],
    "right_hemisphere": bool,
    "threads": typing.NotRequired[float | None],
    "help": bool,
    "version": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_aparc2aseg": mri_aparc2aseg_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_aparc2aseg": mri_aparc2aseg_outputs,
    }.get(t)


class MriAparc2asegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_aparc2aseg(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume: OutputPathType
    """Output segmentation volume."""


def mri_aparc2aseg_params(
    subject: str | None = None,
    output_volfile: str | None = None,
    old_ribbon: bool = False,
    new_ribbon: bool = False,
    a2005s: bool = False,
    a2009s: bool = False,
    annot_name: str | None = None,
    annot_table: str | None = None,
    base_offset: float | None = None,
    label_wm: bool = False,
    wmparc_dmax: float | None = None,
    rip_unknown: bool = False,
    hypo_as_wm: bool = False,
    no_fix_parahip: bool = False,
    smooth_normals: float | None = None,
    crs_test: str | None = None,
    right_hemisphere: bool = False,
    threads: float | None = None,
    help_: bool = False,
    version: bool = False,
) -> MriAparc2asegParameters:
    """
    Build parameters.
    
    Args:
        subject: Name of the subject as found in the SUBJECTS_DIR.
        output_volfile: Full path of file to save the output segmentation in.\
            Default is mri/aparc+aseg.mgz.
        old_ribbon: Use mri/hemi.ribbon.mgz as a mask for the cortex.
        new_ribbon: Mask cortical voxels with mri/ribbon.mgz. Same as --volmask.
        a2005s: Use ?h.aparc.a2005s.annot. Output will be\
            aparc.a2005s+aseg.mgz.
        a2009s: Use ?h.aparc.a2009s.annot. Output will be\
            aparc.a2009s+aseg.mgz.
        annot_name: Use annotname surface annotation. By default, uses\
            ?h.aparc.annot.
        annot_table: Annotation table file. Default is\
            $FREESURFER_HOME/Simple_surface_labels2009.txt.
        base_offset: Add offset to all segmentation ids.
        label_wm: Re-assign white matter voxel labels to the closest cortical\
            point if within distance.
        wmparc_dmax: Max distance (mm) from cortex to be labeled as gyral WM\
            (default 5mm).
        rip_unknown: Do not label WM based on 'unknown' cortical label.
        hypo_as_wm: Label hypointensities as WM.
        no_fix_parahip: Do not remove unconnected regions from WM parahip.
        smooth_normals: Change number of surface normal smoothing steps\
            (default is 10).
        crs_test: Test mapping of column, row, slice.
        right_hemisphere: Only process the right hemisphere.
        threads: Run in parallel with the specified number of threads.
        help_: Print out information on how to use this program.
        version: Print out version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_aparc2aseg",
        "old_ribbon": old_ribbon,
        "new_ribbon": new_ribbon,
        "a2005s": a2005s,
        "a2009s": a2009s,
        "label_wm": label_wm,
        "rip_unknown": rip_unknown,
        "hypo_as_wm": hypo_as_wm,
        "no_fix_parahip": no_fix_parahip,
        "right_hemisphere": right_hemisphere,
        "help": help_,
        "version": version,
    }
    if subject is not None:
        params["subject"] = subject
    if output_volfile is not None:
        params["output_volfile"] = output_volfile
    if annot_name is not None:
        params["annot_name"] = annot_name
    if annot_table is not None:
        params["annot_table"] = annot_table
    if base_offset is not None:
        params["base_offset"] = base_offset
    if wmparc_dmax is not None:
        params["wmparc_dmax"] = wmparc_dmax
    if smooth_normals is not None:
        params["smooth_normals"] = smooth_normals
    if crs_test is not None:
        params["crs_test"] = crs_test
    if threads is not None:
        params["threads"] = threads
    return params


def mri_aparc2aseg_cargs(
    params: MriAparc2asegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_aparc2aseg")
    if params.get("subject") is not None:
        cargs.extend([
            "--s",
            params.get("subject")
        ])
    if params.get("output_volfile") is not None:
        cargs.extend([
            "--o",
            params.get("output_volfile")
        ])
    if params.get("old_ribbon"):
        cargs.append("--old-ribbon")
    if params.get("new_ribbon"):
        cargs.append("--new-ribbon")
    if params.get("a2005s"):
        cargs.append("--a2005s")
    if params.get("a2009s"):
        cargs.append("--a2009s")
    if params.get("annot_name") is not None:
        cargs.extend([
            "--annot",
            params.get("annot_name")
        ])
    if params.get("annot_table") is not None:
        cargs.extend([
            "--annot-table",
            params.get("annot_table")
        ])
    if params.get("base_offset") is not None:
        cargs.extend([
            "--base-offset",
            str(params.get("base_offset"))
        ])
    if params.get("label_wm"):
        cargs.append("--labelwm")
    if params.get("wmparc_dmax") is not None:
        cargs.extend([
            "--wmparc-dmax",
            str(params.get("wmparc_dmax"))
        ])
    if params.get("rip_unknown"):
        cargs.append("--rip-unknown")
    if params.get("hypo_as_wm"):
        cargs.append("--hypo-as-wm")
    if params.get("no_fix_parahip"):
        cargs.append("--no-fix-parahip")
    if params.get("smooth_normals") is not None:
        cargs.extend([
            "--smooth_normals",
            str(params.get("smooth_normals"))
        ])
    if params.get("crs_test") is not None:
        cargs.extend([
            "--crs-test",
            params.get("crs_test")
        ])
    if params.get("right_hemisphere"):
        cargs.append("--rh")
    if params.get("threads") is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads"))
        ])
    if params.get("help"):
        cargs.append("--help")
    if params.get("version"):
        cargs.append("--version")
    return cargs


def mri_aparc2aseg_outputs(
    params: MriAparc2asegParameters,
    execution: Execution,
) -> MriAparc2asegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriAparc2asegOutputs(
        root=execution.output_file("."),
        output_volume=execution.output_file("mri/aparc+aseg.mgz"),
    )
    return ret


def mri_aparc2aseg_execute(
    params: MriAparc2asegParameters,
    execution: Execution,
) -> MriAparc2asegOutputs:
    """
    Maps the cortical labels from the automatic cortical parcellation to the
    automatic segmentation volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriAparc2asegOutputs`).
    """
    params = execution.params(params)
    cargs = mri_aparc2aseg_cargs(params, execution)
    ret = mri_aparc2aseg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_aparc2aseg(
    subject: str | None = None,
    output_volfile: str | None = None,
    old_ribbon: bool = False,
    new_ribbon: bool = False,
    a2005s: bool = False,
    a2009s: bool = False,
    annot_name: str | None = None,
    annot_table: str | None = None,
    base_offset: float | None = None,
    label_wm: bool = False,
    wmparc_dmax: float | None = None,
    rip_unknown: bool = False,
    hypo_as_wm: bool = False,
    no_fix_parahip: bool = False,
    smooth_normals: float | None = None,
    crs_test: str | None = None,
    right_hemisphere: bool = False,
    threads: float | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MriAparc2asegOutputs:
    """
    Maps the cortical labels from the automatic cortical parcellation to the
    automatic segmentation volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Name of the subject as found in the SUBJECTS_DIR.
        output_volfile: Full path of file to save the output segmentation in.\
            Default is mri/aparc+aseg.mgz.
        old_ribbon: Use mri/hemi.ribbon.mgz as a mask for the cortex.
        new_ribbon: Mask cortical voxels with mri/ribbon.mgz. Same as --volmask.
        a2005s: Use ?h.aparc.a2005s.annot. Output will be\
            aparc.a2005s+aseg.mgz.
        a2009s: Use ?h.aparc.a2009s.annot. Output will be\
            aparc.a2009s+aseg.mgz.
        annot_name: Use annotname surface annotation. By default, uses\
            ?h.aparc.annot.
        annot_table: Annotation table file. Default is\
            $FREESURFER_HOME/Simple_surface_labels2009.txt.
        base_offset: Add offset to all segmentation ids.
        label_wm: Re-assign white matter voxel labels to the closest cortical\
            point if within distance.
        wmparc_dmax: Max distance (mm) from cortex to be labeled as gyral WM\
            (default 5mm).
        rip_unknown: Do not label WM based on 'unknown' cortical label.
        hypo_as_wm: Label hypointensities as WM.
        no_fix_parahip: Do not remove unconnected regions from WM parahip.
        smooth_normals: Change number of surface normal smoothing steps\
            (default is 10).
        crs_test: Test mapping of column, row, slice.
        right_hemisphere: Only process the right hemisphere.
        threads: Run in parallel with the specified number of threads.
        help_: Print out information on how to use this program.
        version: Print out version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriAparc2asegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_APARC2ASEG_METADATA)
    params = mri_aparc2aseg_params(
        subject=subject,
        output_volfile=output_volfile,
        old_ribbon=old_ribbon,
        new_ribbon=new_ribbon,
        a2005s=a2005s,
        a2009s=a2009s,
        annot_name=annot_name,
        annot_table=annot_table,
        base_offset=base_offset,
        label_wm=label_wm,
        wmparc_dmax=wmparc_dmax,
        rip_unknown=rip_unknown,
        hypo_as_wm=hypo_as_wm,
        no_fix_parahip=no_fix_parahip,
        smooth_normals=smooth_normals,
        crs_test=crs_test,
        right_hemisphere=right_hemisphere,
        threads=threads,
        help_=help_,
        version=version,
    )
    return mri_aparc2aseg_execute(params, execution)


__all__ = [
    "MRI_APARC2ASEG_METADATA",
    "MriAparc2asegOutputs",
    "MriAparc2asegParameters",
    "mri_aparc2aseg",
    "mri_aparc2aseg_params",
]
