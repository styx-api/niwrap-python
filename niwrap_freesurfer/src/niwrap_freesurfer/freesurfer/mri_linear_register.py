# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_LINEAR_REGISTER_METADATA = Metadata(
    id="0c492f9c37f4a6d5857023e8af8887cc8eee392c.boutiques",
    name="mri_linear_register",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriLinearRegisterParameters = typing.TypedDict('MriLinearRegisterParameters', {
    "__STYX_TYPE__": typing.Literal["mri_linear_register"],
    "input_brain": InputPathType,
    "template": InputPathType,
    "output_file": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mri_linear_register": mri_linear_register_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mri_linear_register": mri_linear_register_outputs,
    }.get(t)


class MriLinearRegisterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_linear_register(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_registered_image: OutputPathType
    """The registered brain image"""


def mri_linear_register_params(
    input_brain: InputPathType,
    template: InputPathType,
    output_file: str,
) -> MriLinearRegisterParameters:
    """
    Build parameters.
    
    Args:
        input_brain: Input brain image to be registered.
        template: Template to which the brain image will be registered.
        output_file: Output file name for the registered brain image.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mri_linear_register",
        "input_brain": input_brain,
        "template": template,
        "output_file": output_file,
    }
    return params


def mri_linear_register_cargs(
    params: MriLinearRegisterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_linear_register")
    cargs.append(execution.input_file(params.get("input_brain")))
    cargs.append(execution.input_file(params.get("template")))
    cargs.append(params.get("output_file"))
    return cargs


def mri_linear_register_outputs(
    params: MriLinearRegisterParameters,
    execution: Execution,
) -> MriLinearRegisterOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriLinearRegisterOutputs(
        root=execution.output_file("."),
        output_registered_image=execution.output_file(params.get("output_file")),
    )
    return ret


def mri_linear_register_execute(
    params: MriLinearRegisterParameters,
    execution: Execution,
) -> MriLinearRegisterOutputs:
    """
    A tool for linear registration of MRI brain images to a template.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MriLinearRegisterOutputs`).
    """
    params = execution.params(params)
    cargs = mri_linear_register_cargs(params, execution)
    ret = mri_linear_register_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_linear_register(
    input_brain: InputPathType,
    template: InputPathType,
    output_file: str,
    runner: Runner | None = None,
) -> MriLinearRegisterOutputs:
    """
    A tool for linear registration of MRI brain images to a template.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_brain: Input brain image to be registered.
        template: Template to which the brain image will be registered.
        output_file: Output file name for the registered brain image.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLinearRegisterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_LINEAR_REGISTER_METADATA)
    params = mri_linear_register_params(
        input_brain=input_brain,
        template=template,
        output_file=output_file,
    )
    return mri_linear_register_execute(params, execution)


__all__ = [
    "MRI_LINEAR_REGISTER_METADATA",
    "MriLinearRegisterOutputs",
    "MriLinearRegisterParameters",
    "mri_linear_register",
    "mri_linear_register_params",
]
