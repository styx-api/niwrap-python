# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DCMDRLE_FS_METADATA = Metadata(
    id="1c6fdec3b4ee16a344e1e0d5d4e1bcbc79b17f47.boutiques",
    name="dcmdrle.fs",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DcmdrleFsParameters = typing.TypedDict('DcmdrleFsParameters', {
    "__STYX_TYPE__": typing.Literal["dcmdrle.fs"],
    "input_file": InputPathType,
    "output_file": str,
    "help": bool,
    "version": bool,
    "arguments": bool,
    "quiet": bool,
    "verbose": bool,
    "debug": bool,
    "log_level": typing.NotRequired[str | None],
    "log_config": typing.NotRequired[InputPathType | None],
    "read_file": bool,
    "read_file_only": bool,
    "read_dataset": bool,
    "uid_default": bool,
    "uid_always": bool,
    "byte_order_default": bool,
    "byte_order_reverse": bool,
    "write_file": bool,
    "write_dataset": bool,
    "write_xfer_little": bool,
    "write_xfer_big": bool,
    "write_xfer_implicit": bool,
    "enable_new_vr": bool,
    "disable_new_vr": bool,
    "group_length_recalc": bool,
    "group_length_create": bool,
    "group_length_remove": bool,
    "length_explicit": bool,
    "length_undefined": bool,
    "padding_retain": bool,
    "padding_off": bool,
    "padding_create": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "dcmdrle.fs": dcmdrle_fs_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "dcmdrle.fs": dcmdrle_fs_outputs,
    }.get(t)


class DcmdrleFsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `dcmdrle_fs(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output DICOM file."""


def dcmdrle_fs_params(
    input_file: InputPathType,
    output_file: str,
    help_: bool = False,
    version: bool = False,
    arguments: bool = False,
    quiet: bool = False,
    verbose: bool = False,
    debug: bool = False,
    log_level: str | None = None,
    log_config: InputPathType | None = None,
    read_file: bool = False,
    read_file_only: bool = False,
    read_dataset: bool = False,
    uid_default: bool = False,
    uid_always: bool = False,
    byte_order_default: bool = False,
    byte_order_reverse: bool = False,
    write_file: bool = False,
    write_dataset: bool = False,
    write_xfer_little: bool = False,
    write_xfer_big: bool = False,
    write_xfer_implicit: bool = False,
    enable_new_vr: bool = False,
    disable_new_vr: bool = False,
    group_length_recalc: bool = False,
    group_length_create: bool = False,
    group_length_remove: bool = False,
    length_explicit: bool = False,
    length_undefined: bool = False,
    padding_retain: bool = False,
    padding_off: bool = False,
    padding_create: str | None = None,
) -> DcmdrleFsParameters:
    """
    Build parameters.
    
    Args:
        input_file: DICOM input filename to be converted.
        output_file: DICOM output filename.
        help_: Print help text and exit.
        version: Print version information and exit.
        arguments: Print expanded command line arguments.
        quiet: Quiet mode, print no warnings and errors.
        verbose: Verbose mode, print processing details.
        debug: Debug mode, print debug information.
        log_level: Set logger level.
        log_config: Use config file for the logger.
        read_file: Read file format or data set (default).
        read_file_only: Read file format only.
        read_dataset: Read data set without file meta information.
        uid_default: Keep same SOP Instance UID (default).
        uid_always: Always assign new UID.
        byte_order_default: Most significant byte first (default).
        byte_order_reverse: Least significant byte first.
        write_file: Write file format (default).
        write_dataset: Write data set without file meta information.
        write_xfer_little: Write with explicit VR little endian (default).
        write_xfer_big: Write with explicit VR big endian TS.
        write_xfer_implicit: Write with implicit VR little endian TS.
        enable_new_vr: Enable support for new VRs (UN/UT) (default).
        disable_new_vr: Disable support for new VRs, convert to OB.
        group_length_recalc: Recalculate group lengths if present (default).
        group_length_create: Always write with group length elements.
        group_length_remove: Always write without group length elements.
        length_explicit: Write with explicit lengths (default).
        length_undefined: Write with undefined lengths.
        padding_retain: Do not change padding.
        padding_off: No padding (implicit if --write-dataset).
        padding_create: Align file on multiple of file-pad bytes and items on\
            multiple of item-pad bytes.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "dcmdrle.fs",
        "input_file": input_file,
        "output_file": output_file,
        "help": help_,
        "version": version,
        "arguments": arguments,
        "quiet": quiet,
        "verbose": verbose,
        "debug": debug,
        "read_file": read_file,
        "read_file_only": read_file_only,
        "read_dataset": read_dataset,
        "uid_default": uid_default,
        "uid_always": uid_always,
        "byte_order_default": byte_order_default,
        "byte_order_reverse": byte_order_reverse,
        "write_file": write_file,
        "write_dataset": write_dataset,
        "write_xfer_little": write_xfer_little,
        "write_xfer_big": write_xfer_big,
        "write_xfer_implicit": write_xfer_implicit,
        "enable_new_vr": enable_new_vr,
        "disable_new_vr": disable_new_vr,
        "group_length_recalc": group_length_recalc,
        "group_length_create": group_length_create,
        "group_length_remove": group_length_remove,
        "length_explicit": length_explicit,
        "length_undefined": length_undefined,
        "padding_retain": padding_retain,
        "padding_off": padding_off,
    }
    if log_level is not None:
        params["log_level"] = log_level
    if log_config is not None:
        params["log_config"] = log_config
    if padding_create is not None:
        params["padding_create"] = padding_create
    return params


def dcmdrle_fs_cargs(
    params: DcmdrleFsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dcmdrle")
    cargs.append(execution.input_file(params.get("input_file")))
    cargs.append(params.get("output_file"))
    if params.get("help"):
        cargs.append("-h")
    if params.get("version"):
        cargs.append("--version")
    if params.get("arguments"):
        cargs.append("--arguments")
    if params.get("quiet"):
        cargs.append("-q")
    if params.get("verbose"):
        cargs.append("-v")
    if params.get("debug"):
        cargs.append("-d")
    if params.get("log_level") is not None:
        cargs.extend([
            "-ll",
            params.get("log_level")
        ])
    if params.get("log_config") is not None:
        cargs.extend([
            "-lc",
            execution.input_file(params.get("log_config"))
        ])
    if params.get("read_file"):
        cargs.append("+f")
    if params.get("read_file_only"):
        cargs.append("+fo")
    if params.get("read_dataset"):
        cargs.append("-f")
    if params.get("uid_default"):
        cargs.append("+ud")
    if params.get("uid_always"):
        cargs.append("+ua")
    if params.get("byte_order_default"):
        cargs.append("+bd")
    if params.get("byte_order_reverse"):
        cargs.append("+br")
    if params.get("write_file"):
        cargs.append("+F")
    if params.get("write_dataset"):
        cargs.append("-F")
    if params.get("write_xfer_little"):
        cargs.append("+te")
    if params.get("write_xfer_big"):
        cargs.append("+tb")
    if params.get("write_xfer_implicit"):
        cargs.append("+ti")
    if params.get("enable_new_vr"):
        cargs.append("+u")
    if params.get("disable_new_vr"):
        cargs.append("-u")
    if params.get("group_length_recalc"):
        cargs.append("+g=")
    if params.get("group_length_create"):
        cargs.append("+g")
    if params.get("group_length_remove"):
        cargs.append("-g")
    if params.get("length_explicit"):
        cargs.append("+e")
    if params.get("length_undefined"):
        cargs.append("-e")
    if params.get("padding_retain"):
        cargs.append("-p=")
    if params.get("padding_off"):
        cargs.append("-p")
    if params.get("padding_create") is not None:
        cargs.extend([
            "+p",
            params.get("padding_create")
        ])
    return cargs


def dcmdrle_fs_outputs(
    params: DcmdrleFsParameters,
    execution: Execution,
) -> DcmdrleFsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DcmdrleFsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_file")),
    )
    return ret


def dcmdrle_fs_execute(
    params: DcmdrleFsParameters,
    execution: Execution,
) -> DcmdrleFsOutputs:
    """
    Decodes RLE-compressed DICOM files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `DcmdrleFsOutputs`).
    """
    params = execution.params(params)
    cargs = dcmdrle_fs_cargs(params, execution)
    ret = dcmdrle_fs_outputs(params, execution)
    execution.run(cargs)
    return ret


def dcmdrle_fs(
    input_file: InputPathType,
    output_file: str,
    help_: bool = False,
    version: bool = False,
    arguments: bool = False,
    quiet: bool = False,
    verbose: bool = False,
    debug: bool = False,
    log_level: str | None = None,
    log_config: InputPathType | None = None,
    read_file: bool = False,
    read_file_only: bool = False,
    read_dataset: bool = False,
    uid_default: bool = False,
    uid_always: bool = False,
    byte_order_default: bool = False,
    byte_order_reverse: bool = False,
    write_file: bool = False,
    write_dataset: bool = False,
    write_xfer_little: bool = False,
    write_xfer_big: bool = False,
    write_xfer_implicit: bool = False,
    enable_new_vr: bool = False,
    disable_new_vr: bool = False,
    group_length_recalc: bool = False,
    group_length_create: bool = False,
    group_length_remove: bool = False,
    length_explicit: bool = False,
    length_undefined: bool = False,
    padding_retain: bool = False,
    padding_off: bool = False,
    padding_create: str | None = None,
    runner: Runner | None = None,
) -> DcmdrleFsOutputs:
    """
    Decodes RLE-compressed DICOM files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: DICOM input filename to be converted.
        output_file: DICOM output filename.
        help_: Print help text and exit.
        version: Print version information and exit.
        arguments: Print expanded command line arguments.
        quiet: Quiet mode, print no warnings and errors.
        verbose: Verbose mode, print processing details.
        debug: Debug mode, print debug information.
        log_level: Set logger level.
        log_config: Use config file for the logger.
        read_file: Read file format or data set (default).
        read_file_only: Read file format only.
        read_dataset: Read data set without file meta information.
        uid_default: Keep same SOP Instance UID (default).
        uid_always: Always assign new UID.
        byte_order_default: Most significant byte first (default).
        byte_order_reverse: Least significant byte first.
        write_file: Write file format (default).
        write_dataset: Write data set without file meta information.
        write_xfer_little: Write with explicit VR little endian (default).
        write_xfer_big: Write with explicit VR big endian TS.
        write_xfer_implicit: Write with implicit VR little endian TS.
        enable_new_vr: Enable support for new VRs (UN/UT) (default).
        disable_new_vr: Disable support for new VRs, convert to OB.
        group_length_recalc: Recalculate group lengths if present (default).
        group_length_create: Always write with group length elements.
        group_length_remove: Always write without group length elements.
        length_explicit: Write with explicit lengths (default).
        length_undefined: Write with undefined lengths.
        padding_retain: Do not change padding.
        padding_off: No padding (implicit if --write-dataset).
        padding_create: Align file on multiple of file-pad bytes and items on\
            multiple of item-pad bytes.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DcmdrleFsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DCMDRLE_FS_METADATA)
    params = dcmdrle_fs_params(
        input_file=input_file,
        output_file=output_file,
        help_=help_,
        version=version,
        arguments=arguments,
        quiet=quiet,
        verbose=verbose,
        debug=debug,
        log_level=log_level,
        log_config=log_config,
        read_file=read_file,
        read_file_only=read_file_only,
        read_dataset=read_dataset,
        uid_default=uid_default,
        uid_always=uid_always,
        byte_order_default=byte_order_default,
        byte_order_reverse=byte_order_reverse,
        write_file=write_file,
        write_dataset=write_dataset,
        write_xfer_little=write_xfer_little,
        write_xfer_big=write_xfer_big,
        write_xfer_implicit=write_xfer_implicit,
        enable_new_vr=enable_new_vr,
        disable_new_vr=disable_new_vr,
        group_length_recalc=group_length_recalc,
        group_length_create=group_length_create,
        group_length_remove=group_length_remove,
        length_explicit=length_explicit,
        length_undefined=length_undefined,
        padding_retain=padding_retain,
        padding_off=padding_off,
        padding_create=padding_create,
    )
    return dcmdrle_fs_execute(params, execution)


__all__ = [
    "DCMDRLE_FS_METADATA",
    "DcmdrleFsOutputs",
    "DcmdrleFsParameters",
    "dcmdrle_fs",
    "dcmdrle_fs_params",
]
