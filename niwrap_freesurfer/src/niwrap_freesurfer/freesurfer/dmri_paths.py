# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DMRI_PATHS_METADATA = Metadata(
    id="6eda0635b358ac171fbbf14d968294d81a352fc1.boutiques",
    name="dmri_paths",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DmriPathsParameters = typing.TypedDict('DmriPathsParameters', {
    "__STYX_TYPE__": typing.Literal["dmri_paths"],
    "indir": typing.NotRequired[str | None],
    "outdir": typing.NotRequired[str | None],
    "dwi": typing.NotRequired[InputPathType | None],
    "grad": typing.NotRequired[InputPathType | None],
    "bval": typing.NotRequired[InputPathType | None],
    "mask": typing.NotRequired[InputPathType | None],
    "bpdir": typing.NotRequired[str | None],
    "ntr": typing.NotRequired[float | None],
    "fmin": typing.NotRequired[float | None],
    "basereg": typing.NotRequired[InputPathType | None],
    "basemask": typing.NotRequired[InputPathType | None],
    "roi1": typing.NotRequired[InputPathType | None],
    "roi2": typing.NotRequired[InputPathType | None],
    "roimesh1": typing.NotRequired[InputPathType | None],
    "roimesh2": typing.NotRequired[InputPathType | None],
    "roiref1": typing.NotRequired[InputPathType | None],
    "roiref2": typing.NotRequired[InputPathType | None],
    "prior": typing.NotRequired[InputPathType | None],
    "nprior": typing.NotRequired[InputPathType | None],
    "nset": typing.NotRequired[float | None],
    "lprior": typing.NotRequired[InputPathType | None],
    "lset": typing.NotRequired[float | None],
    "seg": typing.NotRequired[InputPathType | None],
    "tprior": typing.NotRequired[InputPathType | None],
    "cprior": typing.NotRequired[InputPathType | None],
    "reg": typing.NotRequired[InputPathType | None],
    "regnl": typing.NotRequired[InputPathType | None],
    "init": typing.NotRequired[InputPathType | None],
    "nb": typing.NotRequired[float | None],
    "ns": typing.NotRequired[float | None],
    "nk": typing.NotRequired[float | None],
    "nu": typing.NotRequired[float | None],
    "sdp": typing.NotRequired[InputPathType | None],
    "debug": bool,
    "checkopts": bool,
    "version": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "dmri_paths": dmri_paths_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class DmriPathsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `dmri_paths(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def dmri_paths_params(
    indir: str | None = None,
    outdir: str | None = None,
    dwi: InputPathType | None = None,
    grad: InputPathType | None = None,
    bval: InputPathType | None = None,
    mask: InputPathType | None = None,
    bpdir: str | None = None,
    ntr: float | None = 1,
    fmin: float | None = 0,
    basereg: InputPathType | None = None,
    basemask: InputPathType | None = None,
    roi1: InputPathType | None = None,
    roi2: InputPathType | None = None,
    roimesh1: InputPathType | None = None,
    roimesh2: InputPathType | None = None,
    roiref1: InputPathType | None = None,
    roiref2: InputPathType | None = None,
    prior: InputPathType | None = None,
    nprior: InputPathType | None = None,
    nset: float | None = None,
    lprior: InputPathType | None = None,
    lset: float | None = None,
    seg: InputPathType | None = None,
    tprior: InputPathType | None = None,
    cprior: InputPathType | None = None,
    reg: InputPathType | None = None,
    regnl: InputPathType | None = None,
    init: InputPathType | None = None,
    nb: float | None = 5000,
    ns: float | None = 5000,
    nk: float | None = 10,
    nu: float | None = 40,
    sdp: InputPathType | None = None,
    debug: bool = False,
    checkopts: bool = False,
    version: bool = False,
) -> DmriPathsParameters:
    """
    Build parameters.
    
    Args:
        indir: Input subject directory (optional), specify multiple for\
            longitudinal data.
        outdir: Output directory (one per path).
        dwi: DWI volume series.
        grad: Text file of diffusion gradients.
        bval: Text file of diffusion b-values.
        mask: Mask volume.
        bpdir: BEDPOST directory.
        ntr: Max number of tracts per voxel (default 1).
        fmin: Tract volume fraction threshold (default 0).
        basereg: Base-to-DWI registration, needed for longitudinal data only\
            (.mat, as many as input directories).
        basemask: Base template mask volume.
        roi1: End ROI 1 (volume or label, one per path).
        roi2: End ROI 2 (volume or label, one per path).
        roimesh1: Mesh for end ROI 1 (for label ROIs).
        roimesh2: Mesh for end ROI 2 (for label ROIs).
        roiref1: Reference volume for end ROI 1 (for label ROIs).
        roiref2: Reference volume for end ROI 2 (for label ROIs).
        prior: Spatial path priors (negative log-likelihoods off and on the\
            path, one pair per path).
        nprior: Near-neighbor label priors (negative log-likelihood and list of\
            labels, one pair per path).
        nset: Subset of near-neighbor label priors (default all).
        lprior: Local-neighbor label priors (negative log-likelihood and list\
            of labels, one pair per path).
        lset: Subset of local-neighbor label priors (default all).
        seg: Segmentation map of test subject, specify multiple for\
            longitudinal data.
        tprior: Path tangent vector priors (negative log-likelihood, one per\
            path).
        cprior: Path curvature priors (negative log-likelihood, one per path).
        reg: DWI-to-atlas affine registration (.mat).
        regnl: DWI-to-atlas nonlinear registration (.m3z).
        init: Text file of initial control points (one per path).
        nb: Number of burn-in samples (default 5000).
        ns: Number of post-burn-in samples (default 5000).
        nk: Keep every nk-th sample (default 10).
        nu: Update proposal every nu-th sample (default 40).
        sdp: Text file with initial proposal standard deviations for control\
            point perturbations.
        debug: Turn on debugging.
        checkopts: Don't run anything, just check options and exit.
        version: Print out version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "dmri_paths",
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    }
    if indir is not None:
        params["indir"] = indir
    if outdir is not None:
        params["outdir"] = outdir
    if dwi is not None:
        params["dwi"] = dwi
    if grad is not None:
        params["grad"] = grad
    if bval is not None:
        params["bval"] = bval
    if mask is not None:
        params["mask"] = mask
    if bpdir is not None:
        params["bpdir"] = bpdir
    if ntr is not None:
        params["ntr"] = ntr
    if fmin is not None:
        params["fmin"] = fmin
    if basereg is not None:
        params["basereg"] = basereg
    if basemask is not None:
        params["basemask"] = basemask
    if roi1 is not None:
        params["roi1"] = roi1
    if roi2 is not None:
        params["roi2"] = roi2
    if roimesh1 is not None:
        params["roimesh1"] = roimesh1
    if roimesh2 is not None:
        params["roimesh2"] = roimesh2
    if roiref1 is not None:
        params["roiref1"] = roiref1
    if roiref2 is not None:
        params["roiref2"] = roiref2
    if prior is not None:
        params["prior"] = prior
    if nprior is not None:
        params["nprior"] = nprior
    if nset is not None:
        params["nset"] = nset
    if lprior is not None:
        params["lprior"] = lprior
    if lset is not None:
        params["lset"] = lset
    if seg is not None:
        params["seg"] = seg
    if tprior is not None:
        params["tprior"] = tprior
    if cprior is not None:
        params["cprior"] = cprior
    if reg is not None:
        params["reg"] = reg
    if regnl is not None:
        params["regnl"] = regnl
    if init is not None:
        params["init"] = init
    if nb is not None:
        params["nb"] = nb
    if ns is not None:
        params["ns"] = ns
    if nk is not None:
        params["nk"] = nk
    if nu is not None:
        params["nu"] = nu
    if sdp is not None:
        params["sdp"] = sdp
    return params


def dmri_paths_cargs(
    params: DmriPathsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dmri_paths")
    if params.get("indir") is not None:
        cargs.extend([
            "--indir",
            params.get("indir")
        ])
    if params.get("outdir") is not None:
        cargs.extend([
            "--outdir",
            params.get("outdir")
        ])
    if params.get("dwi") is not None:
        cargs.extend([
            "--dwi",
            execution.input_file(params.get("dwi"))
        ])
    if params.get("grad") is not None:
        cargs.extend([
            "--grad",
            execution.input_file(params.get("grad"))
        ])
    if params.get("bval") is not None:
        cargs.extend([
            "--bval",
            execution.input_file(params.get("bval"))
        ])
    if params.get("mask") is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask"))
        ])
    if params.get("bpdir") is not None:
        cargs.extend([
            "--bpdir",
            params.get("bpdir")
        ])
    if params.get("ntr") is not None:
        cargs.extend([
            "--ntr",
            str(params.get("ntr"))
        ])
    if params.get("fmin") is not None:
        cargs.extend([
            "--fmin",
            str(params.get("fmin"))
        ])
    if params.get("basereg") is not None:
        cargs.extend([
            "--basereg",
            execution.input_file(params.get("basereg"))
        ])
    if params.get("basemask") is not None:
        cargs.extend([
            "--basemask",
            execution.input_file(params.get("basemask"))
        ])
    if params.get("roi1") is not None:
        cargs.extend([
            "--roi1",
            execution.input_file(params.get("roi1"))
        ])
    if params.get("roi2") is not None:
        cargs.extend([
            "--roi2",
            execution.input_file(params.get("roi2"))
        ])
    if params.get("roimesh1") is not None:
        cargs.extend([
            "--roimesh1",
            execution.input_file(params.get("roimesh1"))
        ])
    if params.get("roimesh2") is not None:
        cargs.extend([
            "--roimesh2",
            execution.input_file(params.get("roimesh2"))
        ])
    if params.get("roiref1") is not None:
        cargs.extend([
            "--roiref1",
            execution.input_file(params.get("roiref1"))
        ])
    if params.get("roiref2") is not None:
        cargs.extend([
            "--roiref2",
            execution.input_file(params.get("roiref2"))
        ])
    if params.get("prior") is not None:
        cargs.extend([
            "--prior",
            execution.input_file(params.get("prior"))
        ])
    if params.get("nprior") is not None:
        cargs.extend([
            "--nprior",
            execution.input_file(params.get("nprior"))
        ])
    if params.get("nset") is not None:
        cargs.extend([
            "--nset",
            str(params.get("nset"))
        ])
    if params.get("lprior") is not None:
        cargs.extend([
            "--lprior",
            execution.input_file(params.get("lprior"))
        ])
    if params.get("lset") is not None:
        cargs.extend([
            "--lset",
            str(params.get("lset"))
        ])
    if params.get("seg") is not None:
        cargs.extend([
            "--seg",
            execution.input_file(params.get("seg"))
        ])
    if params.get("tprior") is not None:
        cargs.extend([
            "--tprior",
            execution.input_file(params.get("tprior"))
        ])
    if params.get("cprior") is not None:
        cargs.extend([
            "--cprior",
            execution.input_file(params.get("cprior"))
        ])
    if params.get("reg") is not None:
        cargs.extend([
            "--reg",
            execution.input_file(params.get("reg"))
        ])
    if params.get("regnl") is not None:
        cargs.extend([
            "--regnl",
            execution.input_file(params.get("regnl"))
        ])
    if params.get("init") is not None:
        cargs.extend([
            "--init",
            execution.input_file(params.get("init"))
        ])
    if params.get("nb") is not None:
        cargs.extend([
            "--nb",
            str(params.get("nb"))
        ])
    if params.get("ns") is not None:
        cargs.extend([
            "--ns",
            str(params.get("ns"))
        ])
    if params.get("nk") is not None:
        cargs.extend([
            "--nk",
            str(params.get("nk"))
        ])
    if params.get("nu") is not None:
        cargs.extend([
            "--nu",
            str(params.get("nu"))
        ])
    if params.get("sdp") is not None:
        cargs.extend([
            "--sdp",
            execution.input_file(params.get("sdp"))
        ])
    if params.get("debug"):
        cargs.append("--debug")
    if params.get("checkopts"):
        cargs.append("--checkopts")
    if params.get("version"):
        cargs.append("--version")
    return cargs


def dmri_paths_outputs(
    params: DmriPathsParameters,
    execution: Execution,
) -> DmriPathsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DmriPathsOutputs(
        root=execution.output_file("."),
    )
    return ret


def dmri_paths_execute(
    params: DmriPathsParameters,
    execution: Execution,
) -> DmriPathsOutputs:
    """
    Tool for diffusion MRI path analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `DmriPathsOutputs`).
    """
    params = execution.params(params)
    cargs = dmri_paths_cargs(params, execution)
    ret = dmri_paths_outputs(params, execution)
    execution.run(cargs)
    return ret


def dmri_paths(
    indir: str | None = None,
    outdir: str | None = None,
    dwi: InputPathType | None = None,
    grad: InputPathType | None = None,
    bval: InputPathType | None = None,
    mask: InputPathType | None = None,
    bpdir: str | None = None,
    ntr: float | None = 1,
    fmin: float | None = 0,
    basereg: InputPathType | None = None,
    basemask: InputPathType | None = None,
    roi1: InputPathType | None = None,
    roi2: InputPathType | None = None,
    roimesh1: InputPathType | None = None,
    roimesh2: InputPathType | None = None,
    roiref1: InputPathType | None = None,
    roiref2: InputPathType | None = None,
    prior: InputPathType | None = None,
    nprior: InputPathType | None = None,
    nset: float | None = None,
    lprior: InputPathType | None = None,
    lset: float | None = None,
    seg: InputPathType | None = None,
    tprior: InputPathType | None = None,
    cprior: InputPathType | None = None,
    reg: InputPathType | None = None,
    regnl: InputPathType | None = None,
    init: InputPathType | None = None,
    nb: float | None = 5000,
    ns: float | None = 5000,
    nk: float | None = 10,
    nu: float | None = 40,
    sdp: InputPathType | None = None,
    debug: bool = False,
    checkopts: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> DmriPathsOutputs:
    """
    Tool for diffusion MRI path analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        indir: Input subject directory (optional), specify multiple for\
            longitudinal data.
        outdir: Output directory (one per path).
        dwi: DWI volume series.
        grad: Text file of diffusion gradients.
        bval: Text file of diffusion b-values.
        mask: Mask volume.
        bpdir: BEDPOST directory.
        ntr: Max number of tracts per voxel (default 1).
        fmin: Tract volume fraction threshold (default 0).
        basereg: Base-to-DWI registration, needed for longitudinal data only\
            (.mat, as many as input directories).
        basemask: Base template mask volume.
        roi1: End ROI 1 (volume or label, one per path).
        roi2: End ROI 2 (volume or label, one per path).
        roimesh1: Mesh for end ROI 1 (for label ROIs).
        roimesh2: Mesh for end ROI 2 (for label ROIs).
        roiref1: Reference volume for end ROI 1 (for label ROIs).
        roiref2: Reference volume for end ROI 2 (for label ROIs).
        prior: Spatial path priors (negative log-likelihoods off and on the\
            path, one pair per path).
        nprior: Near-neighbor label priors (negative log-likelihood and list of\
            labels, one pair per path).
        nset: Subset of near-neighbor label priors (default all).
        lprior: Local-neighbor label priors (negative log-likelihood and list\
            of labels, one pair per path).
        lset: Subset of local-neighbor label priors (default all).
        seg: Segmentation map of test subject, specify multiple for\
            longitudinal data.
        tprior: Path tangent vector priors (negative log-likelihood, one per\
            path).
        cprior: Path curvature priors (negative log-likelihood, one per path).
        reg: DWI-to-atlas affine registration (.mat).
        regnl: DWI-to-atlas nonlinear registration (.m3z).
        init: Text file of initial control points (one per path).
        nb: Number of burn-in samples (default 5000).
        ns: Number of post-burn-in samples (default 5000).
        nk: Keep every nk-th sample (default 10).
        nu: Update proposal every nu-th sample (default 40).
        sdp: Text file with initial proposal standard deviations for control\
            point perturbations.
        debug: Turn on debugging.
        checkopts: Don't run anything, just check options and exit.
        version: Print out version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriPathsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DMRI_PATHS_METADATA)
    params = dmri_paths_params(
        indir=indir,
        outdir=outdir,
        dwi=dwi,
        grad=grad,
        bval=bval,
        mask=mask,
        bpdir=bpdir,
        ntr=ntr,
        fmin=fmin,
        basereg=basereg,
        basemask=basemask,
        roi1=roi1,
        roi2=roi2,
        roimesh1=roimesh1,
        roimesh2=roimesh2,
        roiref1=roiref1,
        roiref2=roiref2,
        prior=prior,
        nprior=nprior,
        nset=nset,
        lprior=lprior,
        lset=lset,
        seg=seg,
        tprior=tprior,
        cprior=cprior,
        reg=reg,
        regnl=regnl,
        init=init,
        nb=nb,
        ns=ns,
        nk=nk,
        nu=nu,
        sdp=sdp,
        debug=debug,
        checkopts=checkopts,
        version=version,
    )
    return dmri_paths_execute(params, execution)


__all__ = [
    "DMRI_PATHS_METADATA",
    "DmriPathsOutputs",
    "DmriPathsParameters",
    "dmri_paths",
    "dmri_paths_params",
]
