# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LONGMC_METADATA = Metadata(
    id="51a04d5ffd0bb81591249e8acfb084306bc3edcb.boutiques",
    name="longmc",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


LongmcParameters = typing.TypedDict('LongmcParameters', {
    "__STYX_TYPE__": typing.Literal["longmc"],
    "cross_tp_name": str,
    "base_name": str,
    "conform_to_hires": bool,
    "subjects_dir": str,
    "subject_name": typing.NotRequired[str | None],
    "no_force_update": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "longmc": longmc_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class LongmcOutputs(typing.NamedTuple):
    """
    Output object returned when calling `longmc(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def longmc_params(
    cross_tp_name: str,
    base_name: str,
    subjects_dir: str,
    conform_to_hires: bool = False,
    subject_name: str | None = None,
    no_force_update: bool = False,
) -> LongmcParameters:
    """
    Build parameters.
    
    Args:
        cross_tp_name: Cross time point name for the longitudinal analysis.
        base_name: Base name for the longitudinal analysis.
        subjects_dir: Set the SUBJECTS_DIR directory.
        conform_to_hires: Option to conform input to high-resolution.
        subject_name: Subject name override, must be declared after -long.
        no_force_update: Do not force update.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "longmc",
        "cross_tp_name": cross_tp_name,
        "base_name": base_name,
        "conform_to_hires": conform_to_hires,
        "subjects_dir": subjects_dir,
        "no_force_update": no_force_update,
    }
    if subject_name is not None:
        params["subject_name"] = subject_name
    return params


def longmc_cargs(
    params: LongmcParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("longmc")
    cargs.extend([
        "-long",
        params.get("cross_tp_name")
    ])
    cargs.append(params.get("base_name"))
    if params.get("conform_to_hires"):
        cargs.append("-conf2hires")
    cargs.extend([
        "-sd",
        params.get("subjects_dir")
    ])
    if params.get("subject_name") is not None:
        cargs.extend([
            "-s",
            params.get("subject_name")
        ])
    if params.get("no_force_update"):
        cargs.append("-no-force-update")
    return cargs


def longmc_outputs(
    params: LongmcParameters,
    execution: Execution,
) -> LongmcOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LongmcOutputs(
        root=execution.output_file("."),
    )
    return ret


def longmc_execute(
    params: LongmcParameters,
    execution: Execution,
) -> LongmcOutputs:
    """
    Perform motion correction for the longitudinal recon-all stream when creating
    the longitudinal timepoint of a subject.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `LongmcOutputs`).
    """
    params = execution.params(params)
    cargs = longmc_cargs(params, execution)
    ret = longmc_outputs(params, execution)
    execution.run(cargs)
    return ret


def longmc(
    cross_tp_name: str,
    base_name: str,
    subjects_dir: str,
    conform_to_hires: bool = False,
    subject_name: str | None = None,
    no_force_update: bool = False,
    runner: Runner | None = None,
) -> LongmcOutputs:
    """
    Perform motion correction for the longitudinal recon-all stream when creating
    the longitudinal timepoint of a subject.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        cross_tp_name: Cross time point name for the longitudinal analysis.
        base_name: Base name for the longitudinal analysis.
        subjects_dir: Set the SUBJECTS_DIR directory.
        conform_to_hires: Option to conform input to high-resolution.
        subject_name: Subject name override, must be declared after -long.
        no_force_update: Do not force update.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LongmcOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LONGMC_METADATA)
    params = longmc_params(
        cross_tp_name=cross_tp_name,
        base_name=base_name,
        conform_to_hires=conform_to_hires,
        subjects_dir=subjects_dir,
        subject_name=subject_name,
        no_force_update=no_force_update,
    )
    return longmc_execute(params, execution)


__all__ = [
    "LONGMC_METADATA",
    "LongmcOutputs",
    "LongmcParameters",
    "longmc",
    "longmc_params",
]
