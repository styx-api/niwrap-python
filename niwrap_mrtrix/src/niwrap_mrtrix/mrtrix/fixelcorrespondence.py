# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FIXELCORRESPONDENCE_METADATA = Metadata(
    id="fad1be9b8243f83bbbf677ed7d4db5308a7e3c5d.boutiques",
    name="fixelcorrespondence",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


FixelcorrespondenceConfigParameters = typing.TypedDict('FixelcorrespondenceConfigParameters', {
    "__STYX_TYPE__": typing.Literal["config"],
    "key": str,
    "value": str,
})


FixelcorrespondenceParameters = typing.TypedDict('FixelcorrespondenceParameters', {
    "__STYX_TYPE__": typing.Literal["fixelcorrespondence"],
    "angle": typing.NotRequired[float | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[FixelcorrespondenceConfigParameters] | None],
    "help": bool,
    "version": bool,
    "subject_data": InputPathType,
    "template_directory": InputPathType,
    "output_directory": str,
    "output_data": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fixelcorrespondence": fixelcorrespondence_cargs,
        "config": fixelcorrespondence_config_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


def fixelcorrespondence_config_params(
    key: str,
    value: str,
) -> FixelcorrespondenceConfigParameters:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "config",
        "key": key,
        "value": value,
    }
    return params


def fixelcorrespondence_config_cargs(
    params: FixelcorrespondenceConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key"))
    cargs.append(params.get("value"))
    return cargs


class FixelcorrespondenceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fixelcorrespondence(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fixelcorrespondence_params(
    subject_data: InputPathType,
    template_directory: InputPathType,
    output_directory: str,
    output_data: str,
    angle: float | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[FixelcorrespondenceConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> FixelcorrespondenceParameters:
    """
    Build parameters.
    
    Args:
        subject_data: the input subject fixel data file. This should be a file\
            inside the fixel directory.
        template_directory: the input template fixel directory.
        output_directory: the fixel directory where the output file will be\
            written.
        output_data: the name of the output fixel data file. This will be\
            placed in the output fixel directory.
        angle: the max angle threshold for computing inter-subject fixel\
            correspondence (Default: 45 degrees).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fixelcorrespondence",
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "subject_data": subject_data,
        "template_directory": template_directory,
        "output_directory": output_directory,
        "output_data": output_data,
    }
    if angle is not None:
        params["angle"] = angle
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def fixelcorrespondence_cargs(
    params: FixelcorrespondenceParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fixelcorrespondence")
    if params.get("angle") is not None:
        cargs.extend([
            "-angle",
            str(params.get("angle"))
        ])
    if params.get("info"):
        cargs.append("-info")
    if params.get("quiet"):
        cargs.append("-quiet")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("force"):
        cargs.append("-force")
    if params.get("nthreads") is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads"))
        ])
    if params.get("config") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("config")] for a in c])
    if params.get("help"):
        cargs.append("-help")
    if params.get("version"):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("subject_data")))
    cargs.append(execution.input_file(params.get("template_directory")))
    cargs.append(params.get("output_directory"))
    cargs.append(params.get("output_data"))
    return cargs


def fixelcorrespondence_outputs(
    params: FixelcorrespondenceParameters,
    execution: Execution,
) -> FixelcorrespondenceOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FixelcorrespondenceOutputs(
        root=execution.output_file("."),
    )
    return ret


def fixelcorrespondence_execute(
    params: FixelcorrespondenceParameters,
    execution: Execution,
) -> FixelcorrespondenceOutputs:
    """
    Obtain fixel-fixel correpondence between a subject fixel image and a template
    fixel mask.
    
    It is assumed that the subject image has already been spatially normalised
    and is aligned with the template. The output fixel image will have the same
    fixels (and directions) of the template.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FixelcorrespondenceOutputs`).
    """
    params = execution.params(params)
    cargs = fixelcorrespondence_cargs(params, execution)
    ret = fixelcorrespondence_outputs(params, execution)
    execution.run(cargs)
    return ret


def fixelcorrespondence(
    subject_data: InputPathType,
    template_directory: InputPathType,
    output_directory: str,
    output_data: str,
    angle: float | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[FixelcorrespondenceConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> FixelcorrespondenceOutputs:
    """
    Obtain fixel-fixel correpondence between a subject fixel image and a template
    fixel mask.
    
    It is assumed that the subject image has already been spatially normalised
    and is aligned with the template. The output fixel image will have the same
    fixels (and directions) of the template.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        subject_data: the input subject fixel data file. This should be a file\
            inside the fixel directory.
        template_directory: the input template fixel directory.
        output_directory: the fixel directory where the output file will be\
            written.
        output_data: the name of the output fixel data file. This will be\
            placed in the output fixel directory.
        angle: the max angle threshold for computing inter-subject fixel\
            correspondence (Default: 45 degrees).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FixelcorrespondenceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FIXELCORRESPONDENCE_METADATA)
    params = fixelcorrespondence_params(
        angle=angle,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        subject_data=subject_data,
        template_directory=template_directory,
        output_directory=output_directory,
        output_data=output_data,
    )
    return fixelcorrespondence_execute(params, execution)


__all__ = [
    "FIXELCORRESPONDENCE_METADATA",
    "FixelcorrespondenceConfigParameters",
    "FixelcorrespondenceOutputs",
    "FixelcorrespondenceParameters",
    "fixelcorrespondence",
    "fixelcorrespondence_config_params",
    "fixelcorrespondence_params",
]
