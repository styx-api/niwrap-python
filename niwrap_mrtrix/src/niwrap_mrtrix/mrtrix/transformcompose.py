# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TRANSFORMCOMPOSE_METADATA = Metadata(
    id="8e378625408e1058e736b1bc94ac29bb3d2555e8.boutiques",
    name="transformcompose",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


TransformcomposeConfigParameters = typing.TypedDict('TransformcomposeConfigParameters', {
    "__STYX_TYPE__": typing.Literal["config"],
    "key": str,
    "value": str,
})


TransformcomposeVariousStringParameters = typing.TypedDict('TransformcomposeVariousStringParameters', {
    "__STYX_TYPE__": typing.Literal["VariousString"],
    "obj": str,
})


TransformcomposeVariousFileParameters = typing.TypedDict('TransformcomposeVariousFileParameters', {
    "__STYX_TYPE__": typing.Literal["VariousFile"],
    "obj": InputPathType,
})


TransformcomposeParameters = typing.TypedDict('TransformcomposeParameters', {
    "__STYX_TYPE__": typing.Literal["transformcompose"],
    "template": typing.NotRequired[InputPathType | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[TransformcomposeConfigParameters] | None],
    "help": bool,
    "version": bool,
    "input": list[InputPathType],
    "output": typing.Union[TransformcomposeVariousStringParameters, TransformcomposeVariousFileParameters],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "transformcompose": transformcompose_cargs,
        "config": transformcompose_config_cargs,
        "VariousString": transformcompose_various_string_cargs,
        "VariousFile": transformcompose_various_file_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


def transformcompose_config_params(
    key: str,
    value: str,
) -> TransformcomposeConfigParameters:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "config",
        "key": key,
        "value": value,
    }
    return params


def transformcompose_config_cargs(
    params: TransformcomposeConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key"))
    cargs.append(params.get("value"))
    return cargs


def transformcompose_various_string_params(
    obj: str,
) -> TransformcomposeVariousStringParameters:
    """
    Build parameters.
    
    Args:
        obj: String object.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "VariousString",
        "obj": obj,
    }
    return params


def transformcompose_various_string_cargs(
    params: TransformcomposeVariousStringParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(params.get("obj"))
    return cargs


def transformcompose_various_file_params(
    obj: InputPathType,
) -> TransformcomposeVariousFileParameters:
    """
    Build parameters.
    
    Args:
        obj: File object.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "VariousFile",
        "obj": obj,
    }
    return params


def transformcompose_various_file_cargs(
    params: TransformcomposeVariousFileParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(execution.input_file(params.get("obj")))
    return cargs


class TransformcomposeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `transformcompose(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def transformcompose_params(
    input_: list[InputPathType],
    output: typing.Union[TransformcomposeVariousStringParameters, TransformcomposeVariousFileParameters],
    template: InputPathType | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[TransformcomposeConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> TransformcomposeParameters:
    """
    Build parameters.
    
    Args:
        input_: the input transforms (either linear or non-linear warps).
        output: the output file (may be a linear transformation text file, or a\
            deformation warp field image, depending on usage).
        template: define the output grid defined by a template image.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "transformcompose",
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "input": input_,
        "output": output,
    }
    if template is not None:
        params["template"] = template
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def transformcompose_cargs(
    params: TransformcomposeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("transformcompose")
    if params.get("template") is not None:
        cargs.extend([
            "-template",
            execution.input_file(params.get("template"))
        ])
    if params.get("info"):
        cargs.append("-info")
    if params.get("quiet"):
        cargs.append("-quiet")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("force"):
        cargs.append("-force")
    if params.get("nthreads") is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads"))
        ])
    if params.get("config") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("config")] for a in c])
    if params.get("help"):
        cargs.append("-help")
    if params.get("version"):
        cargs.append("-version")
    cargs.extend([execution.input_file(f) for f in params.get("input")])
    cargs.extend(dyn_cargs(params.get("output")["__STYXTYPE__"])(params.get("output"), execution))
    return cargs


def transformcompose_outputs(
    params: TransformcomposeParameters,
    execution: Execution,
) -> TransformcomposeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TransformcomposeOutputs(
        root=execution.output_file("."),
    )
    return ret


def transformcompose_execute(
    params: TransformcomposeParameters,
    execution: Execution,
) -> TransformcomposeOutputs:
    """
    Compose any number of linear transformations and/or warps into a single
    transformation.
    
    Any linear transforms must be supplied as a 4x4 matrix in a text file (e.g.
    as per the output of mrregister). Any warp fields must be supplied as a 4D
    image representing a deformation field (e.g. as output from mrrregister
    -nl_warp).
    
    Input transformations should be provided to the command in the order in
    which they would be applied to an image if they were to be applied
    individually.
    
    If all input transformations are linear, and the -template option is not
    provided, then the file output by the command will also be a linear
    transformation saved as a 4x4 matrix in a text file. If a template image is
    supplied, then the output will always be a deformation field. If at least
    one of the inputs is a warp field, then the output will be a deformation
    field, which will be defined on the grid of the last input warp image
    supplied if the -template option is not used.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `TransformcomposeOutputs`).
    """
    params = execution.params(params)
    cargs = transformcompose_cargs(params, execution)
    ret = transformcompose_outputs(params, execution)
    execution.run(cargs)
    return ret


def transformcompose(
    input_: list[InputPathType],
    output: typing.Union[TransformcomposeVariousStringParameters, TransformcomposeVariousFileParameters],
    template: InputPathType | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[TransformcomposeConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> TransformcomposeOutputs:
    """
    Compose any number of linear transformations and/or warps into a single
    transformation.
    
    Any linear transforms must be supplied as a 4x4 matrix in a text file (e.g.
    as per the output of mrregister). Any warp fields must be supplied as a 4D
    image representing a deformation field (e.g. as output from mrrregister
    -nl_warp).
    
    Input transformations should be provided to the command in the order in
    which they would be applied to an image if they were to be applied
    individually.
    
    If all input transformations are linear, and the -template option is not
    provided, then the file output by the command will also be a linear
    transformation saved as a 4x4 matrix in a text file. If a template image is
    supplied, then the output will always be a deformation field. If at least
    one of the inputs is a warp field, then the output will be a deformation
    field, which will be defined on the grid of the last input warp image
    supplied if the -template option is not used.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        input_: the input transforms (either linear or non-linear warps).
        output: the output file (may be a linear transformation text file, or a\
            deformation warp field image, depending on usage).
        template: define the output grid defined by a template image.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TransformcomposeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TRANSFORMCOMPOSE_METADATA)
    params = transformcompose_params(
        template=template,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        input_=input_,
        output=output,
    )
    return transformcompose_execute(params, execution)


__all__ = [
    "TRANSFORMCOMPOSE_METADATA",
    "TransformcomposeConfigParameters",
    "TransformcomposeOutputs",
    "TransformcomposeParameters",
    "TransformcomposeVariousFileParameters",
    "TransformcomposeVariousStringParameters",
    "transformcompose",
    "transformcompose_config_params",
    "transformcompose_params",
    "transformcompose_various_file_params",
    "transformcompose_various_string_params",
]
