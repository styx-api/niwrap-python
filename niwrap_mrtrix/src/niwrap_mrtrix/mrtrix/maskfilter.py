# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MASKFILTER_METADATA = Metadata(
    id="0f58b29a006fb07347957237ea8b1bd75f33ff41.boutiques",
    name="maskfilter",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


MaskfilterVariousStringParameters = typing.TypedDict('MaskfilterVariousStringParameters', {
    "__STYX_TYPE__": typing.Literal["VariousString"],
    "obj": str,
})


MaskfilterVariousFileParameters = typing.TypedDict('MaskfilterVariousFileParameters', {
    "__STYX_TYPE__": typing.Literal["VariousFile"],
    "obj": InputPathType,
})


MaskfilterConfigParameters = typing.TypedDict('MaskfilterConfigParameters', {
    "__STYX_TYPE__": typing.Literal["config"],
    "key": str,
    "value": str,
})


MaskfilterParameters = typing.TypedDict('MaskfilterParameters', {
    "__STYX_TYPE__": typing.Literal["maskfilter"],
    "scale": typing.NotRequired[int | None],
    "axes": typing.NotRequired[list[int] | None],
    "largest": bool,
    "connectivity": bool,
    "npass": typing.NotRequired[int | None],
    "extent": typing.NotRequired[list[int] | None],
    "strides": typing.NotRequired[typing.Union[MaskfilterVariousStringParameters, MaskfilterVariousFileParameters] | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[MaskfilterConfigParameters] | None],
    "help": bool,
    "version": bool,
    "input": InputPathType,
    "filter": str,
    "output": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "maskfilter": maskfilter_cargs,
        "VariousString": maskfilter_various_string_cargs,
        "VariousFile": maskfilter_various_file_cargs,
        "config": maskfilter_config_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "maskfilter": maskfilter_outputs,
    }.get(t)


def maskfilter_various_string_params(
    obj: str,
) -> MaskfilterVariousStringParameters:
    """
    Build parameters.
    
    Args:
        obj: String object.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "VariousString",
        "obj": obj,
    }
    return params


def maskfilter_various_string_cargs(
    params: MaskfilterVariousStringParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(params.get("obj"))
    return cargs


def maskfilter_various_file_params(
    obj: InputPathType,
) -> MaskfilterVariousFileParameters:
    """
    Build parameters.
    
    Args:
        obj: File object.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "VariousFile",
        "obj": obj,
    }
    return params


def maskfilter_various_file_cargs(
    params: MaskfilterVariousFileParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(execution.input_file(params.get("obj")))
    return cargs


def maskfilter_config_params(
    key: str,
    value: str,
) -> MaskfilterConfigParameters:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "config",
        "key": key,
        "value": value,
    }
    return params


def maskfilter_config_cargs(
    params: MaskfilterConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key"))
    cargs.append(params.get("value"))
    return cargs


class MaskfilterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `maskfilter(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """the output image."""


def maskfilter_params(
    input_: InputPathType,
    filter_: str,
    output: str,
    scale: int | None = None,
    axes: list[int] | None = None,
    largest: bool = False,
    connectivity: bool = False,
    npass: int | None = None,
    extent: list[int] | None = None,
    strides: typing.Union[MaskfilterVariousStringParameters, MaskfilterVariousFileParameters] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MaskfilterConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> MaskfilterParameters:
    """
    Build parameters.
    
    Args:
        input_: the input image.
        filter_: the type of filter to be applied (clean, connect, dilate,\
            erode, median).
        output: the output image.
        scale: the maximum scale used to cut bridges. A certain maximum scale\
            cuts bridges up to a width (in voxels) of 2x the provided scale.\
            (Default: 2).
        axes: specify which axes should be included in the connected\
            components. By default only the first 3 axes are included. The axes\
            should be provided as a comma-separated list of values.
        largest: only retain the largest connected component.
        connectivity: use 26-voxel-neighbourhood connectivity (Default: 6).
        npass: the number of times to repeatedly apply the filter.
        extent: specify the extent (width) of kernel size in voxels. This can\
            be specified either as a single value to be used for all axes, or as a\
            comma-separated list of the extent for each axis. The default is 3x3x3.
        strides: specify the strides of the output data in memory; either as a\
            comma-separated list of (signed) integers, or as a template image from\
            which the strides shall be extracted and used. The actual strides\
            produced will depend on whether the output image format can support it.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "maskfilter",
        "largest": largest,
        "connectivity": connectivity,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "input": input_,
        "filter": filter_,
        "output": output,
    }
    if scale is not None:
        params["scale"] = scale
    if axes is not None:
        params["axes"] = axes
    if npass is not None:
        params["npass"] = npass
    if extent is not None:
        params["extent"] = extent
    if strides is not None:
        params["strides"] = strides
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def maskfilter_cargs(
    params: MaskfilterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("maskfilter")
    if params.get("scale") is not None:
        cargs.extend([
            "-scale",
            str(params.get("scale"))
        ])
    if params.get("axes") is not None:
        cargs.extend([
            "-axes",
            ",".join(map(str, params.get("axes")))
        ])
    if params.get("largest"):
        cargs.append("-largest")
    if params.get("connectivity"):
        cargs.append("-connectivity")
    if params.get("npass") is not None:
        cargs.extend([
            "-npass",
            str(params.get("npass"))
        ])
    if params.get("extent") is not None:
        cargs.extend([
            "-extent",
            ",".join(map(str, params.get("extent")))
        ])
    if params.get("strides") is not None:
        cargs.extend([
            "-strides",
            *dyn_cargs(params.get("strides")["__STYXTYPE__"])(params.get("strides"), execution)
        ])
    if params.get("info"):
        cargs.append("-info")
    if params.get("quiet"):
        cargs.append("-quiet")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("force"):
        cargs.append("-force")
    if params.get("nthreads") is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads"))
        ])
    if params.get("config") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("config")] for a in c])
    if params.get("help"):
        cargs.append("-help")
    if params.get("version"):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("input")))
    cargs.append(params.get("filter"))
    cargs.append(params.get("output"))
    return cargs


def maskfilter_outputs(
    params: MaskfilterParameters,
    execution: Execution,
) -> MaskfilterOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MaskfilterOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output")),
    )
    return ret


def maskfilter_execute(
    params: MaskfilterParameters,
    execution: Execution,
) -> MaskfilterOutputs:
    """
    Perform filtering operations on 3D / 4D mask images.
    
    The available filters are: clean, connect, dilate, erode, median.
    
    Each filter has its own unique set of optional parameters.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MaskfilterOutputs`).
    """
    params = execution.params(params)
    cargs = maskfilter_cargs(params, execution)
    ret = maskfilter_outputs(params, execution)
    execution.run(cargs)
    return ret


def maskfilter(
    input_: InputPathType,
    filter_: str,
    output: str,
    scale: int | None = None,
    axes: list[int] | None = None,
    largest: bool = False,
    connectivity: bool = False,
    npass: int | None = None,
    extent: list[int] | None = None,
    strides: typing.Union[MaskfilterVariousStringParameters, MaskfilterVariousFileParameters] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MaskfilterConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MaskfilterOutputs:
    """
    Perform filtering operations on 3D / 4D mask images.
    
    The available filters are: clean, connect, dilate, erode, median.
    
    Each filter has its own unique set of optional parameters.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        input_: the input image.
        filter_: the type of filter to be applied (clean, connect, dilate,\
            erode, median).
        output: the output image.
        scale: the maximum scale used to cut bridges. A certain maximum scale\
            cuts bridges up to a width (in voxels) of 2x the provided scale.\
            (Default: 2).
        axes: specify which axes should be included in the connected\
            components. By default only the first 3 axes are included. The axes\
            should be provided as a comma-separated list of values.
        largest: only retain the largest connected component.
        connectivity: use 26-voxel-neighbourhood connectivity (Default: 6).
        npass: the number of times to repeatedly apply the filter.
        extent: specify the extent (width) of kernel size in voxels. This can\
            be specified either as a single value to be used for all axes, or as a\
            comma-separated list of the extent for each axis. The default is 3x3x3.
        strides: specify the strides of the output data in memory; either as a\
            comma-separated list of (signed) integers, or as a template image from\
            which the strides shall be extracted and used. The actual strides\
            produced will depend on whether the output image format can support it.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MaskfilterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MASKFILTER_METADATA)
    params = maskfilter_params(
        scale=scale,
        axes=axes,
        largest=largest,
        connectivity=connectivity,
        npass=npass,
        extent=extent,
        strides=strides,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        input_=input_,
        filter_=filter_,
        output=output,
    )
    return maskfilter_execute(params, execution)


__all__ = [
    "MASKFILTER_METADATA",
    "MaskfilterConfigParameters",
    "MaskfilterOutputs",
    "MaskfilterParameters",
    "MaskfilterVariousFileParameters",
    "MaskfilterVariousStringParameters",
    "maskfilter",
    "maskfilter_config_params",
    "maskfilter_params",
    "maskfilter_various_file_params",
    "maskfilter_various_string_params",
]
