# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TCKRESAMPLE_METADATA = Metadata(
    id="985698dc2451e564202878939f3e4388fbe9d151.boutiques",
    name="tckresample",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


TckresampleLineParameters = typing.TypedDict('TckresampleLineParameters', {
    "__STYX_TYPE__": typing.Literal["line"],
    "num": int,
    "start": list[float],
    "end": list[float],
})


TckresampleArcParameters = typing.TypedDict('TckresampleArcParameters', {
    "__STYX_TYPE__": typing.Literal["arc"],
    "num": int,
    "start": list[float],
    "mid": list[float],
    "end": list[float],
})


TckresampleConfigParameters = typing.TypedDict('TckresampleConfigParameters', {
    "__STYX_TYPE__": typing.Literal["config"],
    "key": str,
    "value": str,
})


TckresampleParameters = typing.TypedDict('TckresampleParameters', {
    "__STYX_TYPE__": typing.Literal["tckresample"],
    "upsample": typing.NotRequired[int | None],
    "downsample": typing.NotRequired[int | None],
    "step_size": typing.NotRequired[float | None],
    "num_points": typing.NotRequired[int | None],
    "endpoints": bool,
    "line": typing.NotRequired[TckresampleLineParameters | None],
    "arc": typing.NotRequired[TckresampleArcParameters | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[TckresampleConfigParameters] | None],
    "help": bool,
    "version": bool,
    "in_tracks": InputPathType,
    "out_tracks": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "tckresample": tckresample_cargs,
        "line": tckresample_line_cargs,
        "arc": tckresample_arc_cargs,
        "config": tckresample_config_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "tckresample": tckresample_outputs,
    }.get(t)


def tckresample_line_params(
    num: int,
    start: list[float],
    end: list[float],
) -> TckresampleLineParameters:
    """
    Build parameters.
    
    Args:
        num: resample tracks at 'num' equidistant locations along a line\
            between 'start' and 'end' (specified as comma-separated 3-vectors in\
            scanner coordinates).
        start: resample tracks at 'num' equidistant locations along a line\
            between 'start' and 'end' (specified as comma-separated 3-vectors in\
            scanner coordinates).
        end: resample tracks at 'num' equidistant locations along a line\
            between 'start' and 'end' (specified as comma-separated 3-vectors in\
            scanner coordinates).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "line",
        "num": num,
        "start": start,
        "end": end,
    }
    return params


def tckresample_line_cargs(
    params: TckresampleLineParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-line")
    cargs.append(str(params.get("num")))
    cargs.append(",".join(map(str, params.get("start"))))
    cargs.append(",".join(map(str, params.get("end"))))
    return cargs


def tckresample_arc_params(
    num: int,
    start: list[float],
    mid: list[float],
    end: list[float],
) -> TckresampleArcParameters:
    """
    Build parameters.
    
    Args:
        num: resample tracks at 'num' equidistant locations along a circular\
            arc specified by points 'start', 'mid' and 'end' (specified as\
            comma-separated 3-vectors in scanner coordinates).
        start: resample tracks at 'num' equidistant locations along a circular\
            arc specified by points 'start', 'mid' and 'end' (specified as\
            comma-separated 3-vectors in scanner coordinates).
        mid: resample tracks at 'num' equidistant locations along a circular\
            arc specified by points 'start', 'mid' and 'end' (specified as\
            comma-separated 3-vectors in scanner coordinates).
        end: resample tracks at 'num' equidistant locations along a circular\
            arc specified by points 'start', 'mid' and 'end' (specified as\
            comma-separated 3-vectors in scanner coordinates).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "arc",
        "num": num,
        "start": start,
        "mid": mid,
        "end": end,
    }
    return params


def tckresample_arc_cargs(
    params: TckresampleArcParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-arc")
    cargs.append(str(params.get("num")))
    cargs.append(",".join(map(str, params.get("start"))))
    cargs.append(",".join(map(str, params.get("mid"))))
    cargs.append(",".join(map(str, params.get("end"))))
    return cargs


def tckresample_config_params(
    key: str,
    value: str,
) -> TckresampleConfigParameters:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "config",
        "key": key,
        "value": value,
    }
    return params


def tckresample_config_cargs(
    params: TckresampleConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key"))
    cargs.append(params.get("value"))
    return cargs


class TckresampleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `tckresample(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_tracks: OutputPathType
    """the output resampled tracks"""


def tckresample_params(
    in_tracks: InputPathType,
    out_tracks: str,
    upsample: int | None = None,
    downsample: int | None = None,
    step_size: float | None = None,
    num_points: int | None = None,
    endpoints: bool = False,
    line: TckresampleLineParameters | None = None,
    arc: TckresampleArcParameters | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[TckresampleConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> TckresampleParameters:
    """
    Build parameters.
    
    Args:
        in_tracks: the input track file.
        out_tracks: the output resampled tracks.
        upsample: increase the density of points along the length of each\
            streamline by some factor (may improve mapping streamlines to ROIs,\
            and/or visualisation).
        downsample: increase the density of points along the length of each\
            streamline by some factor (decreases required storage space).
        step_size: re-sample the streamlines to a desired step size (in mm).
        num_points: re-sample each streamline to a fixed number of points.
        endpoints: only output the two endpoints of each streamline.
        line: resample tracks at 'num' equidistant locations along a line\
            between 'start' and 'end' (specified as comma-separated 3-vectors in\
            scanner coordinates).
        arc: resample tracks at 'num' equidistant locations along a circular\
            arc specified by points 'start', 'mid' and 'end' (specified as\
            comma-separated 3-vectors in scanner coordinates).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "tckresample",
        "endpoints": endpoints,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "in_tracks": in_tracks,
        "out_tracks": out_tracks,
    }
    if upsample is not None:
        params["upsample"] = upsample
    if downsample is not None:
        params["downsample"] = downsample
    if step_size is not None:
        params["step_size"] = step_size
    if num_points is not None:
        params["num_points"] = num_points
    if line is not None:
        params["line"] = line
    if arc is not None:
        params["arc"] = arc
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def tckresample_cargs(
    params: TckresampleParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tckresample")
    if params.get("upsample") is not None:
        cargs.extend([
            "-upsample",
            str(params.get("upsample"))
        ])
    if params.get("downsample") is not None:
        cargs.extend([
            "-downsample",
            str(params.get("downsample"))
        ])
    if params.get("step_size") is not None:
        cargs.extend([
            "-step_size",
            str(params.get("step_size"))
        ])
    if params.get("num_points") is not None:
        cargs.extend([
            "-num_points",
            str(params.get("num_points"))
        ])
    if params.get("endpoints"):
        cargs.append("-endpoints")
    if params.get("line") is not None:
        cargs.extend(dyn_cargs(params.get("line")["__STYXTYPE__"])(params.get("line"), execution))
    if params.get("arc") is not None:
        cargs.extend(dyn_cargs(params.get("arc")["__STYXTYPE__"])(params.get("arc"), execution))
    if params.get("info"):
        cargs.append("-info")
    if params.get("quiet"):
        cargs.append("-quiet")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("force"):
        cargs.append("-force")
    if params.get("nthreads") is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads"))
        ])
    if params.get("config") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("config")] for a in c])
    if params.get("help"):
        cargs.append("-help")
    if params.get("version"):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("in_tracks")))
    cargs.append(params.get("out_tracks"))
    return cargs


def tckresample_outputs(
    params: TckresampleParameters,
    execution: Execution,
) -> TckresampleOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TckresampleOutputs(
        root=execution.output_file("."),
        out_tracks=execution.output_file(params.get("out_tracks")),
    )
    return ret


def tckresample_execute(
    params: TckresampleParameters,
    execution: Execution,
) -> TckresampleOutputs:
    """
    Resample each streamline in a track file to a new set of vertices.
    
    It is necessary to specify precisely ONE of the command-line options for
    controlling how this resampling takes place; this may be either increasing
    or decreasing the number of samples along each streamline, or may involve
    changing the positions of the samples according to some specified
    trajectory.
    
    Note that because the length of a streamline is calculated based on the sums
    of distances between adjacent vertices, resampling a streamline to a new set
    of vertices will typically change the quantified length of that streamline;
    the magnitude of the difference will typically depend on the discrepancy in
    the number of vertices, with less vertices leading to a shorter length (due
    to taking chordal lengths of curved trajectories).
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `TckresampleOutputs`).
    """
    params = execution.params(params)
    cargs = tckresample_cargs(params, execution)
    ret = tckresample_outputs(params, execution)
    execution.run(cargs)
    return ret


def tckresample(
    in_tracks: InputPathType,
    out_tracks: str,
    upsample: int | None = None,
    downsample: int | None = None,
    step_size: float | None = None,
    num_points: int | None = None,
    endpoints: bool = False,
    line: TckresampleLineParameters | None = None,
    arc: TckresampleArcParameters | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[TckresampleConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> TckresampleOutputs:
    """
    Resample each streamline in a track file to a new set of vertices.
    
    It is necessary to specify precisely ONE of the command-line options for
    controlling how this resampling takes place; this may be either increasing
    or decreasing the number of samples along each streamline, or may involve
    changing the positions of the samples according to some specified
    trajectory.
    
    Note that because the length of a streamline is calculated based on the sums
    of distances between adjacent vertices, resampling a streamline to a new set
    of vertices will typically change the quantified length of that streamline;
    the magnitude of the difference will typically depend on the discrepancy in
    the number of vertices, with less vertices leading to a shorter length (due
    to taking chordal lengths of curved trajectories).
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        in_tracks: the input track file.
        out_tracks: the output resampled tracks.
        upsample: increase the density of points along the length of each\
            streamline by some factor (may improve mapping streamlines to ROIs,\
            and/or visualisation).
        downsample: increase the density of points along the length of each\
            streamline by some factor (decreases required storage space).
        step_size: re-sample the streamlines to a desired step size (in mm).
        num_points: re-sample each streamline to a fixed number of points.
        endpoints: only output the two endpoints of each streamline.
        line: resample tracks at 'num' equidistant locations along a line\
            between 'start' and 'end' (specified as comma-separated 3-vectors in\
            scanner coordinates).
        arc: resample tracks at 'num' equidistant locations along a circular\
            arc specified by points 'start', 'mid' and 'end' (specified as\
            comma-separated 3-vectors in scanner coordinates).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TckresampleOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TCKRESAMPLE_METADATA)
    params = tckresample_params(
        upsample=upsample,
        downsample=downsample,
        step_size=step_size,
        num_points=num_points,
        endpoints=endpoints,
        line=line,
        arc=arc,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        in_tracks=in_tracks,
        out_tracks=out_tracks,
    )
    return tckresample_execute(params, execution)


__all__ = [
    "TCKRESAMPLE_METADATA",
    "TckresampleArcParameters",
    "TckresampleConfigParameters",
    "TckresampleLineParameters",
    "TckresampleOutputs",
    "TckresampleParameters",
    "tckresample",
    "tckresample_arc_params",
    "tckresample_config_params",
    "tckresample_line_params",
    "tckresample_params",
]
