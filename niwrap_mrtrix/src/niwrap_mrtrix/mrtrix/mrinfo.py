# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRINFO_METADATA = Metadata(
    id="640aec1bccae29356c89f4af6bea995bd8e6eee5.boutiques",
    name="mrinfo",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


MrinfoPropertyParameters = typing.TypedDict('MrinfoPropertyParameters', {
    "__STYX_TYPE__": typing.Literal["property"],
    "key": str,
})


MrinfoFslgradParameters = typing.TypedDict('MrinfoFslgradParameters', {
    "__STYX_TYPE__": typing.Literal["fslgrad"],
    "bvecs": InputPathType,
    "bvals": InputPathType,
})


MrinfoExportGradFslParameters = typing.TypedDict('MrinfoExportGradFslParameters', {
    "__STYX_TYPE__": typing.Literal["export_grad_fsl"],
    "bvecs_path": str,
    "bvals_path": str,
})


MrinfoExportPeEddyParameters = typing.TypedDict('MrinfoExportPeEddyParameters', {
    "__STYX_TYPE__": typing.Literal["export_pe_eddy"],
    "config": str,
    "indices": str,
})


MrinfoConfigParameters = typing.TypedDict('MrinfoConfigParameters', {
    "__STYX_TYPE__": typing.Literal["config"],
    "key": str,
    "value": str,
})


MrinfoParameters = typing.TypedDict('MrinfoParameters', {
    "__STYX_TYPE__": typing.Literal["mrinfo"],
    "all": bool,
    "name": bool,
    "format": bool,
    "ndim": bool,
    "size": bool,
    "spacing": bool,
    "datatype": bool,
    "strides": bool,
    "offset": bool,
    "multiplier": bool,
    "transform": bool,
    "property": typing.NotRequired[list[MrinfoPropertyParameters] | None],
    "json_keyval": typing.NotRequired[str | None],
    "json_all": typing.NotRequired[str | None],
    "grad": typing.NotRequired[InputPathType | None],
    "fslgrad": typing.NotRequired[MrinfoFslgradParameters | None],
    "bvalue_scaling": typing.NotRequired[str | None],
    "export_grad_mrtrix": typing.NotRequired[str | None],
    "export_grad_fsl": typing.NotRequired[MrinfoExportGradFslParameters | None],
    "dwgrad": bool,
    "shell_bvalues": bool,
    "shell_sizes": bool,
    "shell_indices": bool,
    "export_pe_table": typing.NotRequired[str | None],
    "export_pe_eddy": typing.NotRequired[MrinfoExportPeEddyParameters | None],
    "petable": bool,
    "nodelete": bool,
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[MrinfoConfigParameters] | None],
    "help": bool,
    "version": bool,
    "image": list[InputPathType],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "mrinfo": mrinfo_cargs,
        "property": mrinfo_property_cargs,
        "fslgrad": mrinfo_fslgrad_cargs,
        "export_grad_fsl": mrinfo_export_grad_fsl_cargs,
        "export_pe_eddy": mrinfo_export_pe_eddy_cargs,
        "config": mrinfo_config_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "mrinfo": mrinfo_outputs,
        "export_grad_fsl": mrinfo_export_grad_fsl_outputs,
        "export_pe_eddy": mrinfo_export_pe_eddy_outputs,
    }.get(t)


def mrinfo_property_params(
    key: str,
) -> MrinfoPropertyParameters:
    """
    Build parameters.
    
    Args:
        key: any text properties embedded in the image header under the\
            specified key (use 'all' to list all keys found).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "property",
        "key": key,
    }
    return params


def mrinfo_property_cargs(
    params: MrinfoPropertyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-property")
    cargs.append(params.get("key"))
    return cargs


def mrinfo_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
) -> MrinfoFslgradParameters:
    """
    Build parameters.
    
    Args:
        bvecs: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        bvals: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fslgrad",
        "bvecs": bvecs,
        "bvals": bvals,
    }
    return params


def mrinfo_fslgrad_cargs(
    params: MrinfoFslgradParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-fslgrad")
    cargs.append(execution.input_file(params.get("bvecs")))
    cargs.append(execution.input_file(params.get("bvals")))
    return cargs


class MrinfoExportGradFslOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrinfoExportGradFslParameters | None(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    bvecs_path: OutputPathType
    """export the diffusion-weighted gradient table to files in FSL (bvecs /
    bvals) format"""
    bvals_path: OutputPathType
    """export the diffusion-weighted gradient table to files in FSL (bvecs /
    bvals) format"""


def mrinfo_export_grad_fsl_params(
    bvecs_path: str,
    bvals_path: str,
) -> MrinfoExportGradFslParameters:
    """
    Build parameters.
    
    Args:
        bvecs_path: export the diffusion-weighted gradient table to files in\
            FSL (bvecs / bvals) format.
        bvals_path: export the diffusion-weighted gradient table to files in\
            FSL (bvecs / bvals) format.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "export_grad_fsl",
        "bvecs_path": bvecs_path,
        "bvals_path": bvals_path,
    }
    return params


def mrinfo_export_grad_fsl_cargs(
    params: MrinfoExportGradFslParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-export_grad_fsl")
    cargs.append(params.get("bvecs_path"))
    cargs.append(params.get("bvals_path"))
    return cargs


def mrinfo_export_grad_fsl_outputs(
    params: MrinfoExportGradFslParameters,
    execution: Execution,
) -> MrinfoExportGradFslOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrinfoExportGradFslOutputs(
        root=execution.output_file("."),
        bvecs_path=execution.output_file(params.get("bvecs_path")),
        bvals_path=execution.output_file(params.get("bvals_path")),
    )
    return ret


class MrinfoExportPeEddyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrinfoExportPeEddyParameters | None(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    config: OutputPathType
    """export phase-encoding information to an EDDY-style config / index file
    pair"""
    indices: OutputPathType
    """export phase-encoding information to an EDDY-style config / index file
    pair"""


def mrinfo_export_pe_eddy_params(
    config: str,
    indices: str,
) -> MrinfoExportPeEddyParameters:
    """
    Build parameters.
    
    Args:
        config: export phase-encoding information to an EDDY-style config /\
            index file pair.
        indices: export phase-encoding information to an EDDY-style config /\
            index file pair.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "export_pe_eddy",
        "config": config,
        "indices": indices,
    }
    return params


def mrinfo_export_pe_eddy_cargs(
    params: MrinfoExportPeEddyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-export_pe_eddy")
    cargs.append(params.get("config"))
    cargs.append(params.get("indices"))
    return cargs


def mrinfo_export_pe_eddy_outputs(
    params: MrinfoExportPeEddyParameters,
    execution: Execution,
) -> MrinfoExportPeEddyOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrinfoExportPeEddyOutputs(
        root=execution.output_file("."),
        config=execution.output_file(params.get("config")),
        indices=execution.output_file(params.get("indices")),
    )
    return ret


def mrinfo_config_params(
    key: str,
    value: str,
) -> MrinfoConfigParameters:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "config",
        "key": key,
        "value": value,
    }
    return params


def mrinfo_config_cargs(
    params: MrinfoConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key"))
    cargs.append(params.get("value"))
    return cargs


class MrinfoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mrinfo(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    json_keyval: OutputPathType | None
    """export header key/value entries to a JSON file """
    json_all: OutputPathType | None
    """export all header contents to a JSON file """
    export_grad_mrtrix: OutputPathType | None
    """export the diffusion-weighted gradient table to file in MRtrix format """
    export_pe_table: OutputPathType | None
    """export phase-encoding table to file """
    export_grad_fsl: MrinfoExportGradFslOutputs | None
    """Outputs from `mrinfo_export_grad_fsl_outputs`."""
    export_pe_eddy: MrinfoExportPeEddyOutputs | None
    """Outputs from `mrinfo_export_pe_eddy_outputs`."""


def mrinfo_params(
    image: list[InputPathType],
    all_: bool = False,
    name: bool = False,
    format_: bool = False,
    ndim: bool = False,
    size: bool = False,
    spacing: bool = False,
    datatype: bool = False,
    strides: bool = False,
    offset: bool = False,
    multiplier: bool = False,
    transform: bool = False,
    property_: list[MrinfoPropertyParameters] | None = None,
    json_keyval: str | None = None,
    json_all: str | None = None,
    grad: InputPathType | None = None,
    fslgrad: MrinfoFslgradParameters | None = None,
    bvalue_scaling: str | None = None,
    export_grad_mrtrix: str | None = None,
    export_grad_fsl: MrinfoExportGradFslParameters | None = None,
    dwgrad: bool = False,
    shell_bvalues: bool = False,
    shell_sizes: bool = False,
    shell_indices: bool = False,
    export_pe_table: str | None = None,
    export_pe_eddy: MrinfoExportPeEddyParameters | None = None,
    petable: bool = False,
    nodelete: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MrinfoConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> MrinfoParameters:
    """
    Build parameters.
    
    Args:
        image: the input image(s).
        all_: print all properties, rather than the first and last 2 of each.
        name: print the file system path of the image.
        format_: image file format.
        ndim: number of image dimensions.
        size: image size along each axis.
        spacing: voxel spacing along each image dimension.
        datatype: data type used for image data storage.
        strides: data strides i.e. order and direction of axes data layout.
        offset: image intensity offset.
        multiplier: image intensity multiplier.
        transform: the transformation from image coordinates [mm] to scanner /\
            real world coordinates [mm].
        property_: any text properties embedded in the image header under the\
            specified key (use 'all' to list all keys found).
        json_keyval: export header key/value entries to a JSON file.
        json_all: export all header contents to a JSON file.
        grad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in a text file. This should be supplied as a 4xN text file\
            with each line is in the format [ X Y Z b ], where [ X Y Z ] describe\
            the direction of the applied gradient, and b gives the b-value in units\
            of s/mm^2. If a diffusion gradient scheme is present in the input image\
            header, the data provided with this option will be instead used.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        bvalue_scaling: enable or disable scaling of diffusion b-values by the\
            square of the corresponding DW gradient norm (see Desciption). Valid\
            choices are yes/no, true/false, 0/1 (default: automatic).
        export_grad_mrtrix: export the diffusion-weighted gradient table to\
            file in MRtrix format.
        export_grad_fsl: export the diffusion-weighted gradient table to files\
            in FSL (bvecs / bvals) format.
        dwgrad: the diffusion-weighting gradient table, as interpreted by\
            MRtrix3.
        shell_bvalues: list the average b-value of each shell.
        shell_sizes: list the number of volumes in each shell.
        shell_indices: list the image volumes attributed to each b-value shell.
        export_pe_table: export phase-encoding table to file.
        export_pe_eddy: export phase-encoding information to an EDDY-style\
            config / index file pair.
        petable: print the phase encoding table.
        nodelete: don't delete temporary images or images passed to mrinfo via\
            Unix pipes.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "mrinfo",
        "all": all_,
        "name": name,
        "format": format_,
        "ndim": ndim,
        "size": size,
        "spacing": spacing,
        "datatype": datatype,
        "strides": strides,
        "offset": offset,
        "multiplier": multiplier,
        "transform": transform,
        "dwgrad": dwgrad,
        "shell_bvalues": shell_bvalues,
        "shell_sizes": shell_sizes,
        "shell_indices": shell_indices,
        "petable": petable,
        "nodelete": nodelete,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "image": image,
    }
    if property_ is not None:
        params["property"] = property_
    if json_keyval is not None:
        params["json_keyval"] = json_keyval
    if json_all is not None:
        params["json_all"] = json_all
    if grad is not None:
        params["grad"] = grad
    if fslgrad is not None:
        params["fslgrad"] = fslgrad
    if bvalue_scaling is not None:
        params["bvalue_scaling"] = bvalue_scaling
    if export_grad_mrtrix is not None:
        params["export_grad_mrtrix"] = export_grad_mrtrix
    if export_grad_fsl is not None:
        params["export_grad_fsl"] = export_grad_fsl
    if export_pe_table is not None:
        params["export_pe_table"] = export_pe_table
    if export_pe_eddy is not None:
        params["export_pe_eddy"] = export_pe_eddy
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def mrinfo_cargs(
    params: MrinfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mrinfo")
    if params.get("all"):
        cargs.append("-all")
    if params.get("name"):
        cargs.append("-name")
    if params.get("format"):
        cargs.append("-format")
    if params.get("ndim"):
        cargs.append("-ndim")
    if params.get("size"):
        cargs.append("-size")
    if params.get("spacing"):
        cargs.append("-spacing")
    if params.get("datatype"):
        cargs.append("-datatype")
    if params.get("strides"):
        cargs.append("-strides")
    if params.get("offset"):
        cargs.append("-offset")
    if params.get("multiplier"):
        cargs.append("-multiplier")
    if params.get("transform"):
        cargs.append("-transform")
    if params.get("property") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("property")] for a in c])
    if params.get("json_keyval") is not None:
        cargs.extend([
            "-json_keyval",
            params.get("json_keyval")
        ])
    if params.get("json_all") is not None:
        cargs.extend([
            "-json_all",
            params.get("json_all")
        ])
    if params.get("grad") is not None:
        cargs.extend([
            "-grad",
            execution.input_file(params.get("grad"))
        ])
    if params.get("fslgrad") is not None:
        cargs.extend(dyn_cargs(params.get("fslgrad")["__STYXTYPE__"])(params.get("fslgrad"), execution))
    if params.get("bvalue_scaling") is not None:
        cargs.extend([
            "-bvalue_scaling",
            params.get("bvalue_scaling")
        ])
    if params.get("export_grad_mrtrix") is not None:
        cargs.extend([
            "-export_grad_mrtrix",
            params.get("export_grad_mrtrix")
        ])
    if params.get("export_grad_fsl") is not None:
        cargs.extend(dyn_cargs(params.get("export_grad_fsl")["__STYXTYPE__"])(params.get("export_grad_fsl"), execution))
    if params.get("dwgrad"):
        cargs.append("-dwgrad")
    if params.get("shell_bvalues"):
        cargs.append("-shell_bvalues")
    if params.get("shell_sizes"):
        cargs.append("-shell_sizes")
    if params.get("shell_indices"):
        cargs.append("-shell_indices")
    if params.get("export_pe_table") is not None:
        cargs.extend([
            "-export_pe_table",
            params.get("export_pe_table")
        ])
    if params.get("export_pe_eddy") is not None:
        cargs.extend(dyn_cargs(params.get("export_pe_eddy")["__STYXTYPE__"])(params.get("export_pe_eddy"), execution))
    if params.get("petable"):
        cargs.append("-petable")
    if params.get("nodelete"):
        cargs.append("-nodelete")
    if params.get("info"):
        cargs.append("-info")
    if params.get("quiet"):
        cargs.append("-quiet")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("force"):
        cargs.append("-force")
    if params.get("nthreads") is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads"))
        ])
    if params.get("config") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("config")] for a in c])
    if params.get("help"):
        cargs.append("-help")
    if params.get("version"):
        cargs.append("-version")
    cargs.extend([execution.input_file(f) for f in params.get("image")])
    return cargs


def mrinfo_outputs(
    params: MrinfoParameters,
    execution: Execution,
) -> MrinfoOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrinfoOutputs(
        root=execution.output_file("."),
        json_keyval=execution.output_file(params.get("json_keyval")) if (params.get("json_keyval") is not None) else None,
        json_all=execution.output_file(params.get("json_all")) if (params.get("json_all") is not None) else None,
        export_grad_mrtrix=execution.output_file(params.get("export_grad_mrtrix")) if (params.get("export_grad_mrtrix") is not None) else None,
        export_pe_table=execution.output_file(params.get("export_pe_table")) if (params.get("export_pe_table") is not None) else None,
        export_grad_fsl=dyn_outputs(params.get("export_grad_fsl")["__STYXTYPE__"])(params.get("export_grad_fsl"), execution) if params.get("export_grad_fsl") else None,
        export_pe_eddy=dyn_outputs(params.get("export_pe_eddy")["__STYXTYPE__"])(params.get("export_pe_eddy"), execution) if params.get("export_pe_eddy") else None,
    )
    return ret


def mrinfo_execute(
    params: MrinfoParameters,
    execution: Execution,
) -> MrinfoOutputs:
    """
    Display image header information, or extract specific information from the
    header.
    
    By default, all information contained in each image header will be printed
    to the console in a reader-friendly format.
    
    Alternatively, command-line options may be used to extract specific details
    from the header(s); these are printed to the console in a format more
    appropriate for scripting purposes or piping to file. If multiple options
    and/or images are provided, the requested header fields will be printed in
    the order in which they appear in the help page, with all requested details
    from each input image in sequence printed before the next image is
    processed.
    
    The command can also write the diffusion gradient table from a single input
    image to file; either in the MRtrix or FSL format (bvecs/bvals file pair;
    includes appropriate diffusion gradient vector reorientation)
    
    The -dwgrad, -export_* and -shell_* options provide (information about) the
    diffusion weighting gradient table after it has been processed by the
    MRtrix3 back-end (vectors normalised, b-values scaled by the square of the
    vector norm, depending on the -bvalue_scaling option). To see the raw
    gradient table information as stored in the image header, i.e. without
    MRtrix3 back-end processing, use "-property dw_scheme".
    
    The -bvalue_scaling option controls an aspect of the import of diffusion
    gradient tables. When the input diffusion-weighting direction vectors have
    norms that differ substantially from unity, the b-values will be scaled by
    the square of their corresponding vector norm (this is how multi-shell
    acquisitions are frequently achieved on scanner platforms). However in some
    rare instances, the b-values may be correct, despite the vectors not being
    of unit norm (or conversely, the b-values may need to be rescaled even
    though the vectors are close to unit norm). This option allows the user to
    control this operation and override MRrtix3's automatic detection.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MrinfoOutputs`).
    """
    params = execution.params(params)
    cargs = mrinfo_cargs(params, execution)
    ret = mrinfo_outputs(params, execution)
    execution.run(cargs)
    return ret


def mrinfo(
    image: list[InputPathType],
    all_: bool = False,
    name: bool = False,
    format_: bool = False,
    ndim: bool = False,
    size: bool = False,
    spacing: bool = False,
    datatype: bool = False,
    strides: bool = False,
    offset: bool = False,
    multiplier: bool = False,
    transform: bool = False,
    property_: list[MrinfoPropertyParameters] | None = None,
    json_keyval: str | None = None,
    json_all: str | None = None,
    grad: InputPathType | None = None,
    fslgrad: MrinfoFslgradParameters | None = None,
    bvalue_scaling: str | None = None,
    export_grad_mrtrix: str | None = None,
    export_grad_fsl: MrinfoExportGradFslParameters | None = None,
    dwgrad: bool = False,
    shell_bvalues: bool = False,
    shell_sizes: bool = False,
    shell_indices: bool = False,
    export_pe_table: str | None = None,
    export_pe_eddy: MrinfoExportPeEddyParameters | None = None,
    petable: bool = False,
    nodelete: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MrinfoConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MrinfoOutputs:
    """
    Display image header information, or extract specific information from the
    header.
    
    By default, all information contained in each image header will be printed
    to the console in a reader-friendly format.
    
    Alternatively, command-line options may be used to extract specific details
    from the header(s); these are printed to the console in a format more
    appropriate for scripting purposes or piping to file. If multiple options
    and/or images are provided, the requested header fields will be printed in
    the order in which they appear in the help page, with all requested details
    from each input image in sequence printed before the next image is
    processed.
    
    The command can also write the diffusion gradient table from a single input
    image to file; either in the MRtrix or FSL format (bvecs/bvals file pair;
    includes appropriate diffusion gradient vector reorientation)
    
    The -dwgrad, -export_* and -shell_* options provide (information about) the
    diffusion weighting gradient table after it has been processed by the
    MRtrix3 back-end (vectors normalised, b-values scaled by the square of the
    vector norm, depending on the -bvalue_scaling option). To see the raw
    gradient table information as stored in the image header, i.e. without
    MRtrix3 back-end processing, use "-property dw_scheme".
    
    The -bvalue_scaling option controls an aspect of the import of diffusion
    gradient tables. When the input diffusion-weighting direction vectors have
    norms that differ substantially from unity, the b-values will be scaled by
    the square of their corresponding vector norm (this is how multi-shell
    acquisitions are frequently achieved on scanner platforms). However in some
    rare instances, the b-values may be correct, despite the vectors not being
    of unit norm (or conversely, the b-values may need to be rescaled even
    though the vectors are close to unit norm). This option allows the user to
    control this operation and override MRrtix3's automatic detection.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        image: the input image(s).
        all_: print all properties, rather than the first and last 2 of each.
        name: print the file system path of the image.
        format_: image file format.
        ndim: number of image dimensions.
        size: image size along each axis.
        spacing: voxel spacing along each image dimension.
        datatype: data type used for image data storage.
        strides: data strides i.e. order and direction of axes data layout.
        offset: image intensity offset.
        multiplier: image intensity multiplier.
        transform: the transformation from image coordinates [mm] to scanner /\
            real world coordinates [mm].
        property_: any text properties embedded in the image header under the\
            specified key (use 'all' to list all keys found).
        json_keyval: export header key/value entries to a JSON file.
        json_all: export all header contents to a JSON file.
        grad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in a text file. This should be supplied as a 4xN text file\
            with each line is in the format [ X Y Z b ], where [ X Y Z ] describe\
            the direction of the applied gradient, and b gives the b-value in units\
            of s/mm^2. If a diffusion gradient scheme is present in the input image\
            header, the data provided with this option will be instead used.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        bvalue_scaling: enable or disable scaling of diffusion b-values by the\
            square of the corresponding DW gradient norm (see Desciption). Valid\
            choices are yes/no, true/false, 0/1 (default: automatic).
        export_grad_mrtrix: export the diffusion-weighted gradient table to\
            file in MRtrix format.
        export_grad_fsl: export the diffusion-weighted gradient table to files\
            in FSL (bvecs / bvals) format.
        dwgrad: the diffusion-weighting gradient table, as interpreted by\
            MRtrix3.
        shell_bvalues: list the average b-value of each shell.
        shell_sizes: list the number of volumes in each shell.
        shell_indices: list the image volumes attributed to each b-value shell.
        export_pe_table: export phase-encoding table to file.
        export_pe_eddy: export phase-encoding information to an EDDY-style\
            config / index file pair.
        petable: print the phase encoding table.
        nodelete: don't delete temporary images or images passed to mrinfo via\
            Unix pipes.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrinfoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRINFO_METADATA)
    params = mrinfo_params(
        all_=all_,
        name=name,
        format_=format_,
        ndim=ndim,
        size=size,
        spacing=spacing,
        datatype=datatype,
        strides=strides,
        offset=offset,
        multiplier=multiplier,
        transform=transform,
        property_=property_,
        json_keyval=json_keyval,
        json_all=json_all,
        grad=grad,
        fslgrad=fslgrad,
        bvalue_scaling=bvalue_scaling,
        export_grad_mrtrix=export_grad_mrtrix,
        export_grad_fsl=export_grad_fsl,
        dwgrad=dwgrad,
        shell_bvalues=shell_bvalues,
        shell_sizes=shell_sizes,
        shell_indices=shell_indices,
        export_pe_table=export_pe_table,
        export_pe_eddy=export_pe_eddy,
        petable=petable,
        nodelete=nodelete,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        image=image,
    )
    return mrinfo_execute(params, execution)


__all__ = [
    "MRINFO_METADATA",
    "MrinfoConfigParameters",
    "MrinfoExportGradFslOutputs",
    "MrinfoExportGradFslParameters",
    "MrinfoExportPeEddyOutputs",
    "MrinfoExportPeEddyParameters",
    "MrinfoFslgradParameters",
    "MrinfoOutputs",
    "MrinfoParameters",
    "MrinfoPropertyParameters",
    "mrinfo",
    "mrinfo_config_params",
    "mrinfo_export_grad_fsl_params",
    "mrinfo_export_pe_eddy_params",
    "mrinfo_fslgrad_params",
    "mrinfo_params",
    "mrinfo_property_params",
]
