# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FIXEL2PEAKS_METADATA = Metadata(
    id="06bfc4edb74f24e1df62b484f707ec9d4d317d85.boutiques",
    name="fixel2peaks",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


Fixel2peaksConfigParameters = typing.TypedDict('Fixel2peaksConfigParameters', {
    "__STYX_TYPE__": typing.Literal["config"],
    "key": str,
    "value": str,
})


Fixel2peaksVariousStringParameters = typing.TypedDict('Fixel2peaksVariousStringParameters', {
    "__STYX_TYPE__": typing.Literal["VariousString"],
    "obj": str,
})


Fixel2peaksVariousFileParameters = typing.TypedDict('Fixel2peaksVariousFileParameters', {
    "__STYX_TYPE__": typing.Literal["VariousFile"],
    "obj": InputPathType,
})


Fixel2peaksParameters = typing.TypedDict('Fixel2peaksParameters', {
    "__STYX_TYPE__": typing.Literal["fixel2peaks"],
    "number": typing.NotRequired[int | None],
    "nan": bool,
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[Fixel2peaksConfigParameters] | None],
    "help": bool,
    "version": bool,
    "in": typing.Union[Fixel2peaksVariousStringParameters, Fixel2peaksVariousFileParameters],
    "out": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "fixel2peaks": fixel2peaks_cargs,
        "config": fixel2peaks_config_cargs,
        "VariousString": fixel2peaks_various_string_cargs,
        "VariousFile": fixel2peaks_various_file_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "fixel2peaks": fixel2peaks_outputs,
    }.get(t)


def fixel2peaks_config_params(
    key: str,
    value: str,
) -> Fixel2peaksConfigParameters:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "config",
        "key": key,
        "value": value,
    }
    return params


def fixel2peaks_config_cargs(
    params: Fixel2peaksConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key"))
    cargs.append(params.get("value"))
    return cargs


def fixel2peaks_various_string_params(
    obj: str,
) -> Fixel2peaksVariousStringParameters:
    """
    Build parameters.
    
    Args:
        obj: String object.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "VariousString",
        "obj": obj,
    }
    return params


def fixel2peaks_various_string_cargs(
    params: Fixel2peaksVariousStringParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(params.get("obj"))
    return cargs


def fixel2peaks_various_file_params(
    obj: InputPathType,
) -> Fixel2peaksVariousFileParameters:
    """
    Build parameters.
    
    Args:
        obj: File object.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "VariousFile",
        "obj": obj,
    }
    return params


def fixel2peaks_various_file_cargs(
    params: Fixel2peaksVariousFileParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(execution.input_file(params.get("obj")))
    return cargs


class Fixel2peaksOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fixel2peaks(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out: OutputPathType
    """the output peaks image"""


def fixel2peaks_params(
    in_: typing.Union[Fixel2peaksVariousStringParameters, Fixel2peaksVariousFileParameters],
    out: str,
    number: int | None = None,
    nan: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Fixel2peaksConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> Fixel2peaksParameters:
    """
    Build parameters.
    
    Args:
        in_: the input fixel information.
        out: the output peaks image.
        number: maximum number of fixels in each voxel (default: based on input\
            data).
        nan: fill excess peak data with NaNs rather than zeroes.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fixel2peaks",
        "nan": nan,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "in": in_,
        "out": out,
    }
    if number is not None:
        params["number"] = number
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def fixel2peaks_cargs(
    params: Fixel2peaksParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fixel2peaks")
    if params.get("number") is not None:
        cargs.extend([
            "-number",
            str(params.get("number"))
        ])
    if params.get("nan"):
        cargs.append("-nan")
    if params.get("info"):
        cargs.append("-info")
    if params.get("quiet"):
        cargs.append("-quiet")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("force"):
        cargs.append("-force")
    if params.get("nthreads") is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads"))
        ])
    if params.get("config") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("config")] for a in c])
    if params.get("help"):
        cargs.append("-help")
    if params.get("version"):
        cargs.append("-version")
    cargs.extend(dyn_cargs(params.get("in")["__STYXTYPE__"])(params.get("in"), execution))
    cargs.append(params.get("out"))
    return cargs


def fixel2peaks_outputs(
    params: Fixel2peaksParameters,
    execution: Execution,
) -> Fixel2peaksOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Fixel2peaksOutputs(
        root=execution.output_file("."),
        out=execution.output_file(params.get("out")),
    )
    return ret


def fixel2peaks_execute(
    params: Fixel2peaksParameters,
    execution: Execution,
) -> Fixel2peaksOutputs:
    """
    Convert data in the fixel directory format into a 4D image of 3-vectors.
    
    If a fixel data file is provided as input, then the 3-vectors in the output
    image will be scaled based on the data in that file. If the input is instead
    the fixel directory, or the index or directions file, then all output
    3-vectors will possess unit norm.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `Fixel2peaksOutputs`).
    """
    params = execution.params(params)
    cargs = fixel2peaks_cargs(params, execution)
    ret = fixel2peaks_outputs(params, execution)
    execution.run(cargs)
    return ret


def fixel2peaks(
    in_: typing.Union[Fixel2peaksVariousStringParameters, Fixel2peaksVariousFileParameters],
    out: str,
    number: int | None = None,
    nan: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Fixel2peaksConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> Fixel2peaksOutputs:
    """
    Convert data in the fixel directory format into a 4D image of 3-vectors.
    
    If a fixel data file is provided as input, then the 3-vectors in the output
    image will be scaled based on the data in that file. If the input is instead
    the fixel directory, or the index or directions file, then all output
    3-vectors will possess unit norm.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        in_: the input fixel information.
        out: the output peaks image.
        number: maximum number of fixels in each voxel (default: based on input\
            data).
        nan: fill excess peak data with NaNs rather than zeroes.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Fixel2peaksOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FIXEL2PEAKS_METADATA)
    params = fixel2peaks_params(
        number=number,
        nan=nan,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        in_=in_,
        out=out,
    )
    return fixel2peaks_execute(params, execution)


__all__ = [
    "FIXEL2PEAKS_METADATA",
    "Fixel2peaksConfigParameters",
    "Fixel2peaksOutputs",
    "Fixel2peaksParameters",
    "Fixel2peaksVariousFileParameters",
    "Fixel2peaksVariousStringParameters",
    "fixel2peaks",
    "fixel2peaks_config_params",
    "fixel2peaks_params",
    "fixel2peaks_various_file_params",
    "fixel2peaks_various_string_params",
]
