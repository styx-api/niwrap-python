# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DWIBIASCORRECT_METADATA = Metadata(
    id="9185a0c94cb9a81f571005ce1de2411183c6df3f.boutiques",
    name="dwibiascorrect",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


DwibiascorrectFslgradParameters = typing.TypedDict('DwibiascorrectFslgradParameters', {
    "__STYX_TYPE__": typing.Literal["fslgrad"],
    "bvecs": InputPathType,
    "bvals": InputPathType,
})


DwibiascorrectParameters = typing.TypedDict('DwibiascorrectParameters', {
    "__STYX_TYPE__": typing.Literal["dwibiascorrect"],
    "algorithm": str,
    "input_image": InputPathType,
    "output_image": str,
    "grad": typing.NotRequired[InputPathType | None],
    "fslgrad": typing.NotRequired[DwibiascorrectFslgradParameters | None],
    "mask_image": typing.NotRequired[InputPathType | None],
    "bias_image": typing.NotRequired[InputPathType | None],
    "nocleanup": bool,
    "scratch_dir": typing.NotRequired[InputPathType | None],
    "continue_scratch_dir": typing.NotRequired[list[InputPathType] | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[float | None],
    "help": bool,
    "version": bool,
    "ants_b": typing.NotRequired[str | None],
    "ants_c": typing.NotRequired[str | None],
    "ants_s": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "dwibiascorrect": dwibiascorrect_cargs,
        "fslgrad": dwibiascorrect_fslgrad_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "dwibiascorrect": dwibiascorrect_outputs,
    }.get(t)


def dwibiascorrect_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
) -> DwibiascorrectFslgradParameters:
    """
    Build parameters.
    
    Args:
        bvecs: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        bvals: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fslgrad",
        "bvecs": bvecs,
        "bvals": bvals,
    }
    return params


def dwibiascorrect_fslgrad_cargs(
    params: DwibiascorrectFslgradParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-fslgrad")
    cargs.append(execution.input_file(params.get("bvecs")))
    cargs.append(execution.input_file(params.get("bvals")))
    return cargs


class DwibiascorrectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `dwibiascorrect(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_image_file: OutputPathType
    """File containing the corrected image series"""
    bias_image_file: OutputPathType | None
    """File containing the estimated bias field"""


def dwibiascorrect_params(
    algorithm: str,
    input_image: InputPathType,
    output_image: str,
    grad: InputPathType | None = None,
    fslgrad: DwibiascorrectFslgradParameters | None = None,
    mask_image: InputPathType | None = None,
    bias_image: InputPathType | None = None,
    nocleanup: bool = False,
    scratch_dir: InputPathType | None = None,
    continue_scratch_dir: list[InputPathType] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: float | None = None,
    help_: bool = False,
    version: bool = False,
    ants_b: str | None = None,
    ants_c: str | None = None,
    ants_s: str | None = None,
) -> DwibiascorrectParameters:
    """
    Build parameters.
    
    Args:
        algorithm: Select the algorithm to be used for bias correction. Options\
            are: ants, fsl.
        input_image: The input image series to be corrected.
        output_image: The output corrected image series.
        grad: Provide the diffusion gradient table in MRtrix format.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        mask_image: Manually provide a mask image for bias field estimation.
        bias_image: Output the estimated bias field.
        nocleanup: Do not delete intermediate files during script execution,\
            and do not delete scratch directory at script completion.
        scratch_dir: Manually specify the path in which to generate the scratch\
            directory.
        continue_scratch_dir: Continue the script from a previous execution;\
            must provide the scratch directory path.
        info: Display information messages.
        quiet: Do not display information messages or progress status.
        debug: Display debugging messages.
        force: Force overwrite of output files.
        nthreads: Use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        help_: Display help information and exit.
        version: Display version information and exit.
        ants_b: N4BiasFieldCorrection option -b (initial mesh resolution in mm,\
            spline order).
        ants_c: N4BiasFieldCorrection option -c (number of iterations,\
            convergence threshold).
        ants_s: N4BiasFieldCorrection option -s (shrink-factor applied to\
            spatial dimensions).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "dwibiascorrect",
        "algorithm": algorithm,
        "input_image": input_image,
        "output_image": output_image,
        "nocleanup": nocleanup,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
    }
    if grad is not None:
        params["grad"] = grad
    if fslgrad is not None:
        params["fslgrad"] = fslgrad
    if mask_image is not None:
        params["mask_image"] = mask_image
    if bias_image is not None:
        params["bias_image"] = bias_image
    if scratch_dir is not None:
        params["scratch_dir"] = scratch_dir
    if continue_scratch_dir is not None:
        params["continue_scratch_dir"] = continue_scratch_dir
    if nthreads is not None:
        params["nthreads"] = nthreads
    if ants_b is not None:
        params["ants_b"] = ants_b
    if ants_c is not None:
        params["ants_c"] = ants_c
    if ants_s is not None:
        params["ants_s"] = ants_s
    return params


def dwibiascorrect_cargs(
    params: DwibiascorrectParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dwibiascorrect")
    cargs.append(params.get("algorithm"))
    cargs.append(execution.input_file(params.get("input_image")))
    cargs.append(params.get("output_image"))
    if params.get("grad") is not None:
        cargs.extend([
            "-grad",
            execution.input_file(params.get("grad"))
        ])
    if params.get("fslgrad") is not None:
        cargs.extend(dyn_cargs(params.get("fslgrad")["__STYXTYPE__"])(params.get("fslgrad"), execution))
    if params.get("mask_image") is not None:
        cargs.extend([
            "-mask",
            execution.input_file(params.get("mask_image"))
        ])
    if params.get("bias_image") is not None:
        cargs.extend([
            "-bias",
            execution.input_file(params.get("bias_image"))
        ])
    if params.get("nocleanup"):
        cargs.append("-nocleanup")
    if params.get("scratch_dir") is not None:
        cargs.extend([
            "-scratch",
            execution.input_file(params.get("scratch_dir"))
        ])
    if params.get("continue_scratch_dir") is not None:
        cargs.extend([
            "-continue",
            *[execution.input_file(f) for f in params.get("continue_scratch_dir")]
        ])
    if params.get("info"):
        cargs.append("-info")
    if params.get("quiet"):
        cargs.append("-quiet")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("force"):
        cargs.append("-force")
    if params.get("nthreads") is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads"))
        ])
    cargs.append("[CONFIG]")
    if params.get("help"):
        cargs.append("-help")
    if params.get("version"):
        cargs.append("-version")
    if params.get("ants_b") is not None:
        cargs.extend([
            "-ants.b",
            params.get("ants_b")
        ])
    if params.get("ants_c") is not None:
        cargs.extend([
            "-ants.c",
            params.get("ants_c")
        ])
    if params.get("ants_s") is not None:
        cargs.extend([
            "-ants.s",
            params.get("ants_s")
        ])
    return cargs


def dwibiascorrect_outputs(
    params: DwibiascorrectParameters,
    execution: Execution,
) -> DwibiascorrectOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DwibiascorrectOutputs(
        root=execution.output_file("."),
        output_image_file=execution.output_file(params.get("output_image")),
        bias_image_file=execution.output_file(pathlib.Path(params.get("bias_image")).name) if (params.get("bias_image") is not None) else None,
    )
    return ret


def dwibiascorrect_execute(
    params: DwibiascorrectParameters,
    execution: Execution,
) -> DwibiascorrectOutputs:
    """
    Perform B1 field inhomogeneity correction for a DWI volume series using either
    ANTs or FSL.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `DwibiascorrectOutputs`).
    """
    params = execution.params(params)
    cargs = dwibiascorrect_cargs(params, execution)
    ret = dwibiascorrect_outputs(params, execution)
    execution.run(cargs)
    return ret


def dwibiascorrect(
    algorithm: str,
    input_image: InputPathType,
    output_image: str,
    grad: InputPathType | None = None,
    fslgrad: DwibiascorrectFslgradParameters | None = None,
    mask_image: InputPathType | None = None,
    bias_image: InputPathType | None = None,
    nocleanup: bool = False,
    scratch_dir: InputPathType | None = None,
    continue_scratch_dir: list[InputPathType] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: float | None = None,
    help_: bool = False,
    version: bool = False,
    ants_b: str | None = None,
    ants_c: str | None = None,
    ants_s: str | None = None,
    runner: Runner | None = None,
) -> DwibiascorrectOutputs:
    """
    Perform B1 field inhomogeneity correction for a DWI volume series using either
    ANTs or FSL.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        algorithm: Select the algorithm to be used for bias correction. Options\
            are: ants, fsl.
        input_image: The input image series to be corrected.
        output_image: The output corrected image series.
        grad: Provide the diffusion gradient table in MRtrix format.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        mask_image: Manually provide a mask image for bias field estimation.
        bias_image: Output the estimated bias field.
        nocleanup: Do not delete intermediate files during script execution,\
            and do not delete scratch directory at script completion.
        scratch_dir: Manually specify the path in which to generate the scratch\
            directory.
        continue_scratch_dir: Continue the script from a previous execution;\
            must provide the scratch directory path.
        info: Display information messages.
        quiet: Do not display information messages or progress status.
        debug: Display debugging messages.
        force: Force overwrite of output files.
        nthreads: Use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        help_: Display help information and exit.
        version: Display version information and exit.
        ants_b: N4BiasFieldCorrection option -b (initial mesh resolution in mm,\
            spline order).
        ants_c: N4BiasFieldCorrection option -c (number of iterations,\
            convergence threshold).
        ants_s: N4BiasFieldCorrection option -s (shrink-factor applied to\
            spatial dimensions).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DwibiascorrectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DWIBIASCORRECT_METADATA)
    params = dwibiascorrect_params(
        algorithm=algorithm,
        input_image=input_image,
        output_image=output_image,
        grad=grad,
        fslgrad=fslgrad,
        mask_image=mask_image,
        bias_image=bias_image,
        nocleanup=nocleanup,
        scratch_dir=scratch_dir,
        continue_scratch_dir=continue_scratch_dir,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        help_=help_,
        version=version,
        ants_b=ants_b,
        ants_c=ants_c,
        ants_s=ants_s,
    )
    return dwibiascorrect_execute(params, execution)


__all__ = [
    "DWIBIASCORRECT_METADATA",
    "DwibiascorrectFslgradParameters",
    "DwibiascorrectOutputs",
    "DwibiascorrectParameters",
    "dwibiascorrect",
    "dwibiascorrect_fslgrad_params",
    "dwibiascorrect_params",
]
