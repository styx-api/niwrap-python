# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

AMP2SH_METADATA = Metadata(
    id="739c6dd01d401b453eb41eade05065e6c9fd17b3.boutiques",
    name="amp2sh",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


Amp2shFslgradParameters = typing.TypedDict('Amp2shFslgradParameters', {
    "__STYX_TYPE__": typing.Literal["fslgrad"],
    "bvecs": InputPathType,
    "bvals": InputPathType,
})


Amp2shVariousStringParameters = typing.TypedDict('Amp2shVariousStringParameters', {
    "__STYX_TYPE__": typing.Literal["VariousString"],
    "obj": str,
})


Amp2shVariousFileParameters = typing.TypedDict('Amp2shVariousFileParameters', {
    "__STYX_TYPE__": typing.Literal["VariousFile"],
    "obj": InputPathType,
})


Amp2shConfigParameters = typing.TypedDict('Amp2shConfigParameters', {
    "__STYX_TYPE__": typing.Literal["config"],
    "key": str,
    "value": str,
})


Amp2shParameters = typing.TypedDict('Amp2shParameters', {
    "__STYX_TYPE__": typing.Literal["amp2sh"],
    "lmax": typing.NotRequired[int | None],
    "normalise": bool,
    "directions": typing.NotRequired[InputPathType | None],
    "rician": typing.NotRequired[InputPathType | None],
    "grad": typing.NotRequired[InputPathType | None],
    "fslgrad": typing.NotRequired[Amp2shFslgradParameters | None],
    "shells": typing.NotRequired[list[float] | None],
    "strides": typing.NotRequired[typing.Union[Amp2shVariousStringParameters, Amp2shVariousFileParameters] | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[Amp2shConfigParameters] | None],
    "help": bool,
    "version": bool,
    "amp": InputPathType,
    "SH": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "amp2sh": amp2sh_cargs,
        "fslgrad": amp2sh_fslgrad_cargs,
        "VariousString": amp2sh_various_string_cargs,
        "VariousFile": amp2sh_various_file_cargs,
        "config": amp2sh_config_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "amp2sh": amp2sh_outputs,
    }.get(t)


def amp2sh_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
) -> Amp2shFslgradParameters:
    """
    Build parameters.
    
    Args:
        bvecs: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        bvals: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "fslgrad",
        "bvecs": bvecs,
        "bvals": bvals,
    }
    return params


def amp2sh_fslgrad_cargs(
    params: Amp2shFslgradParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-fslgrad")
    cargs.append(execution.input_file(params.get("bvecs")))
    cargs.append(execution.input_file(params.get("bvals")))
    return cargs


def amp2sh_various_string_params(
    obj: str,
) -> Amp2shVariousStringParameters:
    """
    Build parameters.
    
    Args:
        obj: String object.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "VariousString",
        "obj": obj,
    }
    return params


def amp2sh_various_string_cargs(
    params: Amp2shVariousStringParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(params.get("obj"))
    return cargs


def amp2sh_various_file_params(
    obj: InputPathType,
) -> Amp2shVariousFileParameters:
    """
    Build parameters.
    
    Args:
        obj: File object.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "VariousFile",
        "obj": obj,
    }
    return params


def amp2sh_various_file_cargs(
    params: Amp2shVariousFileParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(execution.input_file(params.get("obj")))
    return cargs


def amp2sh_config_params(
    key: str,
    value: str,
) -> Amp2shConfigParameters:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "config",
        "key": key,
        "value": value,
    }
    return params


def amp2sh_config_cargs(
    params: Amp2shConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key"))
    cargs.append(params.get("value"))
    return cargs


class Amp2shOutputs(typing.NamedTuple):
    """
    Output object returned when calling `amp2sh(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    sh: OutputPathType
    """the output spherical harmonics coefficients image."""


def amp2sh_params(
    amp: InputPathType,
    sh: str,
    lmax: int | None = None,
    normalise: bool = False,
    directions: InputPathType | None = None,
    rician: InputPathType | None = None,
    grad: InputPathType | None = None,
    fslgrad: Amp2shFslgradParameters | None = None,
    shells: list[float] | None = None,
    strides: typing.Union[Amp2shVariousStringParameters, Amp2shVariousFileParameters] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Amp2shConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> Amp2shParameters:
    """
    Build parameters.
    
    Args:
        amp: the input amplitude image.
        sh: the output spherical harmonics coefficients image.
        lmax: set the maximum harmonic order for the output series. By default,\
            the program will use the highest possible lmax given the number of\
            diffusion-weighted images, up to a maximum of 8.
        normalise: normalise the DW signal to the b=0 image.
        directions: the directions corresponding to the input amplitude image\
            used to sample AFD. By default this option is not required providing\
            the direction set is supplied in the amplitude image. This should be\
            supplied as a list of directions [az el], as generated using the dirgen\
            command, or as a list of [ x y z ] Cartesian coordinates.
        rician: correct for Rician noise induced bias, using noise map supplied.
        grad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in a text file. This should be supplied as a 4xN text file\
            with each line is in the format [ X Y Z b ], where [ X Y Z ] describe\
            the direction of the applied gradient, and b gives the b-value in units\
            of s/mm^2. If a diffusion gradient scheme is present in the input image\
            header, the data provided with this option will be instead used.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        shells: specify one or more b-values to use during processing, as a\
            comma-separated list of the desired approximate b-values (b-values are\
            clustered to allow for small deviations). Note that some commands are\
            incompatible with multiple b-values, and will report an error if more\
            than one b-value is provided.\
            WARNING: note that, even though the b=0 volumes are never referred\
            to as shells in the literature, they still have to be explicitly\
            included in the list of b-values as provided to the -shell option!\
            Several algorithms which include the b=0 volumes in their\
            computations may otherwise return an undesired result.
        strides: specify the strides of the output data in memory; either as a\
            comma-separated list of (signed) integers, or as a template image from\
            which the strides shall be extracted and used. The actual strides\
            produced will depend on whether the output image format can support it.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "amp2sh",
        "normalise": normalise,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "amp": amp,
        "SH": sh,
    }
    if lmax is not None:
        params["lmax"] = lmax
    if directions is not None:
        params["directions"] = directions
    if rician is not None:
        params["rician"] = rician
    if grad is not None:
        params["grad"] = grad
    if fslgrad is not None:
        params["fslgrad"] = fslgrad
    if shells is not None:
        params["shells"] = shells
    if strides is not None:
        params["strides"] = strides
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def amp2sh_cargs(
    params: Amp2shParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("amp2sh")
    if params.get("lmax") is not None:
        cargs.extend([
            "-lmax",
            str(params.get("lmax"))
        ])
    if params.get("normalise"):
        cargs.append("-normalise")
    if params.get("directions") is not None:
        cargs.extend([
            "-directions",
            execution.input_file(params.get("directions"))
        ])
    if params.get("rician") is not None:
        cargs.extend([
            "-rician",
            execution.input_file(params.get("rician"))
        ])
    if params.get("grad") is not None:
        cargs.extend([
            "-grad",
            execution.input_file(params.get("grad"))
        ])
    if params.get("fslgrad") is not None:
        cargs.extend(dyn_cargs(params.get("fslgrad")["__STYXTYPE__"])(params.get("fslgrad"), execution))
    if params.get("shells") is not None:
        cargs.extend([
            "-shells",
            ",".join(map(str, params.get("shells")))
        ])
    if params.get("strides") is not None:
        cargs.extend([
            "-strides",
            *dyn_cargs(params.get("strides")["__STYXTYPE__"])(params.get("strides"), execution)
        ])
    if params.get("info"):
        cargs.append("-info")
    if params.get("quiet"):
        cargs.append("-quiet")
    if params.get("debug"):
        cargs.append("-debug")
    if params.get("force"):
        cargs.append("-force")
    if params.get("nthreads") is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads"))
        ])
    if params.get("config") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("config")] for a in c])
    if params.get("help"):
        cargs.append("-help")
    if params.get("version"):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("amp")))
    cargs.append(params.get("SH"))
    return cargs


def amp2sh_outputs(
    params: Amp2shParameters,
    execution: Execution,
) -> Amp2shOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Amp2shOutputs(
        root=execution.output_file("."),
        sh=execution.output_file(params.get("SH")),
    )
    return ret


def amp2sh_execute(
    params: Amp2shParameters,
    execution: Execution,
) -> Amp2shOutputs:
    """
    Convert a set of amplitudes (defined along a set of corresponding directions) to
    their spherical harmonic representation.
    
    The spherical harmonic decomposition is calculated by least-squares linear
    fitting to the amplitude data.
    
    The directions can be defined either as a DW gradient scheme (for example to
    compute the SH representation of the DW signal), a set of [az el] pairs as
    output by the dirgen command, or a set of [ x y z ] directions in Cartesian
    coordinates. The DW gradient scheme or direction set can be supplied within
    the input image header or using the -gradient or -directions option. Note
    that if a direction set and DW gradient scheme can be found, the direction
    set will be used by default.
    
    The spherical harmonic coefficients are stored according the conventions
    described the main documentation, which can be found at the following link:
    https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `Amp2shOutputs`).
    """
    params = execution.params(params)
    cargs = amp2sh_cargs(params, execution)
    ret = amp2sh_outputs(params, execution)
    execution.run(cargs)
    return ret


def amp2sh(
    amp: InputPathType,
    sh: str,
    lmax: int | None = None,
    normalise: bool = False,
    directions: InputPathType | None = None,
    rician: InputPathType | None = None,
    grad: InputPathType | None = None,
    fslgrad: Amp2shFslgradParameters | None = None,
    shells: list[float] | None = None,
    strides: typing.Union[Amp2shVariousStringParameters, Amp2shVariousFileParameters] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Amp2shConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> Amp2shOutputs:
    """
    Convert a set of amplitudes (defined along a set of corresponding directions) to
    their spherical harmonic representation.
    
    The spherical harmonic decomposition is calculated by least-squares linear
    fitting to the amplitude data.
    
    The directions can be defined either as a DW gradient scheme (for example to
    compute the SH representation of the DW signal), a set of [az el] pairs as
    output by the dirgen command, or a set of [ x y z ] directions in Cartesian
    coordinates. The DW gradient scheme or direction set can be supplied within
    the input image header or using the -gradient or -directions option. Note
    that if a direction set and DW gradient scheme can be found, the direction
    set will be used by default.
    
    The spherical harmonic coefficients are stored according the conventions
    described the main documentation, which can be found at the following link:
    https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        amp: the input amplitude image.
        sh: the output spherical harmonics coefficients image.
        lmax: set the maximum harmonic order for the output series. By default,\
            the program will use the highest possible lmax given the number of\
            diffusion-weighted images, up to a maximum of 8.
        normalise: normalise the DW signal to the b=0 image.
        directions: the directions corresponding to the input amplitude image\
            used to sample AFD. By default this option is not required providing\
            the direction set is supplied in the amplitude image. This should be\
            supplied as a list of directions [az el], as generated using the dirgen\
            command, or as a list of [ x y z ] Cartesian coordinates.
        rician: correct for Rician noise induced bias, using noise map supplied.
        grad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in a text file. This should be supplied as a 4xN text file\
            with each line is in the format [ X Y Z b ], where [ X Y Z ] describe\
            the direction of the applied gradient, and b gives the b-value in units\
            of s/mm^2. If a diffusion gradient scheme is present in the input image\
            header, the data provided with this option will be instead used.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        shells: specify one or more b-values to use during processing, as a\
            comma-separated list of the desired approximate b-values (b-values are\
            clustered to allow for small deviations). Note that some commands are\
            incompatible with multiple b-values, and will report an error if more\
            than one b-value is provided.\
            WARNING: note that, even though the b=0 volumes are never referred\
            to as shells in the literature, they still have to be explicitly\
            included in the list of b-values as provided to the -shell option!\
            Several algorithms which include the b=0 volumes in their\
            computations may otherwise return an undesired result.
        strides: specify the strides of the output data in memory; either as a\
            comma-separated list of (signed) integers, or as a template image from\
            which the strides shall be extracted and used. The actual strides\
            produced will depend on whether the output image format can support it.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Amp2shOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(AMP2SH_METADATA)
    params = amp2sh_params(
        lmax=lmax,
        normalise=normalise,
        directions=directions,
        rician=rician,
        grad=grad,
        fslgrad=fslgrad,
        shells=shells,
        strides=strides,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        amp=amp,
        sh=sh,
    )
    return amp2sh_execute(params, execution)


__all__ = [
    "AMP2SH_METADATA",
    "Amp2shConfigParameters",
    "Amp2shFslgradParameters",
    "Amp2shOutputs",
    "Amp2shParameters",
    "Amp2shVariousFileParameters",
    "Amp2shVariousStringParameters",
    "amp2sh",
    "amp2sh_config_params",
    "amp2sh_fslgrad_params",
    "amp2sh_params",
    "amp2sh_various_file_params",
    "amp2sh_various_string_params",
]
