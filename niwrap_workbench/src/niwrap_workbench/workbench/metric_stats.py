# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

METRIC_STATS_METADATA = Metadata(
    id="e15cdb7b60009fbe73fad4a0b5c73e57afe90954.boutiques",
    name="metric-stats",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


MetricStatsRoiParameters = typing.TypedDict('MetricStatsRoiParameters', {
    "__STYX_TYPE__": typing.Literal["roi"],
    "roi_metric": InputPathType,
    "opt_match_maps": bool,
})


MetricStatsParameters = typing.TypedDict('MetricStatsParameters', {
    "__STYX_TYPE__": typing.Literal["metric-stats"],
    "metric_in": InputPathType,
    "opt_reduce_operation": typing.NotRequired[str | None],
    "opt_percentile_percent": typing.NotRequired[float | None],
    "opt_column_column": typing.NotRequired[str | None],
    "roi": typing.NotRequired[MetricStatsRoiParameters | None],
    "opt_show_map_name": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "metric-stats": metric_stats_cargs,
        "roi": metric_stats_roi_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


def metric_stats_roi_params(
    roi_metric: InputPathType,
    opt_match_maps: bool = False,
) -> MetricStatsRoiParameters:
    """
    Build parameters.
    
    Args:
        roi_metric: the roi, as a metric file.
        opt_match_maps: each column of input uses the corresponding column from\
            the roi file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "roi",
        "roi_metric": roi_metric,
        "opt_match_maps": opt_match_maps,
    }
    return params


def metric_stats_roi_cargs(
    params: MetricStatsRoiParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-roi")
    cargs.append(execution.input_file(params.get("roi_metric")))
    if params.get("opt_match_maps"):
        cargs.append("-match-maps")
    return cargs


class MetricStatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_stats(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def metric_stats_params(
    metric_in: InputPathType,
    opt_reduce_operation: str | None = None,
    opt_percentile_percent: float | None = None,
    opt_column_column: str | None = None,
    roi: MetricStatsRoiParameters | None = None,
    opt_show_map_name: bool = False,
) -> MetricStatsParameters:
    """
    Build parameters.
    
    Args:
        metric_in: the input metric.
        opt_reduce_operation: use a reduction operation: the reduction\
            operation.
        opt_percentile_percent: give the value at a percentile: the percentile\
            to find, must be between 0 and 100.
        opt_column_column: only display output for one column: the column\
            number or name.
        roi: only consider data inside an roi.
        opt_show_map_name: print map index and name before each output.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "metric-stats",
        "metric_in": metric_in,
        "opt_show_map_name": opt_show_map_name,
    }
    if opt_reduce_operation is not None:
        params["opt_reduce_operation"] = opt_reduce_operation
    if opt_percentile_percent is not None:
        params["opt_percentile_percent"] = opt_percentile_percent
    if opt_column_column is not None:
        params["opt_column_column"] = opt_column_column
    if roi is not None:
        params["roi"] = roi
    return params


def metric_stats_cargs(
    params: MetricStatsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-stats")
    cargs.append(execution.input_file(params.get("metric_in")))
    if params.get("opt_reduce_operation") is not None:
        cargs.extend([
            "-reduce",
            params.get("opt_reduce_operation")
        ])
    if params.get("opt_percentile_percent") is not None:
        cargs.extend([
            "-percentile",
            str(params.get("opt_percentile_percent"))
        ])
    if params.get("opt_column_column") is not None:
        cargs.extend([
            "-column",
            params.get("opt_column_column")
        ])
    if params.get("roi") is not None:
        cargs.extend(dyn_cargs(params.get("roi")["__STYXTYPE__"])(params.get("roi"), execution))
    if params.get("opt_show_map_name"):
        cargs.append("-show-map-name")
    return cargs


def metric_stats_outputs(
    params: MetricStatsParameters,
    execution: Execution,
) -> MetricStatsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MetricStatsOutputs(
        root=execution.output_file("."),
    )
    return ret


def metric_stats_execute(
    params: MetricStatsParameters,
    execution: Execution,
) -> MetricStatsOutputs:
    """
    Spatial statistics on a metric file.
    
    For each column of the input, a line of text is printed, resulting from the
    specified reduction or percentile operation. Use -column to only give output
    for a single column. If the -roi option is used without -match-maps, then
    each line will contain as many numbers as there are maps in the ROI file,
    separated by tab characters. Exactly one of -reduce or -percentile must be
    specified.
    
    The argument to the -reduce option must be one of the following:
    
    MAX: the maximum value
    MIN: the minimum value
    INDEXMAX: the 1-based index of the maximum value
    INDEXMIN: the 1-based index of the minimum value
    SUM: add all values
    PRODUCT: multiply all values
    MEAN: the mean of the data
    STDEV: the standard deviation (N denominator)
    SAMPSTDEV: the sample standard deviation (N-1 denominator)
    VARIANCE: the variance of the data
    TSNR: mean divided by sample standard deviation (N-1 denominator)
    COV: sample standard deviation (N-1 denominator) divided by mean
    L2NORM: square root of sum of squares
    MEDIAN: the median of the data
    MODE: the mode of the data
    COUNT_NONZERO: the number of nonzero elements in the data
    .
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MetricStatsOutputs`).
    """
    params = execution.params(params)
    cargs = metric_stats_cargs(params, execution)
    ret = metric_stats_outputs(params, execution)
    execution.run(cargs)
    return ret


def metric_stats(
    metric_in: InputPathType,
    opt_reduce_operation: str | None = None,
    opt_percentile_percent: float | None = None,
    opt_column_column: str | None = None,
    roi: MetricStatsRoiParameters | None = None,
    opt_show_map_name: bool = False,
    runner: Runner | None = None,
) -> MetricStatsOutputs:
    """
    Spatial statistics on a metric file.
    
    For each column of the input, a line of text is printed, resulting from the
    specified reduction or percentile operation. Use -column to only give output
    for a single column. If the -roi option is used without -match-maps, then
    each line will contain as many numbers as there are maps in the ROI file,
    separated by tab characters. Exactly one of -reduce or -percentile must be
    specified.
    
    The argument to the -reduce option must be one of the following:
    
    MAX: the maximum value
    MIN: the minimum value
    INDEXMAX: the 1-based index of the maximum value
    INDEXMIN: the 1-based index of the minimum value
    SUM: add all values
    PRODUCT: multiply all values
    MEAN: the mean of the data
    STDEV: the standard deviation (N denominator)
    SAMPSTDEV: the sample standard deviation (N-1 denominator)
    VARIANCE: the variance of the data
    TSNR: mean divided by sample standard deviation (N-1 denominator)
    COV: sample standard deviation (N-1 denominator) divided by mean
    L2NORM: square root of sum of squares
    MEDIAN: the median of the data
    MODE: the mode of the data
    COUNT_NONZERO: the number of nonzero elements in the data
    .
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        metric_in: the input metric.
        opt_reduce_operation: use a reduction operation: the reduction\
            operation.
        opt_percentile_percent: give the value at a percentile: the percentile\
            to find, must be between 0 and 100.
        opt_column_column: only display output for one column: the column\
            number or name.
        roi: only consider data inside an roi.
        opt_show_map_name: print map index and name before each output.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MetricStatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(METRIC_STATS_METADATA)
    params = metric_stats_params(
        metric_in=metric_in,
        opt_reduce_operation=opt_reduce_operation,
        opt_percentile_percent=opt_percentile_percent,
        opt_column_column=opt_column_column,
        roi=roi,
        opt_show_map_name=opt_show_map_name,
    )
    return metric_stats_execute(params, execution)


__all__ = [
    "METRIC_STATS_METADATA",
    "MetricStatsOutputs",
    "MetricStatsParameters",
    "MetricStatsRoiParameters",
    "metric_stats",
    "metric_stats_params",
    "metric_stats_roi_params",
]
