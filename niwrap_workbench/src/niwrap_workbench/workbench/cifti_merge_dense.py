# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CIFTI_MERGE_DENSE_METADATA = Metadata(
    id="2b529b481948ff4d144d88708d6355df8dbdf307.boutiques",
    name="cifti-merge-dense",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


CiftiMergeDenseCiftiParameters = typing.TypedDict('CiftiMergeDenseCiftiParameters', {
    "__STYX_TYPE__": typing.Literal["cifti"],
    "cifti_in": InputPathType,
})


CiftiMergeDenseParameters = typing.TypedDict('CiftiMergeDenseParameters', {
    "__STYX_TYPE__": typing.Literal["cifti-merge-dense"],
    "direction": str,
    "cifti_out": str,
    "opt_label_collision_action": typing.NotRequired[str | None],
    "cifti": typing.NotRequired[list[CiftiMergeDenseCiftiParameters] | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "cifti-merge-dense": cifti_merge_dense_cargs,
        "cifti": cifti_merge_dense_cifti_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "cifti-merge-dense": cifti_merge_dense_outputs,
    }.get(t)


def cifti_merge_dense_cifti_params(
    cifti_in: InputPathType,
) -> CiftiMergeDenseCiftiParameters:
    """
    Build parameters.
    
    Args:
        cifti_in: a cifti file to merge.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "cifti",
        "cifti_in": cifti_in,
    }
    return params


def cifti_merge_dense_cifti_cargs(
    params: CiftiMergeDenseCiftiParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-cifti")
    cargs.append(execution.input_file(params.get("cifti_in")))
    return cargs


class CiftiMergeDenseOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_merge_dense(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    cifti_out: OutputPathType
    """the output cifti file"""


def cifti_merge_dense_params(
    direction: str,
    cifti_out: str,
    opt_label_collision_action: str | None = None,
    cifti: list[CiftiMergeDenseCiftiParameters] | None = None,
) -> CiftiMergeDenseParameters:
    """
    Build parameters.
    
    Args:
        direction: which dimension to merge along, ROW or COLUMN.
        cifti_out: the output cifti file.
        opt_label_collision_action: how to handle conflicts between label keys:\
            'ERROR', 'FIRST', or 'LEGACY', default 'ERROR', use 'LEGACY' to match\
            v1.4.2 and earlier.
        cifti: specify an input cifti file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "cifti-merge-dense",
        "direction": direction,
        "cifti_out": cifti_out,
    }
    if opt_label_collision_action is not None:
        params["opt_label_collision_action"] = opt_label_collision_action
    if cifti is not None:
        params["cifti"] = cifti
    return params


def cifti_merge_dense_cargs(
    params: CiftiMergeDenseParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-merge-dense")
    cargs.append(params.get("direction"))
    cargs.append(params.get("cifti_out"))
    if params.get("opt_label_collision_action") is not None:
        cargs.extend([
            "-label-collision",
            params.get("opt_label_collision_action")
        ])
    if params.get("cifti") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("cifti")] for a in c])
    return cargs


def cifti_merge_dense_outputs(
    params: CiftiMergeDenseParameters,
    execution: Execution,
) -> CiftiMergeDenseOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CiftiMergeDenseOutputs(
        root=execution.output_file("."),
        cifti_out=execution.output_file(params.get("cifti_out")),
    )
    return ret


def cifti_merge_dense_execute(
    params: CiftiMergeDenseParameters,
    execution: Execution,
) -> CiftiMergeDenseOutputs:
    """
    Merge cifti files along dense dimension.
    
    The input cifti files must have matching mappings along the direction not
    specified, and the mapping along the specified direction must be brain
    models.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `CiftiMergeDenseOutputs`).
    """
    params = execution.params(params)
    cargs = cifti_merge_dense_cargs(params, execution)
    ret = cifti_merge_dense_outputs(params, execution)
    execution.run(cargs)
    return ret


def cifti_merge_dense(
    direction: str,
    cifti_out: str,
    opt_label_collision_action: str | None = None,
    cifti: list[CiftiMergeDenseCiftiParameters] | None = None,
    runner: Runner | None = None,
) -> CiftiMergeDenseOutputs:
    """
    Merge cifti files along dense dimension.
    
    The input cifti files must have matching mappings along the direction not
    specified, and the mapping along the specified direction must be brain
    models.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        direction: which dimension to merge along, ROW or COLUMN.
        cifti_out: the output cifti file.
        opt_label_collision_action: how to handle conflicts between label keys:\
            'ERROR', 'FIRST', or 'LEGACY', default 'ERROR', use 'LEGACY' to match\
            v1.4.2 and earlier.
        cifti: specify an input cifti file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CiftiMergeDenseOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_MERGE_DENSE_METADATA)
    params = cifti_merge_dense_params(
        direction=direction,
        cifti_out=cifti_out,
        opt_label_collision_action=opt_label_collision_action,
        cifti=cifti,
    )
    return cifti_merge_dense_execute(params, execution)


__all__ = [
    "CIFTI_MERGE_DENSE_METADATA",
    "CiftiMergeDenseCiftiParameters",
    "CiftiMergeDenseOutputs",
    "CiftiMergeDenseParameters",
    "cifti_merge_dense",
    "cifti_merge_dense_cifti_params",
    "cifti_merge_dense_params",
]
