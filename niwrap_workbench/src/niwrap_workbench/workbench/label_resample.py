# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LABEL_RESAMPLE_METADATA = Metadata(
    id="695b221832d5527bc6d781edaf957f7b83318aa6.boutiques",
    name="label-resample",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


LabelResampleAreaSurfsParameters = typing.TypedDict('LabelResampleAreaSurfsParameters', {
    "__STYX_TYPE__": typing.Literal["area_surfs"],
    "current_area": InputPathType,
    "new_area": InputPathType,
})


LabelResampleAreaMetricsParameters = typing.TypedDict('LabelResampleAreaMetricsParameters', {
    "__STYX_TYPE__": typing.Literal["area_metrics"],
    "current_area": InputPathType,
    "new_area": InputPathType,
})


LabelResampleParameters = typing.TypedDict('LabelResampleParameters', {
    "__STYX_TYPE__": typing.Literal["label-resample"],
    "label_in": InputPathType,
    "current_sphere": InputPathType,
    "new_sphere": InputPathType,
    "method": str,
    "label_out": str,
    "area_surfs": typing.NotRequired[LabelResampleAreaSurfsParameters | None],
    "area_metrics": typing.NotRequired[LabelResampleAreaMetricsParameters | None],
    "opt_current_roi_roi_metric": typing.NotRequired[InputPathType | None],
    "opt_valid_roi_out_roi_out": typing.NotRequired[str | None],
    "opt_largest": bool,
    "opt_bypass_sphere_check": bool,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "label-resample": label_resample_cargs,
        "area_surfs": label_resample_area_surfs_cargs,
        "area_metrics": label_resample_area_metrics_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "label-resample": label_resample_outputs,
    }.get(t)


def label_resample_area_surfs_params(
    current_area: InputPathType,
    new_area: InputPathType,
) -> LabelResampleAreaSurfsParameters:
    """
    Build parameters.
    
    Args:
        current_area: a relevant anatomical surface with <current-sphere> mesh.
        new_area: a relevant anatomical surface with <new-sphere> mesh.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "area_surfs",
        "current_area": current_area,
        "new_area": new_area,
    }
    return params


def label_resample_area_surfs_cargs(
    params: LabelResampleAreaSurfsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-area-surfs")
    cargs.append(execution.input_file(params.get("current_area")))
    cargs.append(execution.input_file(params.get("new_area")))
    return cargs


def label_resample_area_metrics_params(
    current_area: InputPathType,
    new_area: InputPathType,
) -> LabelResampleAreaMetricsParameters:
    """
    Build parameters.
    
    Args:
        current_area: a metric file with vertex areas for <current-sphere> mesh.
        new_area: a metric file with vertex areas for <new-sphere> mesh.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "area_metrics",
        "current_area": current_area,
        "new_area": new_area,
    }
    return params


def label_resample_area_metrics_cargs(
    params: LabelResampleAreaMetricsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-area-metrics")
    cargs.append(execution.input_file(params.get("current_area")))
    cargs.append(execution.input_file(params.get("new_area")))
    return cargs


class LabelResampleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `label_resample(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    label_out: OutputPathType
    """the output label file"""
    opt_valid_roi_out_roi_out: OutputPathType | None
    """output the ROI of vertices that got data from valid source vertices: the
    output roi as a metric"""


def label_resample_params(
    label_in: InputPathType,
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    method: str,
    label_out: str,
    area_surfs: LabelResampleAreaSurfsParameters | None = None,
    area_metrics: LabelResampleAreaMetricsParameters | None = None,
    opt_current_roi_roi_metric: InputPathType | None = None,
    opt_valid_roi_out_roi_out: str | None = None,
    opt_largest: bool = False,
    opt_bypass_sphere_check: bool = False,
) -> LabelResampleParameters:
    """
    Build parameters.
    
    Args:
        label_in: the label file to resample.
        current_sphere: a sphere surface with the mesh that the label file is\
            currently on.
        new_sphere: a sphere surface that is in register with <current-sphere>\
            and has the desired output mesh.
        method: the method name.
        label_out: the output label file.
        area_surfs: specify surfaces to do vertex area correction based on.
        area_metrics: specify vertex area metrics to do area correction based\
            on.
        opt_current_roi_roi_metric: use an input roi on the current mesh to\
            exclude non-data vertices: the roi, as a metric file.
        opt_valid_roi_out_roi_out: output the ROI of vertices that got data\
            from valid source vertices: the output roi as a metric.
        opt_largest: use only the label of the vertex with the largest weight.
        opt_bypass_sphere_check: ADVANCED: allow the current and new 'spheres'\
            to have arbitrary shape as long as they follow the same contour.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "label-resample",
        "label_in": label_in,
        "current_sphere": current_sphere,
        "new_sphere": new_sphere,
        "method": method,
        "label_out": label_out,
        "opt_largest": opt_largest,
        "opt_bypass_sphere_check": opt_bypass_sphere_check,
    }
    if area_surfs is not None:
        params["area_surfs"] = area_surfs
    if area_metrics is not None:
        params["area_metrics"] = area_metrics
    if opt_current_roi_roi_metric is not None:
        params["opt_current_roi_roi_metric"] = opt_current_roi_roi_metric
    if opt_valid_roi_out_roi_out is not None:
        params["opt_valid_roi_out_roi_out"] = opt_valid_roi_out_roi_out
    return params


def label_resample_cargs(
    params: LabelResampleParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-label-resample")
    cargs.append(execution.input_file(params.get("label_in")))
    cargs.append(execution.input_file(params.get("current_sphere")))
    cargs.append(execution.input_file(params.get("new_sphere")))
    cargs.append(params.get("method"))
    cargs.append(params.get("label_out"))
    if params.get("area_surfs") is not None:
        cargs.extend(dyn_cargs(params.get("area_surfs")["__STYXTYPE__"])(params.get("area_surfs"), execution))
    if params.get("area_metrics") is not None:
        cargs.extend(dyn_cargs(params.get("area_metrics")["__STYXTYPE__"])(params.get("area_metrics"), execution))
    if params.get("opt_current_roi_roi_metric") is not None:
        cargs.extend([
            "-current-roi",
            execution.input_file(params.get("opt_current_roi_roi_metric"))
        ])
    if params.get("opt_valid_roi_out_roi_out") is not None:
        cargs.extend([
            "-valid-roi-out",
            params.get("opt_valid_roi_out_roi_out")
        ])
    if params.get("opt_largest"):
        cargs.append("-largest")
    if params.get("opt_bypass_sphere_check"):
        cargs.append("-bypass-sphere-check")
    return cargs


def label_resample_outputs(
    params: LabelResampleParameters,
    execution: Execution,
) -> LabelResampleOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LabelResampleOutputs(
        root=execution.output_file("."),
        label_out=execution.output_file(params.get("label_out")),
        opt_valid_roi_out_roi_out=execution.output_file(params.get("opt_valid_roi_out_roi_out")) if (params.get("opt_valid_roi_out_roi_out") is not None) else None,
    )
    return ret


def label_resample_execute(
    params: LabelResampleParameters,
    execution: Execution,
) -> LabelResampleOutputs:
    """
    Resample a label file to a different mesh.
    
    Resamples a label file, given two spherical surfaces that are in register.
    If ADAP_BARY_AREA is used, exactly one of -area-surfs or -area-metrics must
    be specified.
    
    The ADAP_BARY_AREA method is recommended for label data, because it should
    be better at resolving vertices that are near multiple labels, or in case of
    downsampling. Midthickness surfaces are recommended for the vertex areas for
    most data.
    
    The -largest option results in nearest vertex behavior when used with
    BARYCENTRIC, as it uses the value of the source vertex that has the largest
    weight.
    
    When -largest is not specified, the vertex weights are summed according to
    which label they correspond to, and the label with the largest sum is used.
    
    The <method> argument must be one of the following:
    
    ADAP_BARY_AREA
    BARYCENTRIC
    .
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `LabelResampleOutputs`).
    """
    params = execution.params(params)
    cargs = label_resample_cargs(params, execution)
    ret = label_resample_outputs(params, execution)
    execution.run(cargs)
    return ret


def label_resample(
    label_in: InputPathType,
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    method: str,
    label_out: str,
    area_surfs: LabelResampleAreaSurfsParameters | None = None,
    area_metrics: LabelResampleAreaMetricsParameters | None = None,
    opt_current_roi_roi_metric: InputPathType | None = None,
    opt_valid_roi_out_roi_out: str | None = None,
    opt_largest: bool = False,
    opt_bypass_sphere_check: bool = False,
    runner: Runner | None = None,
) -> LabelResampleOutputs:
    """
    Resample a label file to a different mesh.
    
    Resamples a label file, given two spherical surfaces that are in register.
    If ADAP_BARY_AREA is used, exactly one of -area-surfs or -area-metrics must
    be specified.
    
    The ADAP_BARY_AREA method is recommended for label data, because it should
    be better at resolving vertices that are near multiple labels, or in case of
    downsampling. Midthickness surfaces are recommended for the vertex areas for
    most data.
    
    The -largest option results in nearest vertex behavior when used with
    BARYCENTRIC, as it uses the value of the source vertex that has the largest
    weight.
    
    When -largest is not specified, the vertex weights are summed according to
    which label they correspond to, and the label with the largest sum is used.
    
    The <method> argument must be one of the following:
    
    ADAP_BARY_AREA
    BARYCENTRIC
    .
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        label_in: the label file to resample.
        current_sphere: a sphere surface with the mesh that the label file is\
            currently on.
        new_sphere: a sphere surface that is in register with <current-sphere>\
            and has the desired output mesh.
        method: the method name.
        label_out: the output label file.
        area_surfs: specify surfaces to do vertex area correction based on.
        area_metrics: specify vertex area metrics to do area correction based\
            on.
        opt_current_roi_roi_metric: use an input roi on the current mesh to\
            exclude non-data vertices: the roi, as a metric file.
        opt_valid_roi_out_roi_out: output the ROI of vertices that got data\
            from valid source vertices: the output roi as a metric.
        opt_largest: use only the label of the vertex with the largest weight.
        opt_bypass_sphere_check: ADVANCED: allow the current and new 'spheres'\
            to have arbitrary shape as long as they follow the same contour.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LabelResampleOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LABEL_RESAMPLE_METADATA)
    params = label_resample_params(
        label_in=label_in,
        current_sphere=current_sphere,
        new_sphere=new_sphere,
        method=method,
        label_out=label_out,
        area_surfs=area_surfs,
        area_metrics=area_metrics,
        opt_current_roi_roi_metric=opt_current_roi_roi_metric,
        opt_valid_roi_out_roi_out=opt_valid_roi_out_roi_out,
        opt_largest=opt_largest,
        opt_bypass_sphere_check=opt_bypass_sphere_check,
    )
    return label_resample_execute(params, execution)


__all__ = [
    "LABEL_RESAMPLE_METADATA",
    "LabelResampleAreaMetricsParameters",
    "LabelResampleAreaSurfsParameters",
    "LabelResampleOutputs",
    "LabelResampleParameters",
    "label_resample",
    "label_resample_area_metrics_params",
    "label_resample_area_surfs_params",
    "label_resample_params",
]
