# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

METRIC_VECTOR_TOWARD_ROI_METADATA = Metadata(
    id="82ce3915240934b58fb359f7a47c43413230f75c.boutiques",
    name="metric-vector-toward-roi",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


MetricVectorTowardRoiParameters = typing.TypedDict('MetricVectorTowardRoiParameters', {
    "__STYX_TYPE__": typing.Literal["metric-vector-toward-roi"],
    "surface": InputPathType,
    "target_roi": InputPathType,
    "metric_out": str,
    "opt_roi_roi_metric": typing.NotRequired[InputPathType | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "metric-vector-toward-roi": metric_vector_toward_roi_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "metric-vector-toward-roi": metric_vector_toward_roi_outputs,
    }.get(t)


class MetricVectorTowardRoiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_vector_toward_roi(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    metric_out: OutputPathType
    """the output metric"""


def metric_vector_toward_roi_params(
    surface: InputPathType,
    target_roi: InputPathType,
    metric_out: str,
    opt_roi_roi_metric: InputPathType | None = None,
) -> MetricVectorTowardRoiParameters:
    """
    Build parameters.
    
    Args:
        surface: the surface to compute on.
        target_roi: the roi to find the shortest path to.
        metric_out: the output metric.
        opt_roi_roi_metric: don't compute for vertices outside an roi: the\
            region to compute inside, as a metric.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "metric-vector-toward-roi",
        "surface": surface,
        "target_roi": target_roi,
        "metric_out": metric_out,
    }
    if opt_roi_roi_metric is not None:
        params["opt_roi_roi_metric"] = opt_roi_roi_metric
    return params


def metric_vector_toward_roi_cargs(
    params: MetricVectorTowardRoiParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-vector-toward-roi")
    cargs.append(execution.input_file(params.get("surface")))
    cargs.append(execution.input_file(params.get("target_roi")))
    cargs.append(params.get("metric_out"))
    if params.get("opt_roi_roi_metric") is not None:
        cargs.extend([
            "-roi",
            execution.input_file(params.get("opt_roi_roi_metric"))
        ])
    return cargs


def metric_vector_toward_roi_outputs(
    params: MetricVectorTowardRoiParameters,
    execution: Execution,
) -> MetricVectorTowardRoiOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MetricVectorTowardRoiOutputs(
        root=execution.output_file("."),
        metric_out=execution.output_file(params.get("metric_out")),
    )
    return ret


def metric_vector_toward_roi_execute(
    params: MetricVectorTowardRoiParameters,
    execution: Execution,
) -> MetricVectorTowardRoiOutputs:
    """
    Find if vectors point toward an roi.
    
    At each vertex, compute the vector along the start of the shortest path to
    the ROI.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `MetricVectorTowardRoiOutputs`).
    """
    params = execution.params(params)
    cargs = metric_vector_toward_roi_cargs(params, execution)
    ret = metric_vector_toward_roi_outputs(params, execution)
    execution.run(cargs)
    return ret


def metric_vector_toward_roi(
    surface: InputPathType,
    target_roi: InputPathType,
    metric_out: str,
    opt_roi_roi_metric: InputPathType | None = None,
    runner: Runner | None = None,
) -> MetricVectorTowardRoiOutputs:
    """
    Find if vectors point toward an roi.
    
    At each vertex, compute the vector along the start of the shortest path to
    the ROI.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        surface: the surface to compute on.
        target_roi: the roi to find the shortest path to.
        metric_out: the output metric.
        opt_roi_roi_metric: don't compute for vertices outside an roi: the\
            region to compute inside, as a metric.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MetricVectorTowardRoiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(METRIC_VECTOR_TOWARD_ROI_METADATA)
    params = metric_vector_toward_roi_params(
        surface=surface,
        target_roi=target_roi,
        metric_out=metric_out,
        opt_roi_roi_metric=opt_roi_roi_metric,
    )
    return metric_vector_toward_roi_execute(params, execution)


__all__ = [
    "METRIC_VECTOR_TOWARD_ROI_METADATA",
    "MetricVectorTowardRoiOutputs",
    "MetricVectorTowardRoiParameters",
    "metric_vector_toward_roi",
    "metric_vector_toward_roi_params",
]
