# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SURFACE_INFORMATION_METADATA = Metadata(
    id="757610425a8d086526ce21babe9d148126110db0.boutiques",
    name="surface-information",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


SurfaceInformationParameters = typing.TypedDict('SurfaceInformationParameters', {
    "__STYX_TYPE__": typing.Literal["surface-information"],
    "surface_file": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "surface-information": surface_information_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class SurfaceInformationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surface_information(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def surface_information_params(
    surface_file: InputPathType,
) -> SurfaceInformationParameters:
    """
    Build parameters.
    
    Args:
        surface_file: Surface for which information is displayed.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "surface-information",
        "surface_file": surface_file,
    }
    return params


def surface_information_cargs(
    params: SurfaceInformationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-surface-information")
    cargs.append(execution.input_file(params.get("surface_file")))
    return cargs


def surface_information_outputs(
    params: SurfaceInformationParameters,
    execution: Execution,
) -> SurfaceInformationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SurfaceInformationOutputs(
        root=execution.output_file("."),
    )
    return ret


def surface_information_execute(
    params: SurfaceInformationParameters,
    execution: Execution,
) -> SurfaceInformationOutputs:
    """
    Display information about a surface.
    
    Information about surface is displayed including vertices,
    triangles, bounding box, and spacing.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `SurfaceInformationOutputs`).
    """
    params = execution.params(params)
    cargs = surface_information_cargs(params, execution)
    ret = surface_information_outputs(params, execution)
    execution.run(cargs)
    return ret


def surface_information(
    surface_file: InputPathType,
    runner: Runner | None = None,
) -> SurfaceInformationOutputs:
    """
    Display information about a surface.
    
    Information about surface is displayed including vertices,
    triangles, bounding box, and spacing.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        surface_file: Surface for which information is displayed.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfaceInformationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURFACE_INFORMATION_METADATA)
    params = surface_information_params(
        surface_file=surface_file,
    )
    return surface_information_execute(params, execution)


__all__ = [
    "SURFACE_INFORMATION_METADATA",
    "SurfaceInformationOutputs",
    "SurfaceInformationParameters",
    "surface_information",
    "surface_information_params",
]
