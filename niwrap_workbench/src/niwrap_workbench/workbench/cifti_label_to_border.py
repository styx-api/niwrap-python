# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CIFTI_LABEL_TO_BORDER_METADATA = Metadata(
    id="c9144b25b3b7d9cd115a4ceff34091bcdb41ab28.boutiques",
    name="cifti-label-to-border",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


CiftiLabelToBorderBorderParameters = typing.TypedDict('CiftiLabelToBorderBorderParameters', {
    "__STYX_TYPE__": typing.Literal["border"],
    "surface": InputPathType,
    "border_out": str,
})


CiftiLabelToBorderParameters = typing.TypedDict('CiftiLabelToBorderParameters', {
    "__STYX_TYPE__": typing.Literal["cifti-label-to-border"],
    "cifti_in": InputPathType,
    "opt_placement_fraction": typing.NotRequired[float | None],
    "opt_column_column": typing.NotRequired[str | None],
    "border": typing.NotRequired[list[CiftiLabelToBorderBorderParameters] | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "cifti-label-to-border": cifti_label_to_border_cargs,
        "border": cifti_label_to_border_border_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "cifti-label-to-border": cifti_label_to_border_outputs,
        "border": cifti_label_to_border_border_outputs,
    }.get(t)


class CiftiLabelToBorderBorderOutputs(typing.NamedTuple):
    """
    Output object returned when calling `list[CiftiLabelToBorderBorderParameters] | None(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    border_out: OutputPathType
    """the output border file"""


def cifti_label_to_border_border_params(
    surface: InputPathType,
    border_out: str,
) -> CiftiLabelToBorderBorderParameters:
    """
    Build parameters.
    
    Args:
        surface: the surface to use for neighbor and structure information.
        border_out: the output border file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "border",
        "surface": surface,
        "border_out": border_out,
    }
    return params


def cifti_label_to_border_border_cargs(
    params: CiftiLabelToBorderBorderParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-border")
    cargs.append(execution.input_file(params.get("surface")))
    cargs.append(params.get("border_out"))
    return cargs


def cifti_label_to_border_border_outputs(
    params: CiftiLabelToBorderBorderParameters,
    execution: Execution,
) -> CiftiLabelToBorderBorderOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CiftiLabelToBorderBorderOutputs(
        root=execution.output_file("."),
        border_out=execution.output_file(params.get("border_out")),
    )
    return ret


class CiftiLabelToBorderOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_label_to_border(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    border: list[CiftiLabelToBorderBorderOutputs] | None
    """Outputs from `cifti_label_to_border_border_outputs`.This is a list of
    outputs with the same length and order as the inputs."""


def cifti_label_to_border_params(
    cifti_in: InputPathType,
    opt_placement_fraction: float | None = None,
    opt_column_column: str | None = None,
    border: list[CiftiLabelToBorderBorderParameters] | None = None,
) -> CiftiLabelToBorderParameters:
    """
    Build parameters.
    
    Args:
        cifti_in: the input cifti dlabel file.
        opt_placement_fraction: set how far along the edge border points are\
            drawn: fraction along edge from inside vertex (default 0.33).
        opt_column_column: select a single column: the column number or name.
        border: specify output file for a surface structure.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "cifti-label-to-border",
        "cifti_in": cifti_in,
    }
    if opt_placement_fraction is not None:
        params["opt_placement_fraction"] = opt_placement_fraction
    if opt_column_column is not None:
        params["opt_column_column"] = opt_column_column
    if border is not None:
        params["border"] = border
    return params


def cifti_label_to_border_cargs(
    params: CiftiLabelToBorderParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-label-to-border")
    cargs.append(execution.input_file(params.get("cifti_in")))
    if params.get("opt_placement_fraction") is not None:
        cargs.extend([
            "-placement",
            str(params.get("opt_placement_fraction"))
        ])
    if params.get("opt_column_column") is not None:
        cargs.extend([
            "-column",
            params.get("opt_column_column")
        ])
    if params.get("border") is not None:
        cargs.extend([a for c in [dyn_cargs(s["__STYXTYPE__"])(s, execution) for s in params.get("border")] for a in c])
    return cargs


def cifti_label_to_border_outputs(
    params: CiftiLabelToBorderParameters,
    execution: Execution,
) -> CiftiLabelToBorderOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CiftiLabelToBorderOutputs(
        root=execution.output_file("."),
        border=[dyn_outputs(i["__STYXTYPE__"])(i, execution) if dyn_outputs(i["__STYXTYPE__"]) else None for i in params.get("border")] if params.get("border") else None,
    )
    return ret


def cifti_label_to_border_execute(
    params: CiftiLabelToBorderParameters,
    execution: Execution,
) -> CiftiLabelToBorderOutputs:
    """
    Draw borders around cifti labels.
    
    For each surface, takes the labels on the matching structure and draws
    borders around the labels. Use -column to only draw borders around one label
    map.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `CiftiLabelToBorderOutputs`).
    """
    params = execution.params(params)
    cargs = cifti_label_to_border_cargs(params, execution)
    ret = cifti_label_to_border_outputs(params, execution)
    execution.run(cargs)
    return ret


def cifti_label_to_border(
    cifti_in: InputPathType,
    opt_placement_fraction: float | None = None,
    opt_column_column: str | None = None,
    border: list[CiftiLabelToBorderBorderParameters] | None = None,
    runner: Runner | None = None,
) -> CiftiLabelToBorderOutputs:
    """
    Draw borders around cifti labels.
    
    For each surface, takes the labels on the matching structure and draws
    borders around the labels. Use -column to only draw borders around one label
    map.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        cifti_in: the input cifti dlabel file.
        opt_placement_fraction: set how far along the edge border points are\
            drawn: fraction along edge from inside vertex (default 0.33).
        opt_column_column: select a single column: the column number or name.
        border: specify output file for a surface structure.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CiftiLabelToBorderOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CIFTI_LABEL_TO_BORDER_METADATA)
    params = cifti_label_to_border_params(
        cifti_in=cifti_in,
        opt_placement_fraction=opt_placement_fraction,
        opt_column_column=opt_column_column,
        border=border,
    )
    return cifti_label_to_border_execute(params, execution)


__all__ = [
    "CIFTI_LABEL_TO_BORDER_METADATA",
    "CiftiLabelToBorderBorderOutputs",
    "CiftiLabelToBorderBorderParameters",
    "CiftiLabelToBorderOutputs",
    "CiftiLabelToBorderParameters",
    "cifti_label_to_border",
    "cifti_label_to_border_border_params",
    "cifti_label_to_border_params",
]
