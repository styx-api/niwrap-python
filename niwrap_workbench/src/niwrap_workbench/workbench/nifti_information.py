# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

NIFTI_INFORMATION_METADATA = Metadata(
    id="aae86bd1571798a6e19c7191f8f0421755a39411.boutiques",
    name="nifti-information",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


NiftiInformationPrintHeaderParameters = typing.TypedDict('NiftiInformationPrintHeaderParameters', {
    "__STYX_TYPE__": typing.Literal["print_header"],
    "opt_allow_truncated": bool,
})


NiftiInformationPrintXmlParameters = typing.TypedDict('NiftiInformationPrintXmlParameters', {
    "__STYX_TYPE__": typing.Literal["print_xml"],
    "opt_version_version": typing.NotRequired[str | None],
})


NiftiInformationParameters = typing.TypedDict('NiftiInformationParameters', {
    "__STYX_TYPE__": typing.Literal["nifti-information"],
    "nifti_file": str,
    "print_header": typing.NotRequired[NiftiInformationPrintHeaderParameters | None],
    "opt_print_matrix": bool,
    "print_xml": typing.NotRequired[NiftiInformationPrintXmlParameters | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "nifti-information": nifti_information_cargs,
        "print_header": nifti_information_print_header_cargs,
        "print_xml": nifti_information_print_xml_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


def nifti_information_print_header_params(
    opt_allow_truncated: bool = False,
) -> NiftiInformationPrintHeaderParameters:
    """
    Build parameters.
    
    Args:
        opt_allow_truncated: print the header even if the data is truncated.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "print_header",
        "opt_allow_truncated": opt_allow_truncated,
    }
    return params


def nifti_information_print_header_cargs(
    params: NiftiInformationPrintHeaderParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-print-header")
    if params.get("opt_allow_truncated"):
        cargs.append("-allow-truncated")
    return cargs


def nifti_information_print_xml_params(
    opt_version_version: str | None = None,
) -> NiftiInformationPrintXmlParameters:
    """
    Build parameters.
    
    Args:
        opt_version_version: convert the XML to a specific CIFTI version\
            (default is the file's cifti version): the CIFTI version to use.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "print_xml",
    }
    if opt_version_version is not None:
        params["opt_version_version"] = opt_version_version
    return params


def nifti_information_print_xml_cargs(
    params: NiftiInformationPrintXmlParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-print-xml")
    if params.get("opt_version_version") is not None:
        cargs.extend([
            "-version",
            params.get("opt_version_version")
        ])
    return cargs


class NiftiInformationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `nifti_information(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def nifti_information_params(
    nifti_file: str,
    print_header: NiftiInformationPrintHeaderParameters | None = None,
    opt_print_matrix: bool = False,
    print_xml: NiftiInformationPrintXmlParameters | None = None,
) -> NiftiInformationParameters:
    """
    Build parameters.
    
    Args:
        nifti_file: the nifti/cifti file to examine.
        print_header: display the header contents.
        opt_print_matrix: output the values in the matrix (cifti only).
        print_xml: print the cifti XML (cifti only).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "nifti-information",
        "nifti_file": nifti_file,
        "opt_print_matrix": opt_print_matrix,
    }
    if print_header is not None:
        params["print_header"] = print_header
    if print_xml is not None:
        params["print_xml"] = print_xml
    return params


def nifti_information_cargs(
    params: NiftiInformationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-nifti-information")
    cargs.append(params.get("nifti_file"))
    if params.get("print_header") is not None:
        cargs.extend(dyn_cargs(params.get("print_header")["__STYXTYPE__"])(params.get("print_header"), execution))
    if params.get("opt_print_matrix"):
        cargs.append("-print-matrix")
    if params.get("print_xml") is not None:
        cargs.extend(dyn_cargs(params.get("print_xml")["__STYXTYPE__"])(params.get("print_xml"), execution))
    return cargs


def nifti_information_outputs(
    params: NiftiInformationParameters,
    execution: Execution,
) -> NiftiInformationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = NiftiInformationOutputs(
        root=execution.output_file("."),
    )
    return ret


def nifti_information_execute(
    params: NiftiInformationParameters,
    execution: Execution,
) -> NiftiInformationOutputs:
    """
    Display information about a nifti/cifti file.
    
    You must specify at least one -print-* option.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `NiftiInformationOutputs`).
    """
    params = execution.params(params)
    cargs = nifti_information_cargs(params, execution)
    ret = nifti_information_outputs(params, execution)
    execution.run(cargs)
    return ret


def nifti_information(
    nifti_file: str,
    print_header: NiftiInformationPrintHeaderParameters | None = None,
    opt_print_matrix: bool = False,
    print_xml: NiftiInformationPrintXmlParameters | None = None,
    runner: Runner | None = None,
) -> NiftiInformationOutputs:
    """
    Display information about a nifti/cifti file.
    
    You must specify at least one -print-* option.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        nifti_file: the nifti/cifti file to examine.
        print_header: display the header contents.
        opt_print_matrix: output the values in the matrix (cifti only).
        print_xml: print the cifti XML (cifti only).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `NiftiInformationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(NIFTI_INFORMATION_METADATA)
    params = nifti_information_params(
        nifti_file=nifti_file,
        print_header=print_header,
        opt_print_matrix=opt_print_matrix,
        print_xml=print_xml,
    )
    return nifti_information_execute(params, execution)


__all__ = [
    "NIFTI_INFORMATION_METADATA",
    "NiftiInformationOutputs",
    "NiftiInformationParameters",
    "NiftiInformationPrintHeaderParameters",
    "NiftiInformationPrintXmlParameters",
    "nifti_information",
    "nifti_information_params",
    "nifti_information_print_header_params",
    "nifti_information_print_xml_params",
]
