# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SURFACE_AFFINE_REGRESSION_METADATA = Metadata(
    id="8987a9d606f580c73d1000395b1f79455846aab9.boutiques",
    name="surface-affine-regression",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


SurfaceAffineRegressionParameters = typing.TypedDict('SurfaceAffineRegressionParameters', {
    "__STYX_TYPE__": typing.Literal["surface-affine-regression"],
    "source": InputPathType,
    "target": InputPathType,
    "affine_out": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "surface-affine-regression": surface_affine_regression_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class SurfaceAffineRegressionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surface_affine_regression(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def surface_affine_regression_params(
    source: InputPathType,
    target: InputPathType,
    affine_out: str,
) -> SurfaceAffineRegressionParameters:
    """
    Build parameters.
    
    Args:
        source: the surface to warp.
        target: the surface to match the coordinates of.
        affine_out: output - the output affine file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "surface-affine-regression",
        "source": source,
        "target": target,
        "affine_out": affine_out,
    }
    return params


def surface_affine_regression_cargs(
    params: SurfaceAffineRegressionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-surface-affine-regression")
    cargs.append(execution.input_file(params.get("source")))
    cargs.append(execution.input_file(params.get("target")))
    cargs.append(params.get("affine_out"))
    return cargs


def surface_affine_regression_outputs(
    params: SurfaceAffineRegressionParameters,
    execution: Execution,
) -> SurfaceAffineRegressionOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SurfaceAffineRegressionOutputs(
        root=execution.output_file("."),
    )
    return ret


def surface_affine_regression_execute(
    params: SurfaceAffineRegressionParameters,
    execution: Execution,
) -> SurfaceAffineRegressionOutputs:
    """
    Regress the affine transform between surfaces on the same mesh.
    
    Use linear regression to compute an affine that minimizes the sum of squares
    of the coordinate differences between the target surface and the warped
    source surface. Note that this has a bias to shrink the surface that is
    being warped. The output is written as a NIFTI 'world' matrix, see
    -convert-affine to convert it for use in other software.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `SurfaceAffineRegressionOutputs`).
    """
    params = execution.params(params)
    cargs = surface_affine_regression_cargs(params, execution)
    ret = surface_affine_regression_outputs(params, execution)
    execution.run(cargs)
    return ret


def surface_affine_regression(
    source: InputPathType,
    target: InputPathType,
    affine_out: str,
    runner: Runner | None = None,
) -> SurfaceAffineRegressionOutputs:
    """
    Regress the affine transform between surfaces on the same mesh.
    
    Use linear regression to compute an affine that minimizes the sum of squares
    of the coordinate differences between the target surface and the warped
    source surface. Note that this has a bias to shrink the surface that is
    being warped. The output is written as a NIFTI 'world' matrix, see
    -convert-affine to convert it for use in other software.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        source: the surface to warp.
        target: the surface to match the coordinates of.
        affine_out: output - the output affine file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfaceAffineRegressionOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURFACE_AFFINE_REGRESSION_METADATA)
    params = surface_affine_regression_params(
        source=source,
        target=target,
        affine_out=affine_out,
    )
    return surface_affine_regression_execute(params, execution)


__all__ = [
    "SURFACE_AFFINE_REGRESSION_METADATA",
    "SurfaceAffineRegressionOutputs",
    "SurfaceAffineRegressionParameters",
    "surface_affine_regression",
    "surface_affine_regression_params",
]
