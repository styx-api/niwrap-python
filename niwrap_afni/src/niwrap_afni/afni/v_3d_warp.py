# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_3D_WARP_METADATA = Metadata(
    id="9fc0895546044d51ae3bc018933a57cbeae8baeb.boutiques",
    name="3dWarp",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


V3dWarpParameters = typing.TypedDict('V3dWarpParameters', {
    "__STYX_TYPE__": typing.Literal["3dWarp"],
    "dataset": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "3dWarp": v_3d_warp_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


class V3dWarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_warp(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def v_3d_warp_params(
    dataset: str,
) -> V3dWarpParameters:
    """
    Build parameters.
    
    Args:
        dataset: Input dataset to be warped.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "3dWarp",
        "dataset": dataset,
    }
    return params


def v_3d_warp_cargs(
    params: V3dWarpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("3dWarp")
    cargs.append("[OPTIONS]")
    cargs.append(params.get("dataset"))
    return cargs


def v_3d_warp_outputs(
    params: V3dWarpParameters,
    execution: Execution,
) -> V3dWarpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V3dWarpOutputs(
        root=execution.output_file("."),
    )
    return ret


def v_3d_warp_execute(
    params: V3dWarpParameters,
    execution: Execution,
) -> V3dWarpOutputs:
    """
    Warp (spatially transform) one 3D dataset.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `V3dWarpOutputs`).
    """
    params = execution.params(params)
    cargs = v_3d_warp_cargs(params, execution)
    ret = v_3d_warp_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_3d_warp(
    dataset: str,
    runner: Runner | None = None,
) -> V3dWarpOutputs:
    """
    Warp (spatially transform) one 3D dataset.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        dataset: Input dataset to be warped.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dWarpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_WARP_METADATA)
    params = v_3d_warp_params(
        dataset=dataset,
    )
    return v_3d_warp_execute(params, execution)


__all__ = [
    "V3dWarpOutputs",
    "V3dWarpParameters",
    "V_3D_WARP_METADATA",
    "v_3d_warp",
    "v_3d_warp_params",
]
