# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_3DMASK_SVD_METADATA = Metadata(
    id="5cc0ef9b4df81bcbe1689588ddbddf9e81594730.boutiques",
    name="3dmaskSVD",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


V3dmaskSvdParameters = typing.TypedDict('V3dmaskSvdParameters', {
    "__STYX_TYPE__": typing.Literal["3dmaskSVD"],
    "input_dataset": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "3dmaskSVD": v_3dmask_svd_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "3dmaskSVD": v_3dmask_svd_outputs,
    }.get(t)


class V3dmaskSvdOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3dmask_svd(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    svd_output: OutputPathType
    """Singular vector output redirected to this file"""


def v_3dmask_svd_params(
    input_dataset: InputPathType,
) -> V3dmaskSvdParameters:
    """
    Build parameters.
    
    Args:
        input_dataset: Input dataset.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "3dmaskSVD",
        "input_dataset": input_dataset,
    }
    return params


def v_3dmask_svd_cargs(
    params: V3dmaskSvdParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("3dmaskSVD")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(params.get("input_dataset")))
    return cargs


def v_3dmask_svd_outputs(
    params: V3dmaskSvdParameters,
    execution: Execution,
) -> V3dmaskSvdOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V3dmaskSvdOutputs(
        root=execution.output_file("."),
        svd_output=execution.output_file("../stdout"),
    )
    return ret


def v_3dmask_svd_execute(
    params: V3dmaskSvdParameters,
    execution: Execution,
) -> V3dmaskSvdOutputs:
    """
    Computes the principal singular vector of the time series vectors extracted from
    the input dataset over the input mask.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `V3dmaskSvdOutputs`).
    """
    params = execution.params(params)
    cargs = v_3dmask_svd_cargs(params, execution)
    ret = v_3dmask_svd_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_3dmask_svd(
    input_dataset: InputPathType,
    runner: Runner | None = None,
) -> V3dmaskSvdOutputs:
    """
    Computes the principal singular vector of the time series vectors extracted from
    the input dataset over the input mask.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        input_dataset: Input dataset.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dmaskSvdOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3DMASK_SVD_METADATA)
    params = v_3dmask_svd_params(
        input_dataset=input_dataset,
    )
    return v_3dmask_svd_execute(params, execution)


__all__ = [
    "V3dmaskSvdOutputs",
    "V3dmaskSvdParameters",
    "V_3DMASK_SVD_METADATA",
    "v_3dmask_svd",
    "v_3dmask_svd_params",
]
