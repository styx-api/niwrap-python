# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_3D_GEN_FEATURE_DIST_METADATA = Metadata(
    id="306602359a0090c4e74a2cc38f89a25555f89cc6.boutiques",
    name="3dGenFeatureDist",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


V3dGenFeatureDistParameters = typing.TypedDict('V3dGenFeatureDistParameters', {
    "__STYX_TYPE__": typing.Literal["3dGenFeatureDist"],
    "features_string": str,
    "class_string": str,
    "prefix": typing.NotRequired[str | None],
    "overwrite": bool,
    "debug_level": typing.NotRequired[float | None],
    "other": bool,
    "no_other": bool,
    "show_histograms": typing.NotRequired[str | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "3dGenFeatureDist": v_3d_gen_feature_dist_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "3dGenFeatureDist": v_3d_gen_feature_dist_outputs,
    }.get(t)


class V3dGenFeatureDistOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_gen_feature_dist(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_hive: OutputPathType | None
    """Histogram volume output"""


def v_3d_gen_feature_dist_params(
    features_string: str,
    class_string: str,
    prefix: str | None = None,
    overwrite: bool = False,
    debug_level: float | None = None,
    other: bool = False,
    no_other: bool = False,
    show_histograms: str | None = None,
) -> V3dGenFeatureDistParameters:
    """
    Build parameters.
    
    Args:
        features_string: FEATURES_STRING is a semicolon delimited string of\
            features.
        class_string: CLASS_STRING is a semicolon delimited string of class\
            labels.
        prefix: PREF is the prefix for all output volumes that are not\
            debugging related.
        overwrite: Automatically overwrite existing output.
        debug_level: Debugging level.
        other: Add histograms for an 'OTHER' class that has a uniform pdf.
        no_other: Opposite of -OTHER.
        show_histograms: Show specified histograms and quit.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "3dGenFeatureDist",
        "features_string": features_string,
        "class_string": class_string,
        "overwrite": overwrite,
        "other": other,
        "no_other": no_other,
    }
    if prefix is not None:
        params["prefix"] = prefix
    if debug_level is not None:
        params["debug_level"] = debug_level
    if show_histograms is not None:
        params["show_histograms"] = show_histograms
    return params


def v_3d_gen_feature_dist_cargs(
    params: V3dGenFeatureDistParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("3dGenFeatureDist")
    cargs.extend([
        "-features",
        params.get("features_string")
    ])
    cargs.extend([
        "-classes",
        params.get("class_string")
    ])
    if params.get("prefix") is not None:
        cargs.extend([
            "-prefix",
            params.get("prefix")
        ])
    if params.get("overwrite"):
        cargs.append("-overwrite")
    if params.get("debug_level") is not None:
        cargs.extend([
            "-debug",
            str(params.get("debug_level"))
        ])
    if params.get("other"):
        cargs.append("-OTHER")
    if params.get("no_other"):
        cargs.append("-no_OTHER")
    if params.get("show_histograms") is not None:
        cargs.extend([
            "-ShowTheseHists",
            params.get("show_histograms")
        ])
    return cargs


def v_3d_gen_feature_dist_outputs(
    params: V3dGenFeatureDistParameters,
    execution: Execution,
) -> V3dGenFeatureDistOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V3dGenFeatureDistOutputs(
        root=execution.output_file("."),
        output_hive=execution.output_file(params.get("prefix") + "_hive.nii.gz") if (params.get("prefix") is not None) else None,
    )
    return ret


def v_3d_gen_feature_dist_execute(
    params: V3dGenFeatureDistParameters,
    execution: Execution,
) -> V3dGenFeatureDistOutputs:
    """
    3dGenFeatureDist produces histogram volume (hives) from input data.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `V3dGenFeatureDistOutputs`).
    """
    params = execution.params(params)
    cargs = v_3d_gen_feature_dist_cargs(params, execution)
    ret = v_3d_gen_feature_dist_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_3d_gen_feature_dist(
    features_string: str,
    class_string: str,
    prefix: str | None = None,
    overwrite: bool = False,
    debug_level: float | None = None,
    other: bool = False,
    no_other: bool = False,
    show_histograms: str | None = None,
    runner: Runner | None = None,
) -> V3dGenFeatureDistOutputs:
    """
    3dGenFeatureDist produces histogram volume (hives) from input data.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        features_string: FEATURES_STRING is a semicolon delimited string of\
            features.
        class_string: CLASS_STRING is a semicolon delimited string of class\
            labels.
        prefix: PREF is the prefix for all output volumes that are not\
            debugging related.
        overwrite: Automatically overwrite existing output.
        debug_level: Debugging level.
        other: Add histograms for an 'OTHER' class that has a uniform pdf.
        no_other: Opposite of -OTHER.
        show_histograms: Show specified histograms and quit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dGenFeatureDistOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_GEN_FEATURE_DIST_METADATA)
    params = v_3d_gen_feature_dist_params(
        features_string=features_string,
        class_string=class_string,
        prefix=prefix,
        overwrite=overwrite,
        debug_level=debug_level,
        other=other,
        no_other=no_other,
        show_histograms=show_histograms,
    )
    return v_3d_gen_feature_dist_execute(params, execution)


__all__ = [
    "V3dGenFeatureDistOutputs",
    "V3dGenFeatureDistParameters",
    "V_3D_GEN_FEATURE_DIST_METADATA",
    "v_3d_gen_feature_dist",
    "v_3d_gen_feature_dist_params",
]
