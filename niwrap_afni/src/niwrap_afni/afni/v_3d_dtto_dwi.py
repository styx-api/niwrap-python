# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_3D_DTTO_DWI_METADATA = Metadata(
    id="0f0fbb0dc2b7d522416ef673b66be8d6a5895cef.boutiques",
    name="3dDTtoDWI",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


V3dDttoDwiParameters = typing.TypedDict('V3dDttoDwiParameters', {
    "__STYX_TYPE__": typing.Literal["3dDTtoDWI"],
    "gradient_file": InputPathType,
    "i0_dataset": InputPathType,
    "dt_dataset": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "3dDTtoDWI": v_3d_dtto_dwi_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "3dDTtoDWI": v_3d_dtto_dwi_outputs,
    }.get(t)


class V3dDttoDwiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_dtto_dwi(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dwi: OutputPathType
    """Computed DWI images including sub-brick for each gradient vector."""


def v_3d_dtto_dwi_params(
    gradient_file: InputPathType,
    i0_dataset: InputPathType,
    dt_dataset: InputPathType,
) -> V3dDttoDwiParameters:
    """
    Build parameters.
    
    Args:
        gradient_file: 1D file containing the gradient vectors (ASCII floats)\
            for non-zero gradients.
        i0_dataset: Volume without any gradient applied.
        dt_dataset: 6-sub-brick dataset containing the diffusion tensor data\
            (Dxx, Dxy, Dyy, Dxz, Dyz, Dzz).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "3dDTtoDWI",
        "gradient_file": gradient_file,
        "i0_dataset": i0_dataset,
        "dt_dataset": dt_dataset,
    }
    return params


def v_3d_dtto_dwi_cargs(
    params: V3dDttoDwiParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("3dDTtoDWI")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(params.get("gradient_file")))
    cargs.append(execution.input_file(params.get("i0_dataset")))
    cargs.append(execution.input_file(params.get("dt_dataset")))
    return cargs


def v_3d_dtto_dwi_outputs(
    params: V3dDttoDwiParameters,
    execution: Execution,
) -> V3dDttoDwiOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V3dDttoDwiOutputs(
        root=execution.output_file("."),
        output_dwi=execution.output_file("[PREFIX]*.HEAD"),
    )
    return ret


def v_3d_dtto_dwi_execute(
    params: V3dDttoDwiParameters,
    execution: Execution,
) -> V3dDttoDwiOutputs:
    """
    Tool to compute multiple gradient images from tensors and gradient vector
    coordinates applied to the I0-dataset.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `V3dDttoDwiOutputs`).
    """
    params = execution.params(params)
    cargs = v_3d_dtto_dwi_cargs(params, execution)
    ret = v_3d_dtto_dwi_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_3d_dtto_dwi(
    gradient_file: InputPathType,
    i0_dataset: InputPathType,
    dt_dataset: InputPathType,
    runner: Runner | None = None,
) -> V3dDttoDwiOutputs:
    """
    Tool to compute multiple gradient images from tensors and gradient vector
    coordinates applied to the I0-dataset.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        gradient_file: 1D file containing the gradient vectors (ASCII floats)\
            for non-zero gradients.
        i0_dataset: Volume without any gradient applied.
        dt_dataset: 6-sub-brick dataset containing the diffusion tensor data\
            (Dxx, Dxy, Dyy, Dxz, Dyz, Dzz).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dDttoDwiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_DTTO_DWI_METADATA)
    params = v_3d_dtto_dwi_params(
        gradient_file=gradient_file,
        i0_dataset=i0_dataset,
        dt_dataset=dt_dataset,
    )
    return v_3d_dtto_dwi_execute(params, execution)


__all__ = [
    "V3dDttoDwiOutputs",
    "V3dDttoDwiParameters",
    "V_3D_DTTO_DWI_METADATA",
    "v_3d_dtto_dwi",
    "v_3d_dtto_dwi_params",
]
