# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_3D_CLUST_SIM_METADATA = Metadata(
    id="493de4c7d1501714af71d386a011e1fe097ca5fb.boutiques",
    name="3dClustSim",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


V3dClustSimParameters = typing.TypedDict('V3dClustSimParameters', {
    "__STYX_TYPE__": typing.Literal["3dClustSim"],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "3dClustSim": v_3d_clust_sim_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "3dClustSim": v_3d_clust_sim_outputs,
    }.get(t)


class V3dClustSimOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_clust_sim(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_nn1_1sided: OutputPathType
    """Output file for NN1 with 1-sided thresholding"""
    output_nn1_2sided: OutputPathType
    """Output file for NN1 with 2-sided thresholding"""
    output_nn1_bisided: OutputPathType
    """Output file for NN1 with bi-sided thresholding"""
    output_nn2_1sided: OutputPathType
    """Output file for NN2 with 1-sided thresholding"""
    output_nn2_2sided: OutputPathType
    """Output file for NN2 with 2-sided thresholding"""
    output_nn2_bisided: OutputPathType
    """Output file for NN2 with bi-sided thresholding"""
    output_nn3_1sided: OutputPathType
    """Output file for NN3 with 1-sided thresholding"""
    output_nn3_2sided: OutputPathType
    """Output file for NN3 with 2-sided thresholding"""
    output_nn3_bisided: OutputPathType
    """Output file for NN3 with bi-sided thresholding"""
    mask_compressed: OutputPathType
    """Compressed ASCII encoding of the mask volume"""


def v_3d_clust_sim_params(
) -> V3dClustSimParameters:
    """
    Build parameters.
    
    Args:
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "3dClustSim",
    }
    return params


def v_3d_clust_sim_cargs(
    params: V3dClustSimParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("3dClustSim")
    cargs.append("[OPTIONS]")
    return cargs


def v_3d_clust_sim_outputs(
    params: V3dClustSimParameters,
    execution: Execution,
) -> V3dClustSimOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V3dClustSimOutputs(
        root=execution.output_file("."),
        output_nn1_1sided=execution.output_file("[PREFIX].NN1_1sided.1D"),
        output_nn1_2sided=execution.output_file("[PREFIX].NN1_2sided.1D"),
        output_nn1_bisided=execution.output_file("[PREFIX].NN1_bisided.1D"),
        output_nn2_1sided=execution.output_file("[PREFIX].NN2_1sided.1D"),
        output_nn2_2sided=execution.output_file("[PREFIX].NN2_2sided.1D"),
        output_nn2_bisided=execution.output_file("[PREFIX].NN2_bisided.1D"),
        output_nn3_1sided=execution.output_file("[PREFIX].NN3_1sided.1D"),
        output_nn3_2sided=execution.output_file("[PREFIX].NN3_2sided.1D"),
        output_nn3_bisided=execution.output_file("[PREFIX].NN3_bisided.1D"),
        mask_compressed=execution.output_file("[PREFIX].mask"),
    )
    return ret


def v_3d_clust_sim_execute(
    params: V3dClustSimParameters,
    execution: Execution,
) -> V3dClustSimOutputs:
    """
    Program to estimate the probability of false positive (noise-only) clusters.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `V3dClustSimOutputs`).
    """
    params = execution.params(params)
    cargs = v_3d_clust_sim_cargs(params, execution)
    ret = v_3d_clust_sim_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_3d_clust_sim(
    runner: Runner | None = None,
) -> V3dClustSimOutputs:
    """
    Program to estimate the probability of false positive (noise-only) clusters.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dClustSimOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_CLUST_SIM_METADATA)
    params = v_3d_clust_sim_params(
    )
    return v_3d_clust_sim_execute(params, execution)


__all__ = [
    "V3dClustSimOutputs",
    "V3dClustSimParameters",
    "V_3D_CLUST_SIM_METADATA",
    "v_3d_clust_sim",
    "v_3d_clust_sim_params",
]
