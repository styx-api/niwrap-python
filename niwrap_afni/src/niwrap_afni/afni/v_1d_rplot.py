# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_1D_RPLOT_METADATA = Metadata(
    id="97370e286ceee3c0b1e0eb62c1b51f85396f905d.boutiques",
    name="1dRplot",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


V1dRplotParameters = typing.TypedDict('V1dRplotParameters', {
    "__STYX_TYPE__": typing.Literal["1dRplot"],
    "input_file": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "1dRplot": v_1d_rplot_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "1dRplot": v_1d_rplot_outputs,
    }.get(t)


class V1dRplotOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_1d_rplot(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_plot: OutputPathType
    """Output plot file"""


def v_1d_rplot_params(
    input_file: InputPathType,
) -> V1dRplotParameters:
    """
    Build parameters.
    
    Args:
        input_file: Input 1D file to plot.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "1dRplot",
        "input_file": input_file,
    }
    return params


def v_1d_rplot_cargs(
    params: V1dRplotParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("1dRplot")
    cargs.extend([
        "-input",
        execution.input_file(params.get("input_file"))
    ])
    cargs.append("[OPTIONS]")
    return cargs


def v_1d_rplot_outputs(
    params: V1dRplotParameters,
    execution: Execution,
) -> V1dRplotOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V1dRplotOutputs(
        root=execution.output_file("."),
        output_plot=execution.output_file("[OUTPUT_PREFIX]*.jpg"),
    )
    return ret


def v_1d_rplot_execute(
    params: V1dRplotParameters,
    execution: Execution,
) -> V1dRplotOutputs:
    """
    Program for plotting a 1D file.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `V1dRplotOutputs`).
    """
    params = execution.params(params)
    cargs = v_1d_rplot_cargs(params, execution)
    ret = v_1d_rplot_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_1d_rplot(
    input_file: InputPathType,
    runner: Runner | None = None,
) -> V1dRplotOutputs:
    """
    Program for plotting a 1D file.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        input_file: Input 1D file to plot.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V1dRplotOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_1D_RPLOT_METADATA)
    params = v_1d_rplot_params(
        input_file=input_file,
    )
    return v_1d_rplot_execute(params, execution)


__all__ = [
    "V1dRplotOutputs",
    "V1dRplotParameters",
    "V_1D_RPLOT_METADATA",
    "v_1d_rplot",
    "v_1d_rplot_params",
]
