# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_3D_LSS_METADATA = Metadata(
    id="d793e92300ed18c69c7d31223293711fdbbfaaf7.boutiques",
    name="3dLSS",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


V3dLssParameters = typing.TypedDict('V3dLssParameters', {
    "__STYX_TYPE__": typing.Literal["3dLSS"],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "3dLSS": v_3d_lss_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "3dLSS": v_3d_lss_outputs,
    }.get(t)


class V3dLssOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_lss(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dataset: OutputPathType
    """Output dataset containing the LSS estimates of the beta weights for the
    '-stim_times_IM' stimuli."""
    save1_d_output: OutputPathType
    """Estimator vectors saved in a 1D formatted file."""


def v_3d_lss_params(
) -> V3dLssParameters:
    """
    Build parameters.
    
    Args:
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "3dLSS",
    }
    return params


def v_3d_lss_cargs(
    params: V3dLssParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("3dLSS")
    cargs.append("[OPTIONS]")
    return cargs


def v_3d_lss_outputs(
    params: V3dLssParameters,
    execution: Execution,
) -> V3dLssOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V3dLssOutputs(
        root=execution.output_file("."),
        output_dataset=execution.output_file("LSSout+orig.HEAD"),
        save1_d_output=execution.output_file("[SAVE1D]"),
    )
    return ret


def v_3d_lss_execute(
    params: V3dLssParameters,
    execution: Execution,
) -> V3dLssOutputs:
    """
    Least-Squares-Sum (LSS) estimation tool from a -stim_times_IM matrix for
    multivoxel pattern classification analyses.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `V3dLssOutputs`).
    """
    params = execution.params(params)
    cargs = v_3d_lss_cargs(params, execution)
    ret = v_3d_lss_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_3d_lss(
    runner: Runner | None = None,
) -> V3dLssOutputs:
    """
    Least-Squares-Sum (LSS) estimation tool from a -stim_times_IM matrix for
    multivoxel pattern classification analyses.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dLssOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3D_LSS_METADATA)
    params = v_3d_lss_params(
    )
    return v_3d_lss_execute(params, execution)


__all__ = [
    "V3dLssOutputs",
    "V3dLssParameters",
    "V_3D_LSS_METADATA",
    "v_3d_lss",
    "v_3d_lss_params",
]
