# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FLOAT_SCAN_METADATA = Metadata(
    id="d795b3de53df65306720fe08c5de7896c3c07e43.boutiques",
    name="float_scan",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


FloatScanParameters = typing.TypedDict('FloatScanParameters', {
    "__STYX_TYPE__": typing.Literal["float_scan"],
    "fix_illegal_values": bool,
    "verbose_mode": bool,
    "skip_count": typing.NotRequired[int | None],
    "input_file": InputPathType,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "float_scan": float_scan_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "float_scan": float_scan_outputs,
    }.get(t)


class FloatScanOutputs(typing.NamedTuple):
    """
    Output object returned when calling `float_scan(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    stdout_file: OutputPathType
    """Output file with illegal values replaced by 0 when -fix flag is used"""


def float_scan_params(
    input_file: InputPathType,
    fix_illegal_values: bool = False,
    verbose_mode: bool = False,
    skip_count: int | None = None,
) -> FloatScanParameters:
    """
    Build parameters.
    
    Args:
        input_file: Input file containing IEEE floating point numbers.
        fix_illegal_values: Writes a copy of the input file to stdout,\
            replacing illegal values with 0.
        verbose_mode: Verbose mode: print out index of each illegal value.
        skip_count: Skip the first n floating point locations (i.e., the first\
            4*n bytes) in the file.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "float_scan",
        "fix_illegal_values": fix_illegal_values,
        "verbose_mode": verbose_mode,
        "input_file": input_file,
    }
    if skip_count is not None:
        params["skip_count"] = skip_count
    return params


def float_scan_cargs(
    params: FloatScanParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("float_scan")
    if params.get("fix_illegal_values"):
        cargs.append("-fix")
    if params.get("verbose_mode"):
        cargs.append("-v")
    if params.get("skip_count") is not None:
        cargs.extend([
            "-skip",
            str(params.get("skip_count"))
        ])
    cargs.append(execution.input_file(params.get("input_file")))
    return cargs


def float_scan_outputs(
    params: FloatScanParameters,
    execution: Execution,
) -> FloatScanOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FloatScanOutputs(
        root=execution.output_file("."),
        stdout_file=execution.output_file("stdout"),
    )
    return ret


def float_scan_execute(
    params: FloatScanParameters,
    execution: Execution,
) -> FloatScanOutputs:
    """
    Scans the input file of IEEE floating point numbers for illegal values:
    infinities and not-a-number (NaN) values.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `FloatScanOutputs`).
    """
    params = execution.params(params)
    cargs = float_scan_cargs(params, execution)
    ret = float_scan_outputs(params, execution)
    execution.run(cargs)
    return ret


def float_scan(
    input_file: InputPathType,
    fix_illegal_values: bool = False,
    verbose_mode: bool = False,
    skip_count: int | None = None,
    runner: Runner | None = None,
) -> FloatScanOutputs:
    """
    Scans the input file of IEEE floating point numbers for illegal values:
    infinities and not-a-number (NaN) values.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        input_file: Input file containing IEEE floating point numbers.
        fix_illegal_values: Writes a copy of the input file to stdout,\
            replacing illegal values with 0.
        verbose_mode: Verbose mode: print out index of each illegal value.
        skip_count: Skip the first n floating point locations (i.e., the first\
            4*n bytes) in the file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FloatScanOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FLOAT_SCAN_METADATA)
    params = float_scan_params(
        fix_illegal_values=fix_illegal_values,
        verbose_mode=verbose_mode,
        skip_count=skip_count,
        input_file=input_file,
    )
    return float_scan_execute(params, execution)


__all__ = [
    "FLOAT_SCAN_METADATA",
    "FloatScanOutputs",
    "FloatScanParameters",
    "float_scan",
    "float_scan_params",
]
