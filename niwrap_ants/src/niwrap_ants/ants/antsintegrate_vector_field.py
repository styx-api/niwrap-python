# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ANTSINTEGRATE_VECTOR_FIELD_METADATA = Metadata(
    id="25eaf01e25105beba3ae7eb2187714401340f8d4.boutiques",
    name="ANTSIntegrateVectorField",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


AntsintegrateVectorFieldParameters = typing.TypedDict('AntsintegrateVectorFieldParameters', {
    "__STYX_TYPE__": typing.Literal["ANTSIntegrateVectorField"],
    "vector_field_input": InputPathType,
    "roi_mask_input": InputPathType,
    "fibers_output": str,
    "length_image_output": str,
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "ANTSIntegrateVectorField": antsintegrate_vector_field_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "ANTSIntegrateVectorField": antsintegrate_vector_field_outputs,
    }.get(t)


class AntsintegrateVectorFieldOutputs(typing.NamedTuple):
    """
    Output object returned when calling `antsintegrate_vector_field(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    fibers_out_vtk: OutputPathType
    """The output is the fibers as a VTK text file."""
    length_image_out_nii: OutputPathType
    """The output is the length image."""


def antsintegrate_vector_field_params(
    vector_field_input: InputPathType,
    roi_mask_input: InputPathType,
    fibers_output: str,
    length_image_output: str,
) -> AntsintegrateVectorFieldParameters:
    """
    Build parameters.
    
    Args:
        vector_field_input: Input vector field image (e.g., VecImageIN.nii.gz),\
            where vectors are voxels.
        roi_mask_input: Input ROI mask image (e.g., ROIMaskIN.nii.gz), an\
            integer image controlling where the integration is performed.
        fibers_output: Output VTK text file for fibers (e.g., FibersOUT.vtk).
        length_image_output: Output length image (e.g., LengthImageOUT.nii.gz).
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "ANTSIntegrateVectorField",
        "vector_field_input": vector_field_input,
        "roi_mask_input": roi_mask_input,
        "fibers_output": fibers_output,
        "length_image_output": length_image_output,
    }
    return params


def antsintegrate_vector_field_cargs(
    params: AntsintegrateVectorFieldParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("ANTSIntegrateVectorField")
    cargs.append(execution.input_file(params.get("vector_field_input")))
    cargs.append(execution.input_file(params.get("roi_mask_input")))
    cargs.append(params.get("fibers_output"))
    cargs.append(params.get("length_image_output"))
    return cargs


def antsintegrate_vector_field_outputs(
    params: AntsintegrateVectorFieldParameters,
    execution: Execution,
) -> AntsintegrateVectorFieldOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AntsintegrateVectorFieldOutputs(
        root=execution.output_file("."),
        fibers_out_vtk=execution.output_file(params.get("fibers_output")),
        length_image_out_nii=execution.output_file(params.get("length_image_output")),
    )
    return ret


def antsintegrate_vector_field_execute(
    params: AntsintegrateVectorFieldParameters,
    execution: Execution,
) -> AntsintegrateVectorFieldOutputs:
    """
    This tool integrates a vector field, where vectors are voxels, using a region of
    interest (ROI) mask. The ROI mask controls where the integration is performed
    and specifies the starting point region.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `AntsintegrateVectorFieldOutputs`).
    """
    params = execution.params(params)
    cargs = antsintegrate_vector_field_cargs(params, execution)
    ret = antsintegrate_vector_field_outputs(params, execution)
    execution.run(cargs)
    return ret


def antsintegrate_vector_field(
    vector_field_input: InputPathType,
    roi_mask_input: InputPathType,
    fibers_output: str,
    length_image_output: str,
    runner: Runner | None = None,
) -> AntsintegrateVectorFieldOutputs:
    """
    This tool integrates a vector field, where vectors are voxels, using a region of
    interest (ROI) mask. The ROI mask controls where the integration is performed
    and specifies the starting point region.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        vector_field_input: Input vector field image (e.g., VecImageIN.nii.gz),\
            where vectors are voxels.
        roi_mask_input: Input ROI mask image (e.g., ROIMaskIN.nii.gz), an\
            integer image controlling where the integration is performed.
        fibers_output: Output VTK text file for fibers (e.g., FibersOUT.vtk).
        length_image_output: Output length image (e.g., LengthImageOUT.nii.gz).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AntsintegrateVectorFieldOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ANTSINTEGRATE_VECTOR_FIELD_METADATA)
    params = antsintegrate_vector_field_params(
        vector_field_input=vector_field_input,
        roi_mask_input=roi_mask_input,
        fibers_output=fibers_output,
        length_image_output=length_image_output,
    )
    return antsintegrate_vector_field_execute(params, execution)


__all__ = [
    "ANTSINTEGRATE_VECTOR_FIELD_METADATA",
    "AntsintegrateVectorFieldOutputs",
    "AntsintegrateVectorFieldParameters",
    "antsintegrate_vector_field",
    "antsintegrate_vector_field_params",
]
