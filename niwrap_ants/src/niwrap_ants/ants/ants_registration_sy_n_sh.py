# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ANTS_REGISTRATION_SY_N_SH_METADATA = Metadata(
    id="029fb8014cb72b8e3e10e60f5b05a9adf14dc918.boutiques",
    name="antsRegistrationSyN.sh",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


AntsRegistrationSyNShParameters = typing.TypedDict('AntsRegistrationSyNShParameters', {
    "__STYX_TYPE__": typing.Literal["antsRegistrationSyN.sh"],
    "image_dimension": typing.Literal[2, 3],
    "fixed_image": InputPathType,
    "moving_image": InputPathType,
    "output_prefix": str,
    "threads": typing.NotRequired[int | None],
    "initial_transform": typing.NotRequired[list[str] | None],
    "transform_type": typing.NotRequired[typing.Literal["t", "r", "a", "s", "sr", "so", "b", "br", "bo"] | None],
    "radius": typing.NotRequired[int | None],
    "spline_distance": typing.NotRequired[int | None],
    "gradient_step": typing.NotRequired[float | None],
    "masks": typing.NotRequired[str | None],
    "precision_type": typing.NotRequired[typing.Literal["f", "d"] | None],
    "use_histogram_matching": typing.NotRequired[typing.Literal[0, 1] | None],
    "use_repro_mode": typing.NotRequired[typing.Literal[0, 1] | None],
    "collapse_output_transforms": typing.NotRequired[typing.Literal[0, 1] | None],
    "random_seed": typing.NotRequired[int | None],
})


def dyn_cargs(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "antsRegistrationSyN.sh": ants_registration_sy_n_sh_cargs,
    }.get(t)


def dyn_outputs(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "antsRegistrationSyN.sh": ants_registration_sy_n_sh_outputs,
    }.get(t)


class AntsRegistrationSyNShOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ants_registration_sy_n_sh(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    affine_transform: OutputPathType
    """Affine transformation matrix for registration"""
    inverse_warp: OutputPathType
    """Inverse warp field for registration"""
    forward_warp: OutputPathType
    """Forward warp field for registration"""


def ants_registration_sy_n_sh_params(
    image_dimension: typing.Literal[2, 3],
    fixed_image: InputPathType,
    moving_image: InputPathType,
    output_prefix: str,
    threads: int | None = None,
    initial_transform: list[str] | None = None,
    transform_type: typing.Literal["t", "r", "a", "s", "sr", "so", "b", "br", "bo"] | None = None,
    radius: int | None = None,
    spline_distance: int | None = None,
    gradient_step: float | None = None,
    masks: str | None = None,
    precision_type: typing.Literal["f", "d"] | None = None,
    use_histogram_matching: typing.Literal[0, 1] | None = None,
    use_repro_mode: typing.Literal[0, 1] | None = None,
    collapse_output_transforms: typing.Literal[0, 1] | None = None,
    random_seed: int | None = None,
) -> AntsRegistrationSyNShParameters:
    """
    Build parameters.
    
    Args:
        image_dimension: Image dimension: 2 or 3 (for 2 or 3-dimensional\
            registration of a single volume).
        fixed_image: Fixed image(s) or source image(s) or reference image(s).
        moving_image: Moving image(s) or target image(s).
        output_prefix: A prefix that is prepended to all output files.
        threads: Number of threads (default =\
            ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS if defined, otherwise 1).
        initial_transform: Initial transform(s) --- order specified on the\
            command line matters.
        transform_type: Transform type (default = 's'). Options:\
            - t: translation (1 stage)\
            - r: rigid (1 stage)\
            - a: rigid + affine (2 stages)\
            - s: rigid + affine + deformable syn (3 stages)\
            - sr: rigid + deformable syn (2 stages)\
            - so: deformable syn only (1 stage)\
            - b: rigid + affine + deformable b-spline syn (3 stages)\
            - br: rigid + deformable b-spline syn (2 stages)\
            - bo: deformable b-spline syn only (1 stage).
        radius: Radius for cross correlation metric used during SyN stage\
            (default = 4).
        spline_distance: Spline distance for deformable B-spline SyN transform\
            (default = 26).
        gradient_step: Gradient step size for SyN and B-spline SyN (default =\
            0.1).
        masks: Mask(s) for the fixed image space, or for the fixed and moving\
            image space in the format 'fixedMask,MovingMask'. Use -x once to\
            specify mask(s) to be used for all stages or use -x for each 'stage'\
            (cf -t option). If no mask is to be used for a particular stage, the\
            keyword 'NULL' should be used in place of file names.
        precision_type: Precision type (default = 'd'). Options:\
            - f: float\
            - d: double.
        use_histogram_matching: Use histogram matching (default = 0). Options:\
            - 0: false\
            - 1: true.
        use_repro_mode: Use 'repro' mode for exact reproducibility of output.\
            Uses GC metric for linear stages and a fixed random seed (default = 0).\
            Options:\
            - 0: false\
            - 1: true.
        collapse_output_transforms: Collapse output transforms (default = 1).\
            Options:\
            - 0: false\
            - 1: true.
        random_seed: Fix random seed to an int value.
    Returns:
        Parameter dictionary
    """
    params = {
        "__STYXTYPE__": "antsRegistrationSyN.sh",
        "image_dimension": image_dimension,
        "fixed_image": fixed_image,
        "moving_image": moving_image,
        "output_prefix": output_prefix,
    }
    if threads is not None:
        params["threads"] = threads
    if initial_transform is not None:
        params["initial_transform"] = initial_transform
    if transform_type is not None:
        params["transform_type"] = transform_type
    if radius is not None:
        params["radius"] = radius
    if spline_distance is not None:
        params["spline_distance"] = spline_distance
    if gradient_step is not None:
        params["gradient_step"] = gradient_step
    if masks is not None:
        params["masks"] = masks
    if precision_type is not None:
        params["precision_type"] = precision_type
    if use_histogram_matching is not None:
        params["use_histogram_matching"] = use_histogram_matching
    if use_repro_mode is not None:
        params["use_repro_mode"] = use_repro_mode
    if collapse_output_transforms is not None:
        params["collapse_output_transforms"] = collapse_output_transforms
    if random_seed is not None:
        params["random_seed"] = random_seed
    return params


def ants_registration_sy_n_sh_cargs(
    params: AntsRegistrationSyNShParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("antsRegistrationSyN.sh")
    cargs.extend([
        "-d",
        str(params.get("image_dimension"))
    ])
    cargs.extend([
        "-f",
        execution.input_file(params.get("fixed_image"))
    ])
    cargs.extend([
        "-m",
        execution.input_file(params.get("moving_image"))
    ])
    cargs.extend([
        "-o",
        params.get("output_prefix")
    ])
    if params.get("threads") is not None:
        cargs.extend([
            "-n",
            str(params.get("threads"))
        ])
    if params.get("initial_transform") is not None:
        cargs.extend([
            "-i",
            "[" + ",".join(params.get("initial_transform")) + "]"
        ])
    if params.get("transform_type") is not None:
        cargs.extend([
            "-t",
            params.get("transform_type")
        ])
    if params.get("radius") is not None:
        cargs.extend([
            "-r",
            str(params.get("radius"))
        ])
    if params.get("spline_distance") is not None:
        cargs.extend([
            "-s",
            str(params.get("spline_distance"))
        ])
    if params.get("gradient_step") is not None:
        cargs.extend([
            "-g",
            str(params.get("gradient_step"))
        ])
    if params.get("masks") is not None:
        cargs.extend([
            "-x",
            params.get("masks")
        ])
    if params.get("precision_type") is not None:
        cargs.extend([
            "-p",
            params.get("precision_type")
        ])
    if params.get("use_histogram_matching") is not None:
        cargs.extend([
            "-j",
            str(params.get("use_histogram_matching"))
        ])
    if params.get("use_repro_mode") is not None:
        cargs.extend([
            "-y",
            str(params.get("use_repro_mode"))
        ])
    if params.get("collapse_output_transforms") is not None:
        cargs.extend([
            "-z",
            str(params.get("collapse_output_transforms"))
        ])
    if params.get("random_seed") is not None:
        cargs.extend([
            "-e",
            str(params.get("random_seed"))
        ])
    return cargs


def ants_registration_sy_n_sh_outputs(
    params: AntsRegistrationSyNShParameters,
    execution: Execution,
) -> AntsRegistrationSyNShOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AntsRegistrationSyNShOutputs(
        root=execution.output_file("."),
        affine_transform=execution.output_file(params.get("output_prefix") + "0GenericAffine.mat"),
        inverse_warp=execution.output_file(params.get("output_prefix") + "1InverseWarp.nii.gz"),
        forward_warp=execution.output_file(params.get("output_prefix") + "1Warp.nii.gz"),
    )
    return ret


def ants_registration_sy_n_sh_execute(
    params: AntsRegistrationSyNShParameters,
    execution: Execution,
) -> AntsRegistrationSyNShOutputs:
    """
    Script for simplified symmetric image registration using ANTs.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        execution: The execution object.
    Returns:
        NamedTuple of outputs (described in `AntsRegistrationSyNShOutputs`).
    """
    params = execution.params(params)
    cargs = ants_registration_sy_n_sh_cargs(params, execution)
    ret = ants_registration_sy_n_sh_outputs(params, execution)
    execution.run(cargs)
    return ret


def ants_registration_sy_n_sh(
    image_dimension: typing.Literal[2, 3],
    fixed_image: InputPathType,
    moving_image: InputPathType,
    output_prefix: str,
    threads: int | None = None,
    initial_transform: list[str] | None = None,
    transform_type: typing.Literal["t", "r", "a", "s", "sr", "so", "b", "br", "bo"] | None = None,
    radius: int | None = None,
    spline_distance: int | None = None,
    gradient_step: float | None = None,
    masks: str | None = None,
    precision_type: typing.Literal["f", "d"] | None = None,
    use_histogram_matching: typing.Literal[0, 1] | None = None,
    use_repro_mode: typing.Literal[0, 1] | None = None,
    collapse_output_transforms: typing.Literal[0, 1] | None = None,
    random_seed: int | None = None,
    runner: Runner | None = None,
) -> AntsRegistrationSyNShOutputs:
    """
    Script for simplified symmetric image registration using ANTs.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: Image dimension: 2 or 3 (for 2 or 3-dimensional\
            registration of a single volume).
        fixed_image: Fixed image(s) or source image(s) or reference image(s).
        moving_image: Moving image(s) or target image(s).
        output_prefix: A prefix that is prepended to all output files.
        threads: Number of threads (default =\
            ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS if defined, otherwise 1).
        initial_transform: Initial transform(s) --- order specified on the\
            command line matters.
        transform_type: Transform type (default = 's'). Options:\
            - t: translation (1 stage)\
            - r: rigid (1 stage)\
            - a: rigid + affine (2 stages)\
            - s: rigid + affine + deformable syn (3 stages)\
            - sr: rigid + deformable syn (2 stages)\
            - so: deformable syn only (1 stage)\
            - b: rigid + affine + deformable b-spline syn (3 stages)\
            - br: rigid + deformable b-spline syn (2 stages)\
            - bo: deformable b-spline syn only (1 stage).
        radius: Radius for cross correlation metric used during SyN stage\
            (default = 4).
        spline_distance: Spline distance for deformable B-spline SyN transform\
            (default = 26).
        gradient_step: Gradient step size for SyN and B-spline SyN (default =\
            0.1).
        masks: Mask(s) for the fixed image space, or for the fixed and moving\
            image space in the format 'fixedMask,MovingMask'. Use -x once to\
            specify mask(s) to be used for all stages or use -x for each 'stage'\
            (cf -t option). If no mask is to be used for a particular stage, the\
            keyword 'NULL' should be used in place of file names.
        precision_type: Precision type (default = 'd'). Options:\
            - f: float\
            - d: double.
        use_histogram_matching: Use histogram matching (default = 0). Options:\
            - 0: false\
            - 1: true.
        use_repro_mode: Use 'repro' mode for exact reproducibility of output.\
            Uses GC metric for linear stages and a fixed random seed (default = 0).\
            Options:\
            - 0: false\
            - 1: true.
        collapse_output_transforms: Collapse output transforms (default = 1).\
            Options:\
            - 0: false\
            - 1: true.
        random_seed: Fix random seed to an int value.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AntsRegistrationSyNShOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ANTS_REGISTRATION_SY_N_SH_METADATA)
    params = ants_registration_sy_n_sh_params(
        image_dimension=image_dimension,
        fixed_image=fixed_image,
        moving_image=moving_image,
        output_prefix=output_prefix,
        threads=threads,
        initial_transform=initial_transform,
        transform_type=transform_type,
        radius=radius,
        spline_distance=spline_distance,
        gradient_step=gradient_step,
        masks=masks,
        precision_type=precision_type,
        use_histogram_matching=use_histogram_matching,
        use_repro_mode=use_repro_mode,
        collapse_output_transforms=collapse_output_transforms,
        random_seed=random_seed,
    )
    return ants_registration_sy_n_sh_execute(params, execution)


__all__ = [
    "ANTS_REGISTRATION_SY_N_SH_METADATA",
    "AntsRegistrationSyNShOutputs",
    "AntsRegistrationSyNShParameters",
    "ants_registration_sy_n_sh",
    "ants_registration_sy_n_sh_params",
]
